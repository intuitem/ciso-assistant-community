# Generated by Django 5.1.10 on 2025-09-10 12:26
from django.db import migrations, models
import re


def migrate_qualifications_to_terminology(apps, schema_editor):
    """
    Migrate data from old qualifications field (Qualification model)
    to new qualifications field (Terminology model) by matching names
    """
    FearedEvent = apps.get_model("ebios_rm", "FearedEvent")
    Terminology = apps.get_model("core", "Terminology")

    db_alias = schema_editor.connection.alias

    for feared_event in (
        FearedEvent.objects.using(db_alias).prefetch_related("qualifications").all()
    ):
        old_qualifications = feared_event.qualifications.all()

        if not old_qualifications:
            continue

        for qualification in old_qualifications:
            # Match by name (case-insensitive)
            normalized_qual_name = re.sub(
                r"[^a-z0-9]+", "_", qualification.name.lower()
            ).strip("_")

            terminology, created = Terminology.objects.using(db_alias).get_or_create(
                name=normalized_qual_name,
                defaults={"field_path": "qualifications", "is_visible": True},
            )

            feared_event.qualifications_new.add(terminology)


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0094_alter_incident_qualifications_and_more"),
        ("ebios_rm", "0015_replace_risk_origin"),
    ]

    operations = [
        # Step 1: Add new field pointing to Terminology
        migrations.AddField(
            model_name="fearedevent",
            name="qualifications_new",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={"field_path": "qualifications", "is_visible": True},
                related_name="feared_events_qualifications_new",
                to="core.terminology",
                verbose_name="Qualifications",
            ),
        ),
        # Step 2: Migrate data from old field to new field
        migrations.RunPython(migrate_qualifications_to_terminology),
        # Step 3: Remove old field
        migrations.RemoveField(
            model_name="fearedevent",
            name="qualifications",
        ),
        # Step 4: Rename new field to replace old field
        migrations.RenameField(
            model_name="fearedevent",
            old_name="qualifications_new",
            new_name="qualifications",
        ),
        # Step 5: Fix the related_name back to the original value
        migrations.AlterField(
            model_name="fearedevent",
            name="qualifications",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={"field_path": "qualifications", "is_visible": True},
                related_name="feared_events_qualifications",
                to="core.terminology",
                verbose_name="Qualifications",
            ),
        ),
    ]
