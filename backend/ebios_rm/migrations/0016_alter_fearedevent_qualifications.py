# Migration: Replace Qualification with Terminology for FearedEvent.qualifications
# Generated by Django 5.1.10 on 2025-09-10 12:26
from django.db import migrations, models
from re import sub


def migrate_qualifications_to_terminology(apps, schema_editor):
    """
    Migrate data from old qualifications field (Qualification model)
    to new qualifications_new field (Terminology model) by matching names
    """
    FearedEvent = apps.get_model("ebios_rm", "FearedEvent")
    Terminology = apps.get_model("core", "Terminology")

    db_alias = schema_editor.connection.alias

    # Create a cache of Terminology objects by name for faster lookup
    terminology_cache = {}
    for terminology in Terminology.objects.using(db_alias).filter(
        field_path="qualifications"
    ):
        # Normalize name for case-insensitive matching
        normalized_name = terminology.name.lower().strip()
        terminology_cache[normalized_name] = terminology

    print(
        f"Found {len(terminology_cache)} terminology objects: {list(terminology_cache.keys())}"
    )

    # Migrate each FearedEvent's qualifications
    migrated_count = 0
    warning_count = 0

    for feared_event in (
        FearedEvent.objects.using(db_alias).prefetch_related("qualifications").all()
    ):
        old_qualifications = feared_event.qualifications.all()

        if not old_qualifications:
            continue

        print(
            f"Processing FearedEvent {feared_event.id} with {len(old_qualifications)} qualifications"
        )

        for qualification in old_qualifications:
            # Match by name (case-insensitive)
            normalized_qual_name = "_".join(
                sub(
                    "([A-Z][a-z]+)",
                    r" \1",
                    sub("([A-Z]+)", r" \1", qualification.name.replace("-", " ")),
                ).split()
            ).lower()
            terminology = terminology_cache.get(normalized_qual_name)

            if terminology:
                feared_event.qualifications_new.add(terminology)
                migrated_count += 1
                print(f"  Migrated: '{qualification.name}' -> '{terminology.name}'")
            else:
                warning_count += 1
                print(
                    f"  WARNING: No matching Terminology found for Qualification '{qualification.name}'"
                )

    print(
        f"Migration completed: {migrated_count} qualifications migrated, {warning_count} warnings"
    )

    if warning_count > 0:
        print("\nAvailable Terminology names:")
        for name in sorted(terminology_cache.keys()):
            print(f"  - {name}")


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0094_alter_incident_qualifications_and_more"),
        ("ebios_rm", "0015_replace_risk_origin"),
    ]

    operations = [
        # Step 1: Add new field pointing to Terminology
        migrations.AddField(
            model_name="fearedevent",
            name="qualifications_new",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={"field_path": "qualifications", "is_visible": True},
                related_name="feared_events_qualifications_new",
                to="core.terminology",
                verbose_name="Qualifications",
            ),
        ),
        # Step 2: Migrate data from old field to new field
        migrations.RunPython(migrate_qualifications_to_terminology),
        # Step 3: Remove old field
        migrations.RemoveField(
            model_name="fearedevent",
            name="qualifications",
        ),
        # Step 4: Rename new field to replace old field
        migrations.RenameField(
            model_name="fearedevent",
            old_name="qualifications_new",
            new_name="qualifications",
        ),
        # Step 5: Fix the related_name back to the original value
        migrations.AlterField(
            model_name="fearedevent",
            name="qualifications",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to={"field_path": "qualifications", "is_visible": True},
                related_name="feared_events_qualifications",
                to="core.terminology",
                verbose_name="Qualifications",
            ),
        ),
    ]
