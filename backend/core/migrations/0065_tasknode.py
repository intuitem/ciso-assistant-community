# Generated by Django 5.1.7 on 2025-03-31 11:13

import core.validators
import django.db.models.deletion
import iam.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0064_replace_slash_in_folder_names'),
        ('iam', '0011_replace_slash_in_folder_names'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_published', models.BooleanField(default=False, verbose_name='published')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('ref_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='reference id')),
                ('iteration', models.IntegerField(default=0)),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='Due date')),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=50)),
                ('observation', models.TextField(blank=True, null=True, verbose_name='Observation')),
                ('is_template', models.BooleanField(default=False)),
                ('enabled', models.BooleanField(default=True)),
                ('schedule', models.JSONField(blank=True, null=True, validators=[core.validators.JSONSchemaInstanceValidator({'$id': 'https://ciso-assistant.com/schemas/task-node/schedule.schema.json', '$schema': 'https://json-schema.org/draft/2020-12/schema', 'additionalProperties': False, 'description': 'Schedule definition of a task', 'properties': {'days_of_month': {'description': "Optional. Days of the month (negative values count from the month's end, e.g., -1 for last day)", 'items': {'maximum': 31, 'minimum': -31, 'not': {'enum': [0]}, 'type': 'integer'}, 'type': 'array'}, 'days_of_week': {'description': 'Optional. Days of the week (0=Sunday, 6=Saturday)', 'items': {'maximum': 6, 'minimum': 0, 'type': 'integer'}, 'type': 'array'}, 'endDate': {'description': 'Optional. Date when recurrence ends.', 'format': 'date', 'type': ['string', 'null']}, 'exceptions': {'description': 'Optional. JSON object for future exceptions handling.', 'type': ['object', 'null']}, 'frequency': {'enum': ['ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'], 'type': 'string'}, 'months_of_year': {'description': 'Optional. Months of the year (1=January, 12=December)', 'items': {'maximum': 12, 'minimum': 1, 'type': 'integer'}, 'type': 'array'}, 'occurrences': {'description': 'Optional. Number of occurrences before recurrence stops.', 'minimum': 1, 'type': ['integer', 'null']}, 'overdue_behavior': {'default': 'NO_IMPACT', 'description': 'Optional. Behavior when tasks become overdue.', 'enum': ['DELAY_NEXT', 'NO_IMPACT'], 'type': 'string'}}, 'required': ['frequency'], 'title': 'Schedule', 'type': 'object'})], verbose_name='Schedule definition')),
                ('applied_controls', models.ManyToManyField(blank=True, help_text='Applied controls related to the task', related_name='tasks', to='core.appliedcontrol', verbose_name='Applied controls')),
                ('assets', models.ManyToManyField(blank=True, help_text='Assets related to the task', related_name='tasks', to='core.asset', verbose_name='Related assets')),
                ('compliance_assessments', models.ManyToManyField(blank=True, help_text='Compliance assessments related to the task', related_name='tasks', to='core.complianceassessment', verbose_name='Compliance assessments')),
                ('folder', models.ForeignKey(default=iam.models.Folder.get_root_folder_id, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_folder', to='iam.folder')),
                ('generator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tasknode')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('risk_assessments', models.ManyToManyField(blank=True, help_text='Risk assessments related to the task', related_name='tasks', to='core.riskassessment', verbose_name='Risk assessments')),
            ],
            options={
                'verbose_name': 'Task node',
                'verbose_name_plural': 'Task nodes',
            },
        ),
    ]
