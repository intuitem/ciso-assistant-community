# Generated by Django 5.1.10 on 2025-09-03 16:58

import core.models
import core.validators
from django.db import migrations, models


def convert_cost_to_json(apps, schema_editor):
    """Convert existing numeric cost values to JSON structure"""
    AppliedControl = apps.get_model("core", "AppliedControl")

    for control in AppliedControl.objects.filter(cost__isnull=False):
        try:
            # Store the current numeric cost
            old_cost = float(control.cost)

            # Convert to new JSON structure and save in temp field
            control.cost_temp = {
                "currency": "€",
                "amortization_period": 1,
                "build": {
                    "fixed_cost": old_cost,
                    "people_days": 0.0,
                },
                "run": {"fixed_cost": 0.0, "people_days": 0.0},
            }
            control.save(update_fields=["cost_temp"])

        except (ValueError, TypeError):
            # Set to default structure for invalid values
            control.cost_temp = {
                "currency": "€",
                "amortization_period": 1,
                "build": {"fixed_cost": 0.0, "people_days": 0.0},
                "run": {"fixed_cost": 0.0, "people_days": 0.0},
            }
            control.save(update_fields=["cost_temp"])


def reverse_cost_conversion(apps, schema_editor):
    """Convert JSON cost_temp back to numeric cost value"""
    AppliedControl = apps.get_model("core", "AppliedControl")

    for control in AppliedControl.objects.filter(cost_temp__isnull=False):
        try:
            if isinstance(control.cost_temp, dict) and "build" in control.cost_temp:
                # Extract fixed_cost from build section
                fixed_cost = control.cost_temp["build"].get("fixed_cost", 0.0)
                control.cost = float(fixed_cost) if fixed_cost is not None else 0.0
            else:
                control.cost = 0.0
            control.save(update_fields=["cost"])
        except (ValueError, TypeError, KeyError):
            control.cost = 0.0
            control.save(update_fields=["cost"])


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0093_alter_asset_parent_assets"),
    ]

    operations = [
        # Step 1: Add temporary JSONField
        migrations.AddField(
            model_name="appliedcontrol",
            name="cost_temp",
            field=models.JSONField(blank=True, null=True),
        ),
        # Step 2: Convert data from old cost to new cost_temp
        migrations.RunPython(
            convert_cost_to_json,
            reverse_cost_conversion,
        ),
        # Step 3: Remove old cost field
        migrations.RemoveField(
            model_name="appliedcontrol",
            name="cost",
        ),
        # Step 4: Rename cost_temp to cost
        migrations.RenameField(
            model_name="appliedcontrol",
            old_name="cost_temp",
            new_name="cost",
        ),
        # Step 5: Set up final field with validators and default
        migrations.AlterField(
            model_name="appliedcontrol",
            name="cost",
            field=models.JSONField(
                blank=True,
                default=core.models.AppliedControl._get_default_cost,
                help_text="Detailed cost structure including build and run costs",
                null=True,
                validators=[
                    core.validators.JSONSchemaInstanceValidator(
                        {
                            "additionalProperties": False,
                            "properties": {
                                "amortization_period": {
                                    "default": 1,
                                    "maximum": 50,
                                    "minimum": 1,
                                    "type": "number",
                                },
                                "build": {
                                    "additionalProperties": False,
                                    "properties": {
                                        "fixed_cost": {"minimum": 0, "type": "number"},
                                        "people_days": {"minimum": 0, "type": "number"},
                                    },
                                    "type": "object",
                                },
                                "currency": {"type": "string"},
                                "run": {
                                    "additionalProperties": False,
                                    "properties": {
                                        "fixed_cost": {"minimum": 0, "type": "number"},
                                        "people_days": {"minimum": 0, "type": "number"},
                                    },
                                    "type": "object",
                                },
                            },
                            "type": "object",
                        }
                    )
                ],
                verbose_name="Cost",
            ),
        ),
    ]
