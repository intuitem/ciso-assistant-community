# Generated by Django 5.1.8 on 2025-04-15 07:01

import core.validators
import django.db.models.deletion
import iam.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0067_appliedcontrol_control_impact_and_more"),
        ("iam", "0011_replace_slash_in_folder_names"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "task_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                ("is_recurrent", models.BooleanField(default=False)),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="reference id",
                    ),
                ),
                (
                    "schedule",
                    models.JSONField(
                        blank=True,
                        null=True,
                        validators=[
                            core.validators.JSONSchemaInstanceValidator(
                                {
                                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                                    "additionalProperties": False,
                                    "properties": {
                                        "days_of_week": {
                                            "description": "Optional. Days of the week (Monday=1, Sunday=7)",
                                            "items": {
                                                "maximum": 7,
                                                "minimum": 1,
                                                "type": "integer",
                                            },
                                            "type": "array",
                                        },
                                        "end_date": {
                                            "description": "Optional. Date when recurrence ends.",
                                            "format": "date",
                                            "type": ["string", "null"],
                                        },
                                        "exceptions": {
                                            "description": "Optional. JSON object for future exceptions handling.",
                                            "type": ["object", "null"],
                                        },
                                        "frequency": {
                                            "enum": [
                                                "DAILY",
                                                "WEEKLY",
                                                "MONTHLY",
                                                "YEARLY",
                                            ],
                                            "type": "string",
                                        },
                                        "interval": {
                                            "description": "Number of periods to wait before repeating (e.g., every 2 days, 3 weeks).",
                                            "minimum": 1,
                                            "type": "integer",
                                        },
                                        "months_of_year": {
                                            "description": "Optional. Months of the year (1=January, 12=December)",
                                            "items": {
                                                "maximum": 12,
                                                "minimum": 1,
                                                "type": "integer",
                                            },
                                            "type": "array",
                                        },
                                        "occurrences": {
                                            "description": "Optional. Number of occurrences before recurrence stops.",
                                            "minimum": 1,
                                            "type": ["integer", "null"],
                                        },
                                        "overdue_behavior": {
                                            "default": "NO_IMPACT",
                                            "description": "Optional. Behavior when tasks become overdue.",
                                            "enum": ["DELAY_NEXT", "NO_IMPACT"],
                                            "type": "string",
                                        },
                                        "weeks_of_month": {
                                            "description": "Optional. for a given weekday, which one in the month (1 for first, -1 for last)",
                                            "items": {
                                                "maximum": 4,
                                                "minimum": -1,
                                                "type": "integer",
                                            },
                                            "type": "array",
                                        },
                                    },
                                    "required": ["interval", "frequency"],
                                    "title": "Schedule Definition",
                                    "type": "object",
                                }
                            )
                        ],
                        verbose_name="Schedule definition",
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                (
                    "applied_controls",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Applied controls related to the task",
                        related_name="task_templates",
                        to="core.appliedcontrol",
                        verbose_name="Applied controls",
                    ),
                ),
                (
                    "assets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Assets related to the task",
                        related_name="task_templates",
                        to="core.asset",
                        verbose_name="Related assets",
                    ),
                ),
                (
                    "assigned_to",
                    models.ManyToManyField(
                        blank=True,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned to",
                    ),
                ),
                (
                    "compliance_assessments",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Compliance assessments related to the task",
                        related_name="task_templates",
                        to="core.complianceassessment",
                        verbose_name="Compliance assessments",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "risk_assessments",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Risk assessments related to the task",
                        related_name="task_templates",
                        to="core.riskassessment",
                        verbose_name="Risk assessments",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task template",
                "verbose_name_plural": "Task templates",
            },
        ),
        migrations.CreateModel(
            name="TaskNode",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "due_date",
                    models.DateField(blank=True, null=True, verbose_name="Due date"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                (
                    "observation",
                    models.TextField(blank=True, null=True, verbose_name="Observation"),
                ),
                ("to_delete", models.BooleanField(default=False)),
                (
                    "evidences",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Evidences related to the task",
                        related_name="task_nodes",
                        to="core.evidence",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "task_template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.tasktemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task node",
                "verbose_name_plural": "Task nodes",
            },
        ),
    ]
