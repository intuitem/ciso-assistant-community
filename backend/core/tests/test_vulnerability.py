import pytest
import hashlib
from django.core.exceptions import ValidationError
from django.contrib.auth import get_user_model
from iam.models import Folder

from core.models import (
    Vulnerability,
)

from core.serializers import VulnerabilityImportExportSerializer

from .fixtures import *

User = get_user_model()


@pytest.fixture
def valid_vulnerability_data(domain_project_fixture, applied_controls):
    domain = Folder.objects.filter(content_type=Folder.ContentType.DOMAIN).first()
    applied_controls = AppliedControl.objects.all()
    return {
        "ref_id": "VULN-2025-001",
        "name": "SQL Injection in Login Form",
        "description": "A SQL injection vulnerability was found in the login form",
        "folder": str(domain.id),
        "status": Vulnerability.Status.EXPLOITABLE,
        "severity": 2,
        "applied_controls": [control.id for control in applied_controls[:2]],
        "created_at": "2025-01-13T10:00:00Z",
        "updated_at": "2025-01-13T10:00:00Z",
    }


@pytest.mark.django_db
class TestVulnerability:
    @pytest.mark.usefixtures("domain_project_fixture", "applied_controls")
    def test_basic_vulnerability_creation(self):
        vulnerability = Vulnerability.objects.create(
            name="SQL Injection in Login Form",
        )

        assert vulnerability is not None
        assert vulnerability.name == "SQL Injection in Login Form"
        assert vulnerability.ref_id == ""
        assert vulnerability.description is None
        assert vulnerability.folder == Folder.get_root_folder()
        assert vulnerability.status == Vulnerability.Status.UNDEFINED
        assert vulnerability.severity == -1
        assert vulnerability.applied_controls.count() == 0
        assert vulnerability.created_at is not None
        assert vulnerability.updated_at is not None

    @pytest.mark.usefixtures("domain_project_fixture")
    def test_vulnerability_creation_same_name_in_scope(self):
        domain = Folder.objects.filter(content_type=Folder.ContentType.DOMAIN).first()
        vulnerability = Vulnerability.objects.create(
            name="SQL Injection in Login Form", folder=domain
        )
        assert vulnerability is not None
        assert vulnerability.folder == domain

        with pytest.raises(ValidationError):
            Vulnerability.objects.create(
                name="SQL Injection in Login Form", folder=domain
            )

    def test_vulnerability_import_export_valid_data(self, valid_vulnerability_data):
        """Test serializer with valid data"""
        serializer = VulnerabilityImportExportSerializer(data=valid_vulnerability_data)
        assert serializer.is_valid(), f"Validation errors: {serializer.errors}"
        assert serializer.errors == {}

    def test_missing_required_fields(self):
        """Test with missing required fields"""
        incomplete_data = {}
        serializer = VulnerabilityImportExportSerializer(data=incomplete_data)
        assert not serializer.is_valid()
        for field in [
            "name",
        ]:
            assert field in serializer.errors

    def test_serialization(self, domain_project_fixture, applied_controls):
        """Test serializing an existing vulnerability instance"""
        folder = Folder.objects.filter(content_type=Folder.ContentType.DOMAIN).first()
        vulnerability = Vulnerability.objects.create(
            ref_id="VULN-2025-002",
            name="XSS in Comments",
            description="Cross-site scripting vulnerability in comments section",
            folder=folder,
            status="open",
            severity=3,
            created_at="2025-01-13T10:00:00Z",
            updated_at="2025-01-13T10:00:00Z",
        )
        vulnerability.applied_controls.set(applied_controls[:2])

        serializer = VulnerabilityImportExportSerializer(vulnerability)
        data = serializer.data

        assert data["ref_id"] == "VULN-2025-002"
        assert data["name"] == "XSS in Comments"
        assert data["severity"] == 3
        assert (
            data["folder"]
            == hashlib.sha256(str(getattr(folder, "pk")).encode()).hexdigest()[:12]
        )
        assert len(data["applied_controls"]) == 2
        assert isinstance(data["severity"], int)

    def test_empty_relationships(self, valid_vulnerability_data):
        """Test with empty relationships"""
        valid_vulnerability_data.update({"applied_controls": []})
        serializer = VulnerabilityImportExportSerializer(data=valid_vulnerability_data)
        assert serializer.is_valid(), f"Validation errors: {serializer.errors}"
        assert serializer.errors == {}
