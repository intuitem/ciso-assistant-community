# Generated by Django 5.1.7 on 2025-04-05 10:30
from django.db import migrations


def add_privacy_prefix(apps, schema_editor):
    # Processing model
    Processing = apps.get_model("privacy", "Processing")
    status_map = {
        "draft": "privacy_draft",
        "in_review": "privacy_in_review",
        "approved": "privacy_approved",
        "deprecated": "privacy_deprecated",
    }
    for obj in Processing.objects.all():
        if obj.status in status_map:
            obj.status = status_map[obj.status]
            obj.save(update_fields=["status"])

    # PersonalData model
    PersonalData = apps.get_model("privacy", "PersonalData")
    # Deletion policy mapping
    deletion_map = {
        "automatic_deletion": "privacy_automatic_deletion",
        "anonymization": "privacy_anonymization",
        "manual_review_deletion": "privacy_manual_review_deletion",
        "user_requested_deletion": "privacy_user_requested_deletion",
        "legal_regulatory_hold": "privacy_legal_regulatory_hold",
        "partial_deletion": "privacy_partial_deletion",
    }
    # Personal data category mapping
    for obj in PersonalData.objects.all():
        if obj.deletion_policy and obj.deletion_policy in deletion_map:
            obj.deletion_policy = deletion_map[obj.deletion_policy]
        if obj.category and not obj.category.startswith("privacy_"):
            obj.category = f"privacy_{obj.category}"
        obj.save(update_fields=["deletion_policy", "category"])

    # DataSubject model
    DataSubject = apps.get_model("privacy", "DataSubject")
    for obj in DataSubject.objects.all():
        if obj.category and not obj.category.startswith("privacy_"):
            obj.category = f"privacy_{obj.category}"
            obj.save(update_fields=["category"])

    # DataRecipient model
    DataRecipient = apps.get_model("privacy", "DataRecipient")
    for obj in DataRecipient.objects.all():
        if obj.category and not obj.category.startswith("privacy_"):
            obj.category = f"privacy_{obj.category}"
            obj.save(update_fields=["category"])

    # DataContractor model
    DataContractor = apps.get_model("privacy", "DataContractor")
    for obj in DataContractor.objects.all():
        if obj.relationship_type and not obj.relationship_type.startswith("privacy_"):
            obj.relationship_type = f"privacy_{obj.relationship_type}"
            obj.save(update_fields=["relationship_type"])

    # ProcessingNature handling - properly manage M2M relationships
    ProcessingNature = apps.get_model("privacy", "ProcessingNature")

    # Get the through model for the M2M relationship
    ThroughModel = Processing.nature.through

    # First, create prefixed versions for all existing natures and track mappings
    nature_mapping = {}  # Maps old nature ID to new nature object

    for old_nature in ProcessingNature.objects.exclude(name__startswith="privacy_"):
        new_name = f"privacy_{old_nature.name}"
        # Create the new nature with prefixed name
        new_nature, created = ProcessingNature.objects.get_or_create(name=new_name)
        nature_mapping[old_nature.id] = new_nature

    # Now handle the M2M relationships directly through the through table
    # First, find all relationships to old natures
    old_relationships = ThroughModel.objects.filter(
        processingnature_id__in=nature_mapping.keys()
    )

    # For each old relationship, create a new one to the corresponding new nature
    for rel in old_relationships:
        new_nature = nature_mapping[rel.processingnature_id]
        # Create new relationship if it doesn't exist
        ThroughModel.objects.get_or_create(
            processing_id=rel.processing_id, processingnature_id=new_nature.id
        )

    # Delete the old relationships
    old_relationships.delete()

    # Now it's safe to delete the old natures
    for old_id, new_nature in nature_mapping.items():
        ProcessingNature.objects.filter(id=old_id).delete()


def remove_privacy_prefix(apps, schema_editor):
    # Rollback function - not implemented for safety
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("privacy", "0002_alter_datacontractor_relationship_type_and_more"),
    ]
    operations = [
        migrations.RunPython(add_privacy_prefix, remove_privacy_prefix),
    ]
