# Generated by Django 5.2.7 on 2025-10-03 17:36

import django.db.models.deletion
import iam.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0103_alter_terminology_field_path"),
        ("iam", "0015_user_expiry_date"),
        ("privacy", "0007_rightrequest"),
        ("tprm", "0007_entity_relationship"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataBreach",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("ref_id", models.CharField(blank=True, max_length=100)),
                ("discovered_on", models.DateTimeField()),
                (
                    "breach_type",
                    models.CharField(
                        choices=[
                            ("privacy_destruction", "Destruction"),
                            ("privacy_loss", "Loss"),
                            ("privacy_alteration", "Alteration"),
                            (
                                "privacy_unauthorized_disclosure",
                                "Unauthorized Disclosure",
                            ),
                            ("privacy_unauthorized_access", "Unauthorized Access"),
                            ("privacy_other", "Other"),
                        ],
                        default="privacy_other",
                        max_length=50,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("privacy_no_risk", "No Risk"),
                            ("privacy_risk", "Risk"),
                            ("privacy_high_risk", "High Risk"),
                        ],
                        default="privacy_risk",
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("privacy_discovered", "Discovered"),
                            ("privacy_under_investigation", "Under Investigation"),
                            ("privacy_authority_notified", "Authority Notified"),
                            ("privacy_subjects_notified", "Data Subjects Notified"),
                            ("privacy_closed", "Closed"),
                        ],
                        default="privacy_discovered",
                        max_length=50,
                    ),
                ),
                (
                    "affected_subjects_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Approximate number of affected data subjects",
                    ),
                ),
                (
                    "affected_personal_data_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Approximate number of affected personal data",
                    ),
                ),
                ("authority_notified_on", models.DateTimeField(blank=True, null=True)),
                (
                    "authority_notification_ref",
                    models.CharField(blank=True, max_length=255),
                ),
                ("subjects_notified_on", models.DateTimeField(blank=True, null=True)),
                ("potential_consequences", models.TextField(blank=True)),
                (
                    "reference_link",
                    models.URLField(blank=True, max_length=2048, null=True),
                ),
                ("observation", models.TextField(blank=True)),
                (
                    "affected_personal_data",
                    models.ManyToManyField(
                        blank=True,
                        related_name="data_breaches",
                        to="privacy.personaldata",
                    ),
                ),
                (
                    "affected_processings",
                    models.ManyToManyField(
                        blank=True,
                        related_name="data_breaches",
                        to="privacy.processing",
                    ),
                ),
                (
                    "authorities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Regulatory authorities to notify (e.g., CNIL, ICO, etc.)",
                        related_name="data_breaches_authorities",
                        to="tprm.entity",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to associated security incident investigation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="data_breaches",
                        to="core.incident",
                    ),
                ),
                (
                    "remediation_measures",
                    models.ManyToManyField(
                        blank=True,
                        related_name="data_breaches_remediated",
                        to="core.appliedcontrol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Breach",
                "verbose_name_plural": "Data Breaches",
                "ordering": ["-discovered_on"],
            },
        ),
    ]
