import { LoginPage } from '../../../utils/login-page.js';
import { test, expect, type Page, TestContent } from '../../../utils/test-utils.js';

const vars = TestContent.generateTestVars();

test.describe.configure({ mode: 'serial' });

test.describe('Client settings', () => {
	let page: Page;
	test.beforeAll(async ({ browser }, testInfo) => {
		// Create a unique page to use for all the tests on this user group and login
		page = await browser.newPage();
		const loginPage = new LoginPage(page);
		await loginPage.goto();
		await page
			.getByTestId('logo-image')
			.screenshot({ path: testInfo.snapshotPath('login-logo.png') });
		await loginPage.login(LoginPage.defaultEmail, LoginPage.defaultPassword);
		await expect(page).toHaveURL('/analytics');
		const modalBackdrop = page.getByTestId('modal-backdrop');
		if (await modalBackdrop.isVisible()) {
			await modalBackdrop.press('Escape');
			await expect(modalBackdrop).not.toBeVisible();
		}

		if (await page.locator('#driver-dummy-element').isVisible()) {
			await page.locator('.driver-popover-close-btn').first().click();
		}
		await page
			.getByTestId('logo-image')
			.screenshot({ path: testInfo.snapshotPath('header-logo.png') });
	});

	test.use({
		page: async ({}, use) => {
			await use(page);
		}
	});

	test.beforeEach(async ({ settingsPage, page }) => {
		await settingsPage.goto();
		await settingsPage.hasUrl();
		await settingsPage.hasTitle();
		await page.getByRole('tab', { name: 'ï‚„ Client settings' }).click();
	});

	test('admin can change client name', async ({ page }) => {
		await expect(page.getByTestId('client-name')).not.toBeVisible();
		await page.getByTestId('form-input-name').click();
		await page.getByTestId('form-input-name').fill('RSSI Assistant');
		await page.getByRole('button', { name: 'Save' }).click();
		await expect(page.getByTestId('toast')).toBeVisible();
		await page.getByTestId('toast').getByLabel('Dismiss toast').click();
		await page.reload();
		await expect(page.getByTestId('client-name')).toHaveText('RSSI Assistant');
	});

	test('admin can change client logo', async ({ page }) => {
		await expect(page.getByTestId('logo-image')).toHaveScreenshot('header-logo.png');
		await page.getByTestId('form-input-logo').click();
		await page.getByTestId('form-input-logo').setInputFiles(vars.logo);
		await page.getByRole('button', { name: 'Save' }).click();
		await expect(page.getByTestId('toast')).toBeVisible();
		await page.getByTestId('toast').getByLabel('Dismiss toast').click();
		await page.reload();

		// Get the locator for the logo in the app's header

		// Assert that the new logo is NOT the same as the base logo snapshot.
		// This relies on 'base-logo.png' being generated by the last test.
		await expect(page.getByTestId('logo-image')).not.toHaveScreenshot('header-logo.png');
	});

	test('admin can change client favicon', async ({ page }) => {
		await page.getByTestId('form-input-favicon').click();
		await page.getByTestId('form-input-favicon').setInputFiles(vars.favicon);
		await page.getByRole('button', { name: 'Save' }).click();
		await expect(page.getByTestId('toast')).toBeVisible();
		await page.getByTestId('toast').getByLabel('Dismiss toast').click();
		await page.reload();
	});

	test('custom logo and favicon are not shown on login page if show_images_unauthenticated is disabled', async ({
		page
	}) => {
		await page.getByTestId('form-input-show-images-unauthenticated').uncheck();
		await page.getByRole('button', { name: 'Save' }).click();
		await expect(page.getByTestId('toast')).toBeVisible();
		await page.getByTestId('toast').getByLabel('Dismiss toast').click();
		await page.getByTestId('sidebar-more-btn').click();
		await page.getByTestId('logout-button').click();
		await expect(page).toHaveURL(/\/login.*/);

		// Assert that the logo displayed is the base logo.
		// On the first run with '--update-snapshots', this will create 'base-logo.png'.
		// On subsequent runs, it will compare the current logo to that saved file.
		await expect(page.getByTestId('logo-image')).toHaveScreenshot('login-logo.png');

		await expect(page.getByTestId('client-name')).not.toBeVisible();
		await page.getByTestId('form-input-username').click();
		await page.getByTestId('form-input-username').fill(LoginPage.defaultEmail);
		await page.getByTestId('form-input-password').click();
		await page.getByTestId('form-input-password').fill(LoginPage.defaultPassword);
		await page.getByTestId('login-btn').click();
		await expect(page).not.toHaveURL(/\/login.*/);
	});

	test('custom logo and favicon are shown on login page if show_images_unauthenticated is enabled', async ({
		page
	}) => {
		await page.getByTestId('form-input-show-images-unauthenticated').check();
		await page.getByRole('button', { name: 'Save' }).click();
		await expect(page.getByTestId('toast')).toBeVisible();
		await page.getByTestId('toast').getByLabel('Dismiss toast').click();
		await page.getByTestId('sidebar-more-btn').click();
		await page.getByTestId('logout-button').click();
		await expect(page).toHaveURL(/\/login.*/);
		await expect(page.getByTestId('logo-image')).toBeVisible();

		// Assert that the custom logo on the login page is NOT the base logo.
		await expect(page.getByTestId('logo-image')).not.toHaveScreenshot('login-logo.png');

		await expect(page.getByTestId('client-name')).toBeVisible();
		await expect(page.getByTestId('client-name')).toHaveText('RSSI Assistant');
		await page.getByTestId('form-input-username').click();
		await page.getByTestId('form-input-username').fill(LoginPage.defaultEmail);
		await page.getByTestId('form-input-password').click();
		await page.getByTestId('form-input-password').fill(LoginPage.defaultPassword);
		await page.getByTestId('login-btn').click();
		await expect(page).not.toHaveURL(/\/login.*/);
	});
});
