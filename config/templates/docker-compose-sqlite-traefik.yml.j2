services:
  backend:
    container_name: backend
    image: ghcr.io/intuitem/ciso-assistant-community/backend:latest
    pull_policy: always
    restart: always
    environment:
      - ALLOWED_HOSTS=backend,localhost{% if fqdn != 'localhost'%},{{ fqdn }}{% endif %}
      - CISO_ASSISTANT_URL=https://{{ fqdn }}:{{ port }}
      - DJANGO_DEBUG={{ enable_debug }}
      - AUTH_TOKEN_TTL=7200
      {% if need_mailer %}
      - EMAIL_HOST={{ email.host }}
      - EMAIL_PORT={{ email.port }}
      {% if email.use_tls %}- EMAIL_USE_TLS={{ email.use_tls }}{% endif %}
      - EMAIL_HOST_USER={{ email.user }}
      - EMAIL_HOST_PASSWORD={{ email.password }}
      - DEFAULT_FROM_EMAIL={{ email.from_email }}
      {% endif %}
    volumes:
      - ./db:/code/db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://backend:8000/api/build || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 100s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`{{ fqdn }}`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"{% if can_do_tls %}
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"{% endif %}
  huey:
    container_name: huey
    image: ghcr.io/intuitem/ciso-assistant-community/backend:latest
    pull_policy: always
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    environment:
      - ALLOWED_HOSTS=backend,localhost
      - CISO_ASSISTANT_URL=https://{{ fqdn }}:{{ port }}
      - DJANGO_DEBUG=False
      - AUTH_TOKEN_TTL=7200
      {% if need_mailer %}
      - EMAIL_HOST={{ email.host }}
      - EMAIL_PORT={{ email.port }}
      {% if email.use_tls %}- EMAIL_USE_TLS={{ email.use_tls }}{% endif %}
      - EMAIL_HOST_USER={{ email.user }}
      - EMAIL_HOST_PASSWORD={{ email.password }}
      - DEFAULT_FROM_EMAIL={{ email.from_email }}
      {% endif %}
    volumes:
      - ./db:/code/db
    entrypoint:
      - /bin/sh
      - -c
      - |
        poetry run python manage.py run_huey -w 2 --scheduler-interval 60
  frontend:
    container_name: frontend
    environment:
      - PUBLIC_BACKEND_API_URL=http://backend:8000/api
      - PUBLIC_BACKEND_API_EXPOSED_URL=https://{{ fqdn }}:{{ port }}/api
      - PROTOCOL_HEADER=x-forwarded-proto
      - HOST_HEADER=x-forwarded-host
    image: ghcr.io/intuitem/ciso-assistant-community/frontend:latest
    pull_policy: always
    depends_on:
      backend:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`{{ fqdn }}`) && PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"{% if can_do_tls %}
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"{% endif %}
  traefik:
    container_name: traefik
    image: traefik:v3
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      {% if can_do_tls %}- "80:80"{% endif %}
      - {{ port }}:{{ port }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik_data:/etc/traefik{% if not can_do_tls and use_custom_cert %}
      - ./certificates.yaml:/etc/traefik/certificates.yaml:ro
      - {{ cert_config.cert_path }}:/etc/traefik/cert.pem:ro
      - {{ cert_config.key_path }}:/etc/traefik/key.pem:ro{% endif %}
    command:
      {% if enable_debug %}- "--api.insecure=true"{% endif %}
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"{% if can_do_tls %}
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"{% endif %}
      - "--entrypoints.websecure.address=:{{ port }}"{% if can_do_tls %}
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email={{ email.from_email if need_mailer else 'admin@example.com' }}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"{% elif use_custom_cert %}
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"{% else %}
      - "--experimental.localPlugins.selfsigned.moduleName=traefik.tls"{% endif %}
