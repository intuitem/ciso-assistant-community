import marimo

__generated_with = "0.17.0"
app = marimo.App(width="medium")


@app.cell
def _():
    """Import required libraries"""
    import marimo as mo
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from pathlib import Path

    return mo, np, pd, plt, sns


@app.cell
def _(mo):
    mo.md(
        r"""
    \"""
    # Framework Mapping Heatmap Builder

    This notebook creates interactive heatmap visualizations from framework mapping CSV files.
    Upload a mapping CSV file generated by the SBERT mapper or other mapping tools.
    \"""
    mo.md(
        \"""
        # Framework Mapping Heatmap Builder

        This notebook creates interactive heatmap visualizations from framework mapping CSV files.
        Upload a mapping CSV file generated by the SBERT mapper or other mapping tools.

        ## Instructions
        1. Upload your mapping CSV file
        2. Adjust visualization parameters below
        3. View the generated heatmap and statistics
        \"""
    )
    """
    )
    return


@app.cell
def _(mo):
    """File upload widget"""
    file_upload = mo.ui.file(
        filetypes=[".csv"], kind="area", label="Upload mapping CSV file"
    )
    file_upload
    return (file_upload,)


@app.cell
def _(file_upload, mo):
    """Display file info when uploaded"""
    if file_upload.value is not None:
        mo.md(f"**Uploaded file:** {file_upload.name()}")
    else:
        mo.md("*No file uploaded yet*")
    return


@app.cell
def _(mo):
    """Visualization parameter controls"""

    # Threshold slider
    threshold_slider = mo.ui.slider(
        start=0.0,
        stop=1.0,
        step=0.05,
        value=0.0,
        label="Score threshold (0 = show all)",
        show_value=True,
    )

    # Use labels checkbox
    use_labels_checkbox = mo.ui.checkbox(
        value=False, label="Use ref_ids as labels (may be crowded for large datasets)"
    )

    # Colormap dropdown
    colormap_dropdown = mo.ui.dropdown(
        options=[
            "YlOrRd",
            "viridis",
            "plasma",
            "RdYlGn",
            "coolwarm",
            "Blues",
            "Greens",
            "Reds",
        ],
        value="YlOrRd",
        label="Colormap",
    )

    # Figure size sliders
    fig_width_slider = mo.ui.slider(
        start=10,
        stop=40,
        step=2,
        value=20,
        label="Figure width (inches)",
        show_value=True,
    )

    fig_height_slider = mo.ui.slider(
        start=8,
        stop=32,
        step=2,
        value=16,
        label="Figure height (inches)",
        show_value=True,
    )

    mo.md(
        f"""
        ## Visualization Parameters

        {threshold_slider}

        {use_labels_checkbox}

        {colormap_dropdown}

        {fig_width_slider}

        {fig_height_slider}
        """
    )
    return (
        colormap_dropdown,
        fig_height_slider,
        fig_width_slider,
        threshold_slider,
        use_labels_checkbox,
    )


@app.cell
def _(file_upload, pd):
    """Load and parse the CSV data"""
    import io

    if file_upload.value is not None:
        # Read the uploaded CSV - wrap bytes in BytesIO
        df_raw = pd.read_csv(io.BytesIO(file_upload.contents()))

        # Verify required columns exist
        required_cols = ["source_ref_id", "target_ref_id", "score"]
        missing_cols = [col for col in required_cols if col not in df_raw.columns]

        if missing_cols:
            df = None
            load_error = f"Missing required columns: {missing_cols}"
        else:
            df = df_raw
            load_error = None
    else:
        df = None
        load_error = "No file uploaded"
    return df, load_error


@app.cell
def _(df, load_error, mo):
    """Display data preview or error"""
    if load_error:
        mo.callout(mo.md(f"**Error:** {load_error}"), kind="warn")
    elif df is not None:
        mo.vstack(
            [
                mo.md(f"**Data loaded successfully!** {len(df)} mappings found."),
                mo.md("### Data Preview (first 10 rows)"),
                mo.ui.table(df.head(10)),
            ]
        )
    return


@app.cell
def _(df, threshold_slider):
    """Filter data based on threshold"""
    if df is not None:
        threshold_value = threshold_slider.value

        if threshold_value > 0:
            df_filtered = df[df["score"] >= threshold_value].copy()
        else:
            df_filtered = df.copy()
    else:
        df_filtered = None
        threshold_value = 0.0
    return df_filtered, threshold_value


@app.cell
def _(df, df_filtered, mo, threshold_value):
    """Display filtering statistics"""
    if df is not None and df_filtered is not None:
        total_mappings = len(df)
        filtered_mappings = len(df_filtered)
        percentage = (
            (filtered_mappings / total_mappings * 100) if total_mappings > 0 else 0
        )

        if threshold_value > 0:
            mo.md(
                f"""
                ### Filtering Statistics
                - Total mappings: **{total_mappings}**
                - Mappings above threshold ({threshold_value:.2f}): **{filtered_mappings}** ({percentage:.1f}%)
                """
            )
        else:
            mo.md(f"### Dataset Statistics\n- Total mappings: **{total_mappings}**")
    return


@app.cell
def _(df_filtered, np):
    """Build the heatmap matrix"""
    if df_filtered is not None and len(df_filtered) > 0:
        # Get unique source and target items
        source_items = df_filtered["source_ref_id"].unique()
        target_items = df_filtered["target_ref_id"].unique()

        # Create mapping matrix
        matrix = np.zeros((len(source_items), len(target_items)))

        # Create index mappings
        source_to_idx = {item: idx for idx, item in enumerate(source_items)}
        target_to_idx = {item: idx for idx, item in enumerate(target_items)}

        # Fill matrix with scores
        for _, row in df_filtered.iterrows():
            source_idx = source_to_idx[row["source_ref_id"]]
            target_idx = target_to_idx[row["target_ref_id"]]
            matrix[source_idx, target_idx] = row["score"]
    else:
        matrix = None
        source_items = None
        target_items = None
        source_to_idx = None
        target_to_idx = None
    return matrix, source_items, target_items


@app.cell
def _(matrix, mo, np):
    """Display matrix statistics"""
    if matrix is not None:
        non_zero_count = np.count_nonzero(matrix)
        total_cells = matrix.size
        non_zero_pct = (non_zero_count / total_cells * 100) if total_cells > 0 else 0
        mean_score = np.mean(matrix)
        max_score = np.max(matrix)
        min_nonzero = np.min(matrix[matrix > 0]) if np.any(matrix > 0) else 0

        mo.md(
            f"""
            ### Matrix Statistics
            - Matrix shape: **{matrix.shape[0]} Ã— {matrix.shape[1]}**
            - Total cells: **{total_cells:,}**
            - Non-zero cells: **{non_zero_count:,}** ({non_zero_pct:.1f}%)
            - Mean score: **{mean_score:.3f}**
            - Max score: **{max_score:.3f}**
            - Min score (excluding zeros): **{min_nonzero:.3f}**
            """
        )
    return


@app.cell
def _(
    colormap_dropdown,
    fig_height_slider,
    fig_width_slider,
    matrix,
    plt,
    sns,
    source_items,
    target_items,
    threshold_value,
    use_labels_checkbox,
):
    """Generate the heatmap visualization"""
    if matrix is not None:
        # Close any existing figures
        plt.close("all")

        # Prepare labels
        if use_labels_checkbox.value:
            row_labels = source_items
            col_labels = target_items
            font_size = 6
        else:
            row_labels = [f"S{i}" for i in range(len(source_items))]
            col_labels = [f"T{i}" for i in range(len(target_items))]
            font_size = 8

        # Create figure
        figsize = (fig_width_slider.value, fig_height_slider.value)
        fig, ax = plt.subplots(figsize=figsize)

        # Determine vmin based on threshold
        vmin_value = threshold_value if threshold_value > 0 else 0.0

        # Create heatmap
        sns.heatmap(
            matrix,
            cmap=colormap_dropdown.value,
            vmin=vmin_value,
            vmax=1.0,
            xticklabels=col_labels,
            yticklabels=row_labels,
            cbar_kws={"label": "Relationship Score"},
            square=False,
            linewidths=0.1 if len(source_items) < 50 and len(target_items) < 50 else 0,
            linecolor="gray",
            ax=ax,
        )

        # Set title
        title_suffix = (
            f" (score >= {threshold_value:.2f})" if threshold_value > 0 else ""
        )
        plt.title(f"Framework Mapping Heatmap{title_suffix}", fontsize=16, pad=20)

        # Adjust labels
        plt.xticks(rotation=90, fontsize=font_size)
        plt.yticks(rotation=0, fontsize=font_size)
        plt.xlabel("Target Items", fontsize=12)
        plt.ylabel("Source Items", fontsize=12)

        # Tight layout
        plt.tight_layout()

        # Return the figure for Marimo to display
        heatmap_fig = fig
    else:
        heatmap_fig = None
    return (heatmap_fig,)


@app.cell
def _(heatmap_fig, mo):
    """Display the heatmap"""
    (
        mo.vstack([mo.md("## Heatmap Visualization"), heatmap_fig])
        if heatmap_fig is not None
        else mo.md("*Upload a file and adjust parameters to generate heatmap*")
    )


@app.cell
def _(mo):
    """Export options"""
    mo.md(
        """
        ## Export Options

        To save the heatmap:
        1. Right-click on the heatmap above
        2. Select "Save image as..."
        3. Choose your preferred format (PNG, SVG, etc.)

        Alternatively, use the command-line version for automated export:
        ```bash
        python heatmap_builder.py --input mapping.csv --output heatmap.png --threshold 0.5
        ```
        """
    )
    return


if __name__ == "__main__":
    app.run()
